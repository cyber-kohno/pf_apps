{"version":3,"sources":["system/utils/dataUtil.tsx","system/redux/store/store.tsx","system/utils/systemConst.tsx","system/contents/dialog/globalDialog.tsx","system/base/design/styles.tsx","system/base/components/tab/channelPane.tsx","system/base/components/tab/tabbedPane.tsx","system/utils/form/formUtiil.tsx","system/utils/treeUtil.tsx","system/contents/dialog/confirmDialog.tsx","system/utils/form/validateUtil.tsx","system/utils/canvasUtil.tsx","system/contents/graphic/particle.tsx","system/contents/graphic/drawUtil.tsx","system/contents/graphic/vectorUtil.tsx","system/contents/create/factory/util/paramUtil.tsx","system/contents/create/preview/modulateBuilder.tsx","system/contents/create/preview/previewUtil.tsx","system/contents/create/preview/logicPreviewFrame.tsx","system/contents/create/factory/util/logicElementUtil.tsx","system/contents/create/factory/detail/logic/editorArgumentMng.tsx","system/contents/create/factory/detail/common/modifyOperations.tsx","system/contents/create/factory/detail/logic/editorParamItem.tsx","system/contents/create/factory/detail/logic/editorArgumentItem.tsx","system/contents/create/factory/detail/seed/editorSeedMng.tsx","system/contents/create/factory/detail/logic/editorLogicMng.tsx","system/contents/create/factory/detail/logic/editorLogicItem.tsx","system/contents/create/factory/detail/logic/editorBehiviorMng.tsx","system/contents/create/factory/detail/logic/editorVisualMng.tsx","system/contents/create/factory/detail/logic/editorInheritConnMng.tsx","system/contents/create/factory/detail/logic/editorInheritConnector.tsx","system/contents/create/factory/dialog/sendTemplateDialog.tsx","system/contents/create/factory/detail/logic/editorSendManager.tsx","system/contents/create/factory/detail/logic/editorFieldMng.tsx","system/contents/create/factory/detail/logic/editorExtendMng.tsx","system/contents/create/factory/detail/seed/editorSeedItem.tsx","system/contents/create/factory/detail/seed/editorThumbnailMng.tsx","system/contents/create/factory/detail/seed/editorThumbnailItem.tsx","system/contents/create/factory/detail/seed/editorSampleItem.tsx","system/contents/create/factory/detail/seed/editorSampleMng.tsx","system/contents/create/factory/detail/seed/editorInterfaceManager.tsx","system/contents/create/factory/detail/seed/editorSeedArgMng.tsx","system/contents/create/factory/detail/seed/editorSeedArgItem.tsx","system/contents/create/factory/detail/seed/editorSeedSendMng.tsx","system/contents/create/factory/util/logicUtil.tsx","system/contents/create/factory/logicMainteTab.tsx","system/contents/create/manage/manageTab.tsx","system/contents/create/launcher/launcherTab.tsx","system/contents/create/createChannel.tsx","system/contents/entry/directView.tsx","system/contents/entry/directLogin.tsx","system/contents/home/releaseNote.tsx","system/contents/home/homeChannel.tsx","system/contents/entry/mainFrame.tsx","system/contents/entry/splash.tsx","system/contents/dialog/login/loginCreateAccount.tsx","system/contents/dialog/login/loginLogin.tsx","system/contents/dialog/login/loginFrame.tsx","system/contents/dialog/accountFrame.tsx","system/contents/entry/totalHeader.tsx","system/contents/entry/systemEntry.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DB_SERVER_DOMAIN","APP_SERVER_DOMAIN","getUserHashBuilder","Hashids","getScoreHashBuilder","seq","hash","encode","Base64","hashedSeq","hashids","Number","decode","getHashedFromScoreSeq","sendQueryRequestToAPI","scoreSeq","hashedKey","json","fetch","mode","method","headers","Accept","body","JSON","stringify","createSendMailRequestInit","queryType","sql","databaseName","createQueryRequestInit","findUserInfoList","a","response","results","map","res","id","email","password","nextSeq","DataUtil","userSeq","val","content","encodeURIComponent","zlib","gzipSync","toString","buffer","Buffer","from","result","unzipSync","decodeURIComponent","date","year_str","getFullYear","month_str","getMonth","day_str","getDate","hour_str","getHours","minute_str","getMinutes","second_str","getSeconds","format_str","replace","initialStore","system","isSplash","user","dialog","SystemConst","GloballDialog","useContext","GlobalContext","store","setStore","_Blind","onClick","styled","div","FONT_SMALL","FONT_MIDIUM","CSS_LABEL","css","Styles","_CSS_LABEL_MIDIUM","ChannelPane","props","useState","activeNo","setActiveNo","useEffect","_LabelList","tabElements","tab","index","name","icon","isActive","isEnable","selectTab","undefined","selectTabIndex","_ContList","cont","ChannelLabel","_Item","_Icon","_Label","ChannelContents","_Contents","CSS_BUTTON_DISABLE","TabbedPane","tabRecordNum","enable","TabLabel","_TabLabel","TabContents","FormUtil","checkables","forEach","checkable","errors","length","type","isPassword","validaters","validates","dependency","dep","value","getErrors","validater","checker","push","errorType","setCheckable","isVisible","textAlign","isCenter","marginTop","titleLabel","_ItemnLabel","_ItemnInputBak","hasTitle","width","placeholder","onChange","e","target","readOnly","isReadOnly","jsx","labelWidth","isNaN","setNaN","isNumber","concat","step","_ItemnInput","valueAsNumber","onBlur","marginLeft","headBlank","list","slice","unshift","labelText","_ItemCombobox","item","i","_Option","disabled","isDisabled","buttons","button","_Button","callback","label","_Message","message","isLink","clickAction","_BorderText","title","_BorderPanel","innerJsx","height","_InfoDiv","color","textRecords","text","isRelation","isUse","_Switch","find","_Record","CSS_LABEL_MIDIUM","input","select","option","CSS_LABEL_SMALL","TreeUtil","data","parent","depth","isOpen","children","node","parentNode","isDisable","focusNode","ref","useRef","buildElementNodeFromData","build","dataNode","child","rootDataNode","rootElementNode","setRootElementNode","jsxList","useMemo","buildJsxRecords","element","spaceList","isCurrent","current","scrollWidth","tempNode","isRelationNode","space","lines","_LineFull","_LineTop","_LineRight","_Space","_Branch","_Jsx","clickEvent","onDoubleClick","getLabelJsx","invalidate","_Wrap","ConfirmDialog","_Frame","_Main","_Inner","split","msg","Message","ButtonRecord","str","min","max","checkIncludesChars","ch","charAt","indexOf","num","conditions","ValidateUtil","createURL","draw","canvas","document","createElement","ctx","getContext","toDataURL","CanvasUtil","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","font","fillStyle","fillText","adjust","measureText","save","WIDTH","AUTH_TEXT_WIDTH","SIZE","AUTH_TEXT_HEIGHT","rotate","Math","PI","char","fontRand","random","alphaRand","Particle","owner","pos","prevPos","vec","frame","limit","isLive","drawer","extend","update","x","xy","y","this","param","radiusBase","radius","self","flashAppearFrame","appearFrame","unitFrame","flashHideFrame","shrinkStartRate","start","floor","g","createRadialGradient","grads","rgba","convertRgbaFromColorCode","r","b","offset","convertColorCodeFromRgba","grad","addColorStop","globalAlpha","disappearStartRate","beginPath","arc","fill","code","parseInt","substring","rate","DrawUtil","VectorUtil","rad","len","syncFromXY","sqrt","atan2","syncFromRad","cos","sin","VisualParamType","BehaviorParamType","Object","values","SelfParamType","ExtendParamType","EffectParamType","ModulateParamType","ConstantType","ParamUtil","ModulateBuilder","extendList","decayRate","decayLimit","gravity","gravityLimit","SCREEN_WIDTH","SCREEN_HEIGHT","searchElement","origin","rootData","sends","createParticleRec","cur","valueMapList","ConstantValueMap","fieldMng","mngs","fields","field","paramItem","convertFormulaToValue","visualParams","params","behaviorParams","getVisualParam","convertParamsToValue","getBehaviorParam","LIMIT","POS_X","POS_Y","Vector","VEC_X","VEC_Y","VEC_RAD","VEC_LEN","connectMng","inherits","connect","connector","disable","logicItem","wrap","logicMng","defs","def","searchDependLogic","depend","addValueMap","FRAME","itrfldValueMap","loopCnt","extendParams","loopCntVal","LOOP_COUNT","convertParamsToBoolean","INVOKE","iterateValueMap","LOOP_ITERATE","sendValueMapList","Instance","DECAY_LIMIT","DECAY_RATE","GRAVITY_VAL","GRAVITY_LIMIT","RADIUS","colorR","COLOR_R","colorG","COLOR_G","colorB","COLOR_B","colorA","COLOR_A","disappearStart","DISAPPEAR_START","shrinkStart","SHRINK_START","FLASH_APPEAR_FRAME","FLASH_HIDE_FRAME","createGradDrawer","warpList","formula","v","valueMap","m","formulaStr","varCnt","formulaItems","Function","convertFormulaToBoolean","RADIAN_ROUND","PreviewUtil","LogicPreviewFrame","formList","setFormList","sceens","setSceens","frameCnt","setFrameCnt","tabIndex","setTabIndex","setCur","isBuild","setBuild","isPlay","setPlay","setTimeout","argMapList","argWrap","args","arg","key","getMapList","formListJsx","form","FormRecord","TextField","checkRequired","buildLogicProps","par","splice","isInputOK","buildTabJsx","_FormDiv","previewTabJsx","_CanvasDiv","_IMG","src","_ProgressDiv","clickX","pageX","clientRect","getBoundingClientRect","left","window","pageXOffset","_ProgressVal","onKeyDown","_CloseButton","img","typeList","some","listName","getListParamName","wrapElement","insertChild","listPos","newNode","createNode","swapOrder","size","ownerChildren","ownDataChildren","curNo","it","swapNode","swapData","LogicElementUtil","isHead","isTail","getIdentifyParamName","getNamableProps","syncTreeElementFromWrap","childWrap","createParamWrapList","paramDataList","createVisualParams","createBehaviorParams","seedMng","mng","nameList","seed","curWrap","nameParam","mngWrap","listParam","logic","curLogicOwner","VisualParams","BehaviorParams","SelfParams","ExtendParams","EffectParams","ModulateParams","Constants","argMng","prefix","console","log","mngType","getLogicItem","visualMng","behaviorMng","inhMng","inh","inhfld","getInnerWrap","EditorArgumentMng","FactoryTreeContext","setFocusNode","BorderPanel","addChild","ModifyOperations","isModify","setModify","removeSelf","isComplete","isCompleteCheck","checkableFields","mappingForm","firstRegist","modifyRegist","Level","EditorArgumentItem","setName","argType","setArgType","reservedList","getParamNameList","valueType","Component","syncArgumentAdd","prevName","syncArgumentName","checkStringLength","LogicUtil","checkFieldName","filter","includes","Combobox","ArgTypes","refers","getArgumentRefers","syncArgumentDel","getSwapButtons","argName","searchVariableReferInFormula","varItem","logicNode","newName","syncFormula","syncParamName","runRec","conn","inhLogic","sendMng","connWrap","syncArgumentCallback","inhMngNode","getInnerNode","sendNode","newArgName","paramWrap","createParamWrap","delArgName","delIndex","EditorSeedMng","itemWrap","EditorLogicMng","EditorLogicItem","el","isConnect","hasArgNode","hasFieldNode","hasConnectNode","logicNameList","getExistNameList","toggleElement","hasNode","removeChild","getDefaultLogicMngs","syncLogicName","Record","Switch","argumentNode","hasArgument","fieldNode","hasField","inheritNode","hasInherit","rootNode","logicMngNode","inherit","clone","parse","defaultName","getNumberingOnPrefixName","newWrap","getChildrenElementNode","getLocgicRefers","logicName","searchLogicReferInherit","EditorParamItem","setFormulaItems","varFormList","setVarFormList","isField","isCondition","inputType","level","FIELD","INITIAL","INHERIT_FIELD","INHERIT_EXTEND","INHERIT_SEND","argumentList","fieldKeys","parentType","getLogicNode","fieldName","Error","inhfldNode","fieldKeyList","paramNameList","addNum","delNum","parenthesisBalance","formJsxList","ParamInputTypes","getValueForm","isLastVar","isFormulaOK","hasFormError","varForm","getFormulaItem","syncFieldName","_Formula","isInvalid","_Var","_Sig","getFormulaJsx","getFieldRefers","mngNode","inheritWrap","span","EditorBehiviorMng","isVector","hasDecayParam","hasGravityParam","exchangeVectorMethod","flag","trueParamElements","falseParamElements","exchangeElements","toggleElements","paramElements","EditorVisualMng","drawMethod","THICKNESS","hasDisappearParam","hasShrinkParam","hasFlashParam","EditorInheritConnMng","EditorInheritConnector","identify","setIdentify","setMethod","setDepend","isCreate","logicList","idList","initConnectorNode","initSendParams","sendParamList","dependItem","getSendParamList","curParamList","isChange","ConnectTypes","dependLogic","COMPONENT_WIDTH","xName","setXName","yName","setYName","checkItems","argNode","behaviorNode","setParamValue","prpName","targetParam","paramList","xParam","yParam","SendTemplateDialog","EditorSendManager","isDepend","ConnectParentPosition","SetParentPosition","EditorFieldMng","EditorExtendMng","hasLoopParam","hasInvokeParam","EditorSeedItem","setOrigin","entry","seedNameList","getSeedNameList","items","samples","EditorThumbnailMng","LogicTreeContext","WND_SIZE","EditorThumbnailItem","seedWrap","setFrame","urls","setUrls","sample","getThumbnailURL","getSeedValueMap","sampleNo","argMap","sendParams","send","targetFrame","pictureJsxList","imgJsx","_SampleDiv","_SampleName","EditorSampleItem","paramForms","setParamForms","argInfoList","defval","paramForm","checkNumberRange","EditorSampleMng","EditorInterfaceManager","EditorSeedArgMng","EditorSeedArgItem","setMin","setMax","setStep","setDefval","EditorSeedSendMng","COLOR_METHOD","COLOR_MNG","COLOR_LIST","COLOR_ITEM","COLOR_FIELD","isFocus","_Category","backgroundColor","_EditableValue","detailJsx","_Span","_Field","_Signature","_Detail","nameJsx","_ValueType","wrapNode","get","elementNode","getChildrenDataNode","createContext","LogicMainteTab","getInitialData","setRootData","setInvalidate","fileHandle","setFileHandle","masterNode","openPreviewDialog","n","_TreeDiv","_TreeHead","_TreeHeadHalf","plainData","createWritable","writable","gZip","write","close","getFile","showSaveFilePicker","types","accept","then","handle","catch","showOpenFilePicker","file","fileContents","unZip","_TreeBody","Frame","getNodeDisplayJsx","_PropsDiv","_DetailDiv","_DetailHeader","_DetailHeaderLabel","getTypeName","Provider","parentWrap","_DetailMainDiv","getDetailComponent","ManageTab","LauncherTab","CreateChannel","SCORE_TAB_MARGIN","DirectView","getDecryptionedScoreSeq","hashKey","to","DirectLogin","getDecryptionedUserSeq","findUserInfoFromSeq","resList","ReleaseNote","setJsx","record","note","_Header","version","_ListFrame","HOME_USER_DIV_HEIGHT","HomeChannel","userCount","_Left","_MessageRecord","_Right","MainFrame","basename","process","RouterManage","URLSearchParams","useLocation","search","path","exact","MAIN_FRAME_MARGIN","Splash","isSwitch","setSwitch","timerId","setTimerId","remove","clearTimeout","_Title","_NowLoading","_Copylight","fadeIn","keyframes","LoginCreateAccount","isRegist","setRegist","userId","setUserId","setPassword","passwordConfirm","setPasswordConfirm","messageList","setMessageList","userIdList","setUserIdList","createAuthText","findUserIdList","authCollation","setAuthCollation","authInput","setAuthInput","authPicture","getAuthTextURL","InputTextFormBak","checkAsciiChars","InfoFrame","_AuthText","cnt","getNextUserSeq","MessageLink","LoginLogin","isForget","setForget","setEmail","findUserInfoLogin","findUserInfoFromEmail","info","getHashedFromUserSeq","url","sendQueryRequestToMailAPI","subject","LoginFrame","setCreate","logo","getLogoURL","_LogoDiv","_TypeSwitch","AccountFrame","oldPass","setOldPass","newPass","setNewPass","newPassConfirm","setNewPassConfirm","emailList","setEmailList","loginProps","reloadInfo","history","replaceState","userTabJsx","permitRegist","_Body","passwordStr","updateUserInfo","_Footer","TotalHeader","authButtonJsx","_LoginButton","location","_UserName","isEntry","_ACCENT","_NORMAL","_Menu","_Language","_MenuItem","TOTAL_HEADER_WIDTH","SystemEntry","_MainDiv","App","oncontextmenu","onkeydown","ctrlKey","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.41d896c9.chunk.js","sourcesContent":["import zlib from \"zlib\";\n// import { createClient } from \"@supabase/supabase-js\";\nimport { Base64 } from \"js-base64\";\nimport Hashids from 'hashids';\n\n// const SUPABASE_URL = \"https://rxjdrbdnfvfdbjvaljsp.supabase.co\";\n// const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ4amRyYmRuZnZmZGJqdmFsanNwIiwicm9sZSI6ImFub24iLCJpYXQiOjE2NTQxNTQwMTgsImV4cCI6MTk2OTczMDAxOH0.Iq-ilL7ayVatIsG--Lq4WpdL_o1h-6RpR4KjWBdr24M';\n\n// const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);\n\nnamespace DataUtil {\n\n    export const DB_SERVER_DOMAIN = 'http://localhost:5001';\n    // export const DB_SERVER_DOMAIN = 'https://licresia-demo01-server.glitch.me';\n    // export const DB_SERVER_DOMAIN = 'https://licresia-server.glitch.me';\n\n    export const APP_SERVER_DOMAIN = 'http://localhost:4333';\n    // export const APP_SERVER_DOMAIN = 'https://cyber-kohno.github.io/licresia_demo_app';\n    // export const APP_SERVER_DOMAIN = 'https://demo-app.licresia.com';\n\n    const getUserHashBuilder = () => {\n        return new Hashids('pa-user', 8);\n    }\n\n    export const getHashedFromUserSeq = (seq: number) => {\n        const hashids = getUserHashBuilder();\n        const hash = hashids.encode(seq);\n        const hashedKey = Base64.encode(hash, true);\n        return hashedKey;\n    }\n\n    export const getDecryptionedUserSeq = (hashedSeq: string) => {\n        const hashids = getUserHashBuilder();\n        const decryptioned = Number(hashids.decode(Base64.decode(hashedSeq)));\n        return decryptioned;\n    }\n\n    const getScoreHashBuilder = () => {\n        return new Hashids('pa', 8);\n    }\n\n    export const getHashedFromScoreSeq = (seq: number) => {\n        const hashids = getScoreHashBuilder();\n        const hash = hashids.encode(seq);\n        const hashedKey = Base64.encode(hash, true);\n        return hashedKey;\n    }\n\n    export const getDecryptionedScoreSeq = (hashedSeq: string) => {\n        const hashids = getScoreHashBuilder();\n        const decryptioned = Number(hashids.decode(Base64.decode(hashedSeq)));\n        return decryptioned;\n    }\n\n    export const getPreviewURL = (scoreSeq: number) => {\n        const hashedKey = getHashedFromScoreSeq(scoreSeq);\n        const url = `${APP_SERVER_DOMAIN}/#/preview?v=${hashedKey}`;\n        return url;\n    }\n\n    /**\n     * クエリリクエストを生成する\n     * @param sql \n     * @returns \n     */\n    const createQueryRequestInit = (sql: string): RequestInit => {\n        return {\n            mode: 'cors',\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ sql, databaseName: 'pa' })\n        }\n    }\n\n    export type SendMailParam = {\n        from: string,\n        to: string,\n        subject: string,\n        text: string\n    }\n\n    const createSendMailRequestInit = (json: SendMailParam): RequestInit => {\n        return {\n            mode: 'cors',\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(json)\n        }\n    }\n\n    export const sendQueryRequestToMailAPI = (json: SendMailParam): Promise<Response> => {\n        return fetch(DB_SERVER_DOMAIN + '/mail',\n            createSendMailRequestInit(json)\n        );\n    }\n\n    /**\n     * select/updateを指定してSQLを実行する。<br>\n     * selectの場合、結果をjsonで返す。\n     * @param queryType\n     * @param sql \n     * @returns \n     */\n    export const sendQueryRequestToAPI = (queryType: 'select' | 'update', sql: string): Promise<Response> => {\n        return fetch(DB_SERVER_DOMAIN + '/' + queryType,\n            createQueryRequestInit(sql)\n        );\n    }\n\n    export const findUserInfoList = async () => {\n        const response = await sendQueryRequestToAPI('select', `SELECT id, email FROM user_tbl`);\n        const results = await response.json();\n        return results as { id: string, email: string}[];\n    };\n\n    export const findUserIdList = async () => {\n        const results = await findUserInfoList();\n        return (results as { id: string}[]).map(res => res.id);\n    };\n\n    export const findUserInfoFromEmail = async (email: string) => {\n        const response = await sendQueryRequestToAPI('select', `SELECT seq, id FROM user_tbl WHERE email = '${email}'`);\n        const results = await response.json();\n        return results as { seq: number, id: string }[];\n    };\n\n    export const findUserInfoFromSeq = async (seq: number) => {\n        const response = await sendQueryRequestToAPI('select', `SELECT seq, id, password, email FROM user_tbl WHERE seq = ${seq}`);\n        const results = await response.json();\n        return results as { seq: number, id: string, password: string, email: string }[];\n    };\n\n    export const findUserInfoLogin = async (id: string, password: string) => {\n        const response = await sendQueryRequestToAPI('select', `SELECT seq, id, password, email FROM user_tbl WHERE id = '${id}' and password = '${password}'`);\n        const results = await response.json();\n        return results as { seq: number, id: string, password: string, email: string }[];\n    };\n\n    export const getNextUserSeq = async () => {\n        const response = await sendQueryRequestToAPI('select', `SELECT seq FROM sqlite_sequence WHERE name = 'user_tbl'`);\n        const results = await response.json();\n        const nextSeq = (results[0]['seq'] as number) + 1;\n        DataUtil.sendQueryRequestToAPI('update', `update sqlite_sequence set seq = seq + 1 where name='user_tbl'`);\n\n        return nextSeq;\n    };\n\n    export const findUserScoreList = async (userSeq: number) => {\n        const response = await DataUtil.sendQueryRequestToAPI('select', `SELECT seq, dispnam, share FROM scoretbl WHERE user_seq = ${userSeq}`);\n        const results = await response.json();\n        return results as any[];\n    };\n\n    export const findScore = async (scoreSeq: number) => {\n        const response = await DataUtil.sendQueryRequestToAPI('select', `SELECT (select id from user_tbl where seq = score.user_seq) as owner, dispnam, data FROM scoretbl score WHERE seq = ${scoreSeq}`);\n        const results = await response.json();\n        return results as any[];\n    };\n\n    /**\n     * 文字列を圧縮する\n     * @param val 圧縮前の文字列\n     * @returns 圧縮後の文字列\n     */\n    export const gZip = (val: string) => {\n        // エンコード\n        const content = encodeURIComponent(val);\n        // 圧縮\n        const result = zlib.gzipSync(content);\n        // Buffer => base64変換\n        const value = result.toString('base64');\n        return value;\n    }\n\n    /**\n     * 圧縮された文字列を複号する\n     * @param val 圧縮された文字列\n     * @returns 複号後の文字列\n     */\n    export const unZip = (val: string) => {\n        // base64 => Bufferに変換\n        const buffer = Buffer.from(val, 'base64')\n        // 復号化\n        const result = zlib.unzipSync(buffer)\n        // デコード\n        const str = decodeURIComponent(result.toString())\n        return str;\n    }\n\n    /**\n     * Date型の日時を文字列に変換する\n     * @param date Date型の日時\n     * @returns 文字列の日時\n     */\n    export const getStringFromDate = (date: Date) => {\n\n        const year_str = date.getFullYear().toString();\n        //月だけ+1すること\n        const month_str = (1 + date.getMonth()).toString();\n        const day_str = date.getDate().toString();\n        const hour_str = date.getHours().toString();\n        const minute_str = date.getMinutes().toString();\n        const second_str = date.getSeconds().toString();\n\n        let format_str = 'YYYY-MM-DD hh:mm:ss';\n        format_str = format_str.replace(/YYYY/g, year_str);\n        format_str = format_str.replace(/MM/g, month_str);\n        format_str = format_str.replace(/DD/g, day_str);\n        format_str = format_str.replace(/hh/g, hour_str);\n        format_str = format_str.replace(/mm/g, minute_str);\n        format_str = format_str.replace(/ss/g, second_str);\n\n        return format_str;\n    };\n}\n\nexport default DataUtil;","import StoreSystem from \"./storeSystem\";\n\n/**\n * システムで使用するステート群\n */\nexport type Store = {\n    system: StoreSystem.Param;\n}\n\nexport const initialStore: Store = {\n    system: {\n        isSplash: false,\n        user: null,\n        dialog: null,\n    },\n}","\nnamespace SystemConst {\n    export const AUTH_TEXT_WIDTH = 350;\n    export const AUTH_TEXT_HEIGHT = 70;\n}\n\nexport default SystemConst;\n\nexport const APP_MIN_WIDTH = 800;\nexport const APP_MIN_HEIGHT = 600;\n\nexport const TOTAL_HEADER_WIDTH = 44;\n\nexport const MAIN_FRAME_MARGIN = 15;\nexport const SCORE_TAB_MARGIN = 8;\n\nexport const BUTTON_SMALL_HEIGHT = 18;\nexport const BUTTON_MIDIUM_HEIGHT = 28;\nexport const BUTTON_LARGE_HEIGHT = 34;\n\n\n// ホームチャンネル\nexport const HOME_USER_DIV_HEIGHT = 400;\n\n// ハーモナイズタブ\n\nexport const FIRST_CHORD_INDEX = 3;\n\nexport const HARMONIZE_RIGHT_WIDTH = 220;\nexport const HARMONIZE_HEAD_WIDTH = 35;\nexport const HARMONIZE_FOOT_WIDTH = 80;\nexport const HARMONIZE_STRUCT_WIDTH = 380;\nexport const HARMONIZE_SECTIONS_WIDTH = 110;\n\nexport const ELEMENT_HEIGHT = 134;\nexport const ELEMENT_HEAD_WIDTH = 15;\nexport const ELEMENT_FOOT_WIDTH = 60;\nexport const ELEMENT_SIDE_PADDING = 8;\nexport const ELEMENT_NOTE_PADDING_LEN = 10;\nexport const ELEMENT_NOTE_PADDING_SID = 30;\nexport const ELEMENT_POS_INFO_WIDTH = 50;\nexport const ELEMENT_OPERATIONS_WIDTH = 20;\n\nexport const TIMELINE_BEAT_WIDTH = 80;\n\n\nexport const TUNE_HEADER_WIDTH = 80;\nexport const TUNE_TIMELINE_WIDTH = 70;\nexport const TUNE_PITCH_WIDTH = 100;\nexport const TUNE_PITCH_HEIGHT = 30;\n\n\n\nexport const PATTERN_OPERATION_HEIGHT = 30;\nexport const PATTERN_HEADER_HEIGHT = 50;\nexport const PATTERN_BODY_HEIGHT = 240;\nexport const PATTERN_FOOTER_HEIGHT = 50;\nexport const PATTERN_FRAME_HEIGHT = PATTERN_OPERATION_HEIGHT + PATTERN_HEADER_HEIGHT + PATTERN_BODY_HEIGHT + PATTERN_FOOTER_HEIGHT;\n\n\nexport const NOTES_1BAR_WIDTH = 480;","import { useContext, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { GlobalContext } from \"../entry/systemEntry\";\n\n\nconst GloballDialog = () => {\n\n    const { store, setStore } = useContext(GlobalContext);\n\n    const dialog = store.system.dialog;\n\n    if (dialog == null) return <></>;\n    return (<>\n        <_Blind onClick={() => {\n            store.system.dialog = null;\n            setStore({...store});\n        }} />\n        {dialog}\n    </>);\n}\n\nexport default GloballDialog;\n\nconst _Blind = styled.div<{\n}>`\n    display: block;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background-color: #000329a2;\n    z-index: 10;\n    text-align: center;\n`;\n","import styled, { css } from \"styled-components\";\n\nnamespace Styles {\n\n    export const FONT_SMALL = 16;\n    export const FONT_MIDIUM = 22;\n    export const FONT_LARGE = 32;\n\n    export const CSS_LABEL = css`\n        display: inline-block;\n        font-weight: 600;\n        text-align: center;\n        color: black;\n        box-sizing: border-box;\n    `;\n\n    export const CSS_LABEL_SMALL = css`\n        ${CSS_LABEL}\n        height: 22px;\n        font-size: ${FONT_SMALL}px;\n        line-height: 18px;\n    `;\n\n    export const CSS_LABEL_MIDIUM = css`\n        ${CSS_LABEL}\n        height: 30px;\n        font-size: ${FONT_MIDIUM}px;\n        line-height: 26px;\n    `;\n\n    export const CSS_BUTTON_DISABLE = css`\n        pointer-events: none;\n        opacity: 0.5;\n    `;\n}\nexport default Styles;\n\nexport const _WrapperFrame = styled.div`\n    display: inline-block;\n    width: 100%;\n    height: 100%;\n`;\n\nexport const _Object = styled.div`\n    display: inline-block;\n`;\n\nexport const _Record = styled.div`\n    display: inline-block;\n    width: 100%;\n`;\n\nexport const _CSS_LABEL_SMALL = css`\n    display: inline-block;\n    height: 22px;\n    font-size: 18px;\n    font-weight: 600;\n    color: black;\n    line-height: 18px;\n`;\n\n\nexport const _CSS_LABEL_MIDIUM = css`\n    display: inline-block;\n    height: 30px;\n    font-size: ${Styles.FONT_MIDIUM}px;\n    font-weight: 600;\n    text-align: center;\n    color: black;\n    line-height: 24px;\n    box-sizing: border-box;\n`;\n\nexport const _CSS_DISABLE = css`\n    opacity: 0.6;\n    pointer-events: none;\n`;\n\n","import { useEffect, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport Styles from \"../../design/styles\";\n\ntype ChannelPaneProps = {\n    activeNo: number;\n    tabElements: ChannelElements[];\n    selectTabIndex?: Function;\n}\n\ntype ChannelElements = {\n    name: string;\n    icon: JSX.Element;\n    isEnable: boolean;\n    cont: JSX.Element;\n}\n\nexport const ChannelPane = (props: ChannelPaneProps) => {\n    const [activeNo, setActiveNo] = useState(props.activeNo);\n\n    // タブ押下時の処理\n    const selectTabIndex = (index: number) => {\n        if (props.selectTabIndex != undefined) {\n            props.selectTabIndex(index);\n        } else {\n            setActiveNo(index);\n        }\n    };\n\n    useEffect(() => {\n        setActiveNo(props.activeNo);\n    }, [props.activeNo]);\n\n    return (\n        <>\n            <_LabelList>\n                {\n                    props.tabElements.map((tab, index) => {\n                        return <ChannelLabel\n                            key={index} name={tab.name} icon={tab.icon} isActive={index == activeNo} isEnable={tab.isEnable}\n                            selectTab={() => selectTabIndex(index)}\n                        />\n                    })\n                }\n            </_LabelList>\n            <_ContList>\n                {\n                    props.tabElements.map((tab, index) => {\n                        return <ChannelContents key={index} cont={tab.cont} isActive={index === activeNo} />\n                    })\n                }\n            </_ContList>\n        </>\n    );\n}\n\nconst ChannelLabel = (props: {\n    name: string;\n    icon: JSX.Element;\n    isEnable: boolean;\n    isActive: boolean;\n    selectTab: Function;\n}) => {\n    return (\n        <_Item\n            isEnable={props.isEnable}\n            isActive={props.isActive}\n            onClick={() => props.selectTab()}\n        >\n            <_Icon>{props.icon}</_Icon>\n            <_Label>{props.name}</_Label>\n        </_Item>\n    );\n}\n\nconst ChannelContents = (props: {\n    isActive: boolean;\n    cont: JSX.Element;\n}) => {\n    return (\n        <_Contents isActive={props.isActive}>\n            {props.cont}\n        </_Contents>\n    );\n}\n\nconst _LabelList = styled.div`\n    display: inline-block;\n    width: 100px;\n    margin-right: 5px;\n    height: 100%;\n    background-color: #b9b9b9;\n    border: 1px solid #707070;\n    box-sizing: border-box;\n    border-radius: 10px 0 0 10px;\n    vertical-align: top;\n    box-shadow: 1px 2px 12px #aaaaaa;\n`;\nconst _ContList = styled.div`\n    display: inline-block;\n    background-color: #b9b9b9;\n    border: 1px solid #707070;\n    box-sizing: border-box;\n    width: calc(100% - 105px);\n    height: 100%;\n    border-radius: 0 6px 6px 0;\n    box-shadow: 1px 2px 12px #aaaaaa;\n`;\n\nconst _Contents = styled.div<{\n    isActive: boolean;\n}>`\n    /* margin: 3px 0 0 3px;\n    width: calc(100% - 6px);\n    height: calc(100% - 6px); */\n    width: 100%;\n    height: 100%;\n    /* background-color: #ece6e6; */\n    ${props => !props.isActive ? css`display: none;` : css`display: inline-block;`}\n`;\n\nconst _Item = styled.div<{\n    isEnable: boolean;\n    isActive: boolean;\n}>`\n    display: inline-block;\n    width: 90px;\n    height: 90px;\n    margin: 5px 0 0 5px;\n    border-radius: 10px;\n    ${props => {\n        if (props.isActive) {\n            return css`\n                background-color: #e4e3e1;\n                border: 1px solid #949494\n            `;\n        } else {\n            return css`\n                background-color: #d1d1d1;\n                opacity: 0.8;\n            `;\n        }\n    }}\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\n    transition: background-color 500ms;\n    & *{\n        transition: color 150ms;\n    }\n    // アクティブじゃない時だけhover要素を付加\n    ${props => props.isActive ? '' : css`\n        &:hover {\n            & *{\n                transition: color 150ms;\n                /* background-color: #e2d6d6; */\n                text-shadow: 1px 2px 22px #f7f7f7ea;\n                color: #a7a7a7;\n            }\n        }\n    `}\n`;\n\nconst IconHover = css`\n    text-shadow: 1px 2px 22px #f7f7f7cf;\n    color: #a3a3a3;\n`;\n\nconst _Icon = styled.div`\n    display: inline-block;\n    width: 100%;\n    height: 60px;\n    /* background-color: #df828221; */\n    font-size: 50px;\n    color: #757575;\n    text-align: center;\n    padding-top: 5px;\n    box-sizing: border-box;\n`;\n\nconst _Label = styled.div`\n    display: inline-block;\n    width: 100%;\n    height: 30px;\n    /* background-color: #8482df20; */\n    font-size: 20px;\n    font-weight: 600;\n    color: #757575;\n    text-align: center;\n`;","import { useEffect, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\n\ntype TabbedPaneProps = {\n    activeNo: number;\n    tabElements: TabElements[];\n    selectTabIndex?: Function;\n    tabRecordNum?: number;\n}\n\ntype TabElements = {\n    name: string;\n    enable: boolean;\n    cont: JSX.Element;\n}\n\nexport const TabbedPane = (props: TabbedPaneProps) => {\n    const [activeNo, setActiveNo] = useState(props.activeNo);\n\n    // タブ押下時の処理\n    const selectTabIndex = (index: number) => {\n        if (props.selectTabIndex != undefined) {\n            props.selectTabIndex(index);\n        } else {\n            setActiveNo(index);\n        }\n    };\n\n    const tabRecordNum = props.tabRecordNum ?? 1;\n\n    useEffect(() => {\n        setActiveNo(props.activeNo);\n    }, [props.activeNo]);\n\n    return (\n        <>\n            <_LabelList tabRecordNum={tabRecordNum}>\n                {/* {tabList} */}\n                {\n                    props.tabElements.map((tab, index) => {\n                        return <TabLabel\n                            key={index} name={tab.name} isActive={index == activeNo} isEnable={tab.enable}\n                            selectTab={() => selectTabIndex(index)}\n                        />\n                    })\n                }\n            </_LabelList>\n            <_ContList tabRecordNum={tabRecordNum}>\n                {/* {contList} */}\n                {\n                    props.tabElements.map((tab, index) => {\n                        return <TabContents key={index} cont={tab.cont} isActive={index === activeNo} />\n                    })\n                }\n            </_ContList>\n        </>\n    );\n}\n\nconst TabLabel = (props: {\n    name: string;\n    isActive: boolean;\n    isEnable: boolean;\n    selectTab: Function;\n}) => {\n    return (\n        <_TabLabel\n            isEnable={props.isEnable}\n            isActive={props.isActive}\n            onClick={() => props.selectTab()}>\n            {props.name}\n        </_TabLabel>\n    );\n}\n\nconst TabContents = (props: {\n    isActive: boolean;\n    cont: JSX.Element;\n}) => {\n    // return props.isActive ?\n    //     <div className=\"tab-cont\">{props.cont}</div>\n    //     :\n    //     <></>\n    //     ;\n    return (\n        <_Contents isActive={props.isActive}>\n            {props.cont}\n        </_Contents>\n    );\n}\n\nconst _LabelList = styled.div<{\n    tabRecordNum: number;\n}>`\n    display: inline-block;\n    height: ${props => 35 * props.tabRecordNum}px;\n    text-align: left;\n    /* background-color: #ac3b3b; */\n    width: 100%;\n`;\nconst _ContList = styled.div<{\n    tabRecordNum: number;\n}>`\n    display: block;\n    background-color: #999999;\n    height: calc(100% - ${props => props.tabRecordNum * 35}px);\n    border-radius: 0 6px 6px 6px;\n    box-shadow: 0 2px 0 0 #000b3a48;\n    text-align: left;\n`;\n\nconst _Contents = styled.div<{\n    isActive: boolean;\n}>`\n    margin: 3px 0 0 3px;\n    width: calc(100% - 6px);\n    height: calc(100% - 6px);\n    ${props => !props.isActive ? css`display: none;` : css`display: inline-block;`}\n`;\n\nconst _TabLabel = styled.div<{\n    isEnable: boolean;\n    isActive: boolean;\n}>`\n    display: inline-block;\n    /* width: 100px; */\n    padding: 0 10px;\n    \n    ${props => {\n        if (props.isActive) {\n            return css`\n                color: #ebebeb;\n                padding: 0 35px;\n                background-color: #999999;\n                height: 35px;\n                font-size: 24px;\n                border-radius: 3px 15px 0 0;\n                text-shadow: 1px 2px 3px #00000065;\n            `;\n        } else {\n            return css`\n                height: 100%;\n                color: #555;\n                /* background-color: #90909b; */\n                background: linear-gradient(to bottom, #999999, #7a7a7a);\n                height: 30px;\n                font-size: 18px;\n                margin-top: 5px;\n                border-radius: 3px 10px 0 0;\n                ${props.isEnable ? '' : css`\n                    pointer-events: none;\n                    opacity: 0.7;\n                `}\n            `;\n        }\n    }}\n    /* opacity: 0.7; */\n    user-select: none;\n    margin-right: 6px;\n    font-weight: 600;\n    box-sizing: border-box;\n    line-height: 30px;\n    vertical-align: bottom;\n    transition: padding 100ms;\n`;","import styled, { css } from \"styled-components\";\nimport Styles, { _CSS_LABEL_MIDIUM } from \"../../base/design/styles\";\nimport ValidateUtil from \"./validateUtil\";\nimport { useEffect, useState } from \"react\";\n\nnamespace FormUtil {\n\n    export type CheckableValue = {\n        value: string;\n        errors: ValidateUtil.ErrorType[];\n    }\n\n    export const isCompleteCheck = (checkables: CheckableValue[]) => {\n        let result = true;\n        checkables.forEach(checkable => {\n            if (checkable.errors.length > 0) {\n                result = false;\n                return 1;\n            }\n        });\n        return result;\n    }\n\n    export const InputTextFormBak = (props: {\n        titleLabel?: string;\n        checkable: CheckableValue;\n        setCheckable: (value: CheckableValue) => void;\n        isEnable?: boolean;\n        placeholder?: string;\n        isCenter?: boolean;\n        width?: number;\n        isPassword?: boolean;\n        validates?: ValidateUtil.Validate[];\n        dependency?: CheckableValue[];\n        marginTop?: number;\n        isReadOnly?: boolean;\n        marginBottom?: number;\n    }) => {\n        const type = props.isPassword ?? false ? 'password' : 'text';\n\n        const validaters = props.validates ?? [];\n        const errors = props.checkable.errors;\n        const dependency = (props.dependency ?? []).map(dep => dep.value);\n\n        const getErrors = (value: string) => {\n            const errors: ValidateUtil.ErrorType[] = [];\n            validaters.forEach(validater => {\n                if (!validater.checker(value)) {\n                    errors.push(validater.errorType);\n                }\n            });\n            return errors;\n        }\n        useEffect(() => {\n            props.checkable.errors = getErrors(props.checkable.value);\n            props.setCheckable({ ...props.checkable });\n        }, dependency);\n        return (\n            <_Record\n                isEnable={props.isEnable ?? true}\n                isVisible={true}\n                textAlign={(props.isCenter ?? false) ? 'center' : 'left'}\n                marginTop={props.marginTop ?? 0}\n            >\n                {props.titleLabel == undefined ? <></> : <_ItemnLabel>{props.titleLabel}</_ItemnLabel>}\n                <_ItemnInputBak\n                    type={type}\n                    value={props.checkable.value}\n                    hasTitle={props.titleLabel != undefined}\n                    width={props.width}\n                    isCenter={props.isCenter ?? false}\n                    placeholder={props.placeholder}\n                    onChange={(e) => {\n                        const value = e.target.value;\n                        props.checkable.value = value;\n                        props.checkable.errors = getErrors(value);\n                        props.setCheckable({ ...props.checkable });\n                    }}\n                    errorType={errors.length === 0 ? undefined : errors[0]}\n                    readOnly={props.isReadOnly}\n                />\n            </_Record>\n        );\n    }\n\n\n    export const Record = (props: {\n        isEnable?: boolean;\n        textAlign?: 'left' | 'center' | 'right';\n        marginTop?: number;\n        jsx: JSX.Element;\n    }) => {\n        return (\n            <_Record\n                isEnable={props.isEnable ?? true}\n                isVisible={true}\n                textAlign={props.textAlign ?? 'left'}\n                marginTop={props.marginTop ?? 0}\n            >\n                {props.jsx}\n            </_Record>\n        );\n    }\n\n    export const FormRecord = (props: {\n        titleLabel?: string;\n        labelWidth?: number;\n        isEnable?: boolean;\n        isVisible?: boolean;\n        textAlign?: 'left' | 'center' | 'right';\n        marginTop?: number;\n        jsx: JSX.Element;\n    }) => {\n        return (\n            <_Record\n                isEnable={props.isEnable ?? true}\n                isVisible={props.isVisible ?? true}\n                textAlign={props.textAlign ?? 'left'}\n                marginTop={props.marginTop ?? 0}\n            >\n                {props.titleLabel == undefined ? <></> : <_ItemnLabel labelWidth={props.labelWidth}>{props.titleLabel}</_ItemnLabel>}\n                {props.jsx}\n            </_Record>\n        );\n    }\n\n    export const TextField = (props: {\n        checkable: CheckableValue;\n        setCheckable: (value: CheckableValue) => void;\n        isEnable?: boolean;\n        placeholder?: string;\n        width?: number;\n        isPassword?: boolean;\n        validates?: ValidateUtil.Validate[];\n        dependency?: CheckableValue[];\n        isReadOnly?: boolean;\n        isNumber?: boolean;\n        marginLeft?: number;\n        step?: number;\n    }) => {\n        const [isNaN, setNaN] = useState(false);\n\n        useEffect(() => {\n            if (props.checkable.value === ' ') {\n                props.checkable.value = '';\n                props.setCheckable({ ...props.checkable });\n            }\n        }, [props.checkable.value]);\n\n        let type = props.isPassword ?? false ? 'password' : 'text';\n        if (props.isNumber ?? false) {\n            type = 'number';\n        }\n\n        const validaters = props.validates ?? [];\n        const errors = props.checkable.errors;\n        const dependency = (props.dependency ?? []).map(dep => dep.value);\n\n        const getErrors = (value: string) => {\n            const errors: ValidateUtil.ErrorType[] = [];\n            validaters.forEach(validater => {\n                if (!validater.checker(value)) {\n                    errors.push(validater.errorType);\n                }\n            });\n            return errors;\n        }\n        useEffect(() => {\n            props.checkable.errors = getErrors(props.checkable.value);\n            props.setCheckable({ ...props.checkable });\n        }, dependency.concat(props.checkable.value));\n\n        const value = props.checkable.value;\n        const step = props.step ?? 1;\n\n        return (\n            <_ItemnInput\n                type={type}\n                value={value}\n                width={props.width ?? 100}\n                placeholder={props.placeholder}\n                step={step}\n                onChange={(e) => {\n                    // console.log(e.target.valueAsNumber);\n                    props.checkable.value = e.target.value;\n                    props.setCheckable({ ...props.checkable });\n                    if (type === 'number') {\n                        setNaN(Number.isNaN(e.target.valueAsNumber));\n                    }\n                }}\n                onBlur={() => {\n                    if (type === 'number') {\n                        if (isNaN) props.checkable.value = ' ';\n                        else props.checkable.value = Number(value).toString();\n                        // console.log(`[${props.checkable.value}]`);\n                        props.setCheckable({ ...props.checkable });\n                    }\n                }}\n                errorType={errors.length === 0 ? undefined : errors[0]}\n                readOnly={props.isReadOnly}\n                marginLeft={props.marginLeft}\n            />\n        );\n    }\n\n    export type ComboboxItemProps = { value: string, labelText: string, isDisabled?: boolean };\n    export const Combobox = (props: {\n        list: ComboboxItemProps[];\n        headBlank?: boolean;\n        checkable: CheckableValue;\n        setCheckable: (value: CheckableValue) => void;\n        isEnabled?: boolean;\n        placeholder?: string;\n        width?: number;\n        validates?: ValidateUtil.Validate[];\n        dependency?: CheckableValue[];\n        isReadOnly?: boolean;\n        marginLeft?: number;\n    }) => {\n        const validaters = props.validates ?? [];\n        const errors = props.checkable.errors;\n        const dependency = (props.dependency ?? []).map(dep => dep.value);\n        const headBlank = props.headBlank ?? false;\n        const list = props.list.slice();\n        if (headBlank) list.unshift({ value: '', labelText: '' });\n\n        const getErrors = (value: string) => {\n            const errors: ValidateUtil.ErrorType[] = [];\n            validaters.forEach(validater => {\n                if (!validater.checker(value)) {\n                    errors.push(validater.errorType);\n                }\n            });\n            return errors;\n        }\n\n        useEffect(() => {\n            // console.log('value: ' + props.checkable.value);\n            props.checkable.errors = getErrors(props.checkable.value);\n            props.setCheckable({ ...props.checkable });\n        }, dependency.concat(props.checkable.value));\n\n        return (\n            <_ItemCombobox\n                value={props.checkable.value}\n                width={props.width ?? 100}\n                placeholder={props.placeholder}\n                onChange={(e) => {\n                    const value = e.target.value;\n                    props.checkable.value = value;\n                    // props.checkable.errors = getErrors(value);\n                    props.setCheckable({ ...props.checkable });\n\n                }}\n                errorType={errors.length === 0 ? undefined : errors[0]}\n                readOnly={props.isReadOnly}\n                marginLeft={props.marginLeft}\n            >{list.map((item, i) => {\n                return (\n                    <_Option key={i}\n                        value={item.value}\n                        disabled={item.isDisabled ?? false}\n                        isDisabled={item.isDisabled ?? false}\n                    >{item.labelText}</_Option>\n                );\n            })}</_ItemCombobox>\n        );\n    }\n\n    export type ButtonProps = {\n        label: string;\n        isEnable?: boolean;\n        width?: number;\n        callback: () => void;\n    }\n\n    export const ButtonRecord = (props: {\n        buttons: ButtonProps[],\n        isCenter?: boolean;\n        marginTop?: number;\n        marginBottom?: number;\n    }) => {\n        return (\n            <_Record\n                isEnable={true}\n                isVisible={true}\n                textAlign={(props.isCenter ?? false) ? 'center' : 'right'}\n                marginTop={props.marginTop ?? 0}\n            >\n                {props.buttons.map((button, i) => {\n                    return (\n                        <_Button\n                            key={i}\n                            isCenter={props.isCenter ?? false}\n                            isEnable={button.isEnable ?? true}\n                            width={button.width}\n                            onClick={button.callback}\n                        >{button.label}</_Button>\n                    );\n                })}\n            </_Record>\n        );\n    }\n\n    export const Message = (props: {\n        message: string,\n        isCenter?: boolean;\n        marginTop?: number;\n        marginBottom?: number;\n    }) => {\n        return (\n            <_Record\n                isEnable={true}\n                isVisible={true}\n                textAlign={(props.isCenter ?? false) ? 'center' : 'left'}\n                marginTop={props.marginTop ?? 0}\n            >\n                <_Message\n                    isCenter={props.isCenter ?? false}\n                >{props.message}</_Message>\n            </_Record>\n        );\n    }\n\n    export const MessageLink = (props: {\n        message: string,\n        isCenter?: boolean;\n        clickAction: () => void;\n        marginTop?: number;\n        marginBottom?: number;\n    }) => {\n        return (\n            <_Record\n                isEnable={true}\n                isVisible={true}\n                textAlign={(props.isCenter ?? false) ? 'center' : 'left'}\n                marginTop={props.marginTop ?? 0}\n            >\n                <_Message\n                    isLink={true}\n                    onClick={props.clickAction}\n                    isCenter={props.isCenter ?? false}\n                >{props.message}</_Message>\n            </_Record>\n        );\n    }\n\n    export const BorderPanel = (props: {\n        title: string;\n        isEnable?: boolean;\n        innerJsx: JSX.Element;\n    }) => {\n        // const title = props.title ?? 'title pl';\n        return (<>\n            <_BorderText>{props.title}</_BorderText>\n            <_BorderPanel isEnable={props.isEnable ?? true}>{props.innerJsx}</_BorderPanel>\n        </>);\n    }\n\n    export const InfoFrame = (props: {\n        height?: number;\n        textRecords: string[];\n    }) => {\n        const height = props.height ?? 70;\n        const color = '#1a9900';\n        return (<>\n            <_InfoDiv height={height} color={color}>\n                {props.textRecords.map((text, i) => {\n                    return <span key={i}>{text}<br /></span>;\n                })}\n            </_InfoDiv>\n        </>);\n    };\n\n    export const Switch = (props: {\n        label: string;\n        isUse: boolean;\n        isEnable?: boolean;\n        width?: number;\n        isRelation?: boolean;\n        callback: () => void;\n    }) => {\n        const isRelation = props.isRelation ?? false;\n        const callback = isRelation && props.isUse ? () => { } : props.callback;\n        return (\n            <_Switch\n                isRelation={isRelation}\n                isUse={props.isUse}\n                isEnable={props.isEnable ?? true}\n                width={props.width}\n                onClick={callback}\n            >{props.label}</_Switch>\n        );\n    }\n\n    export const checkItems = (list: CheckableValue[]) => {\n        return list.find(item => item.errors.length > 0) == undefined;\n    }\n}\n\nexport default FormUtil;\n\n\nconst _Record = styled.div<{\n    isEnable: boolean;\n    isVisible: boolean;\n    textAlign: 'left' | 'center' | 'right';\n    marginTop: number;\n}>`\n    display: inline-block;\n    ${props => props.isVisible ? '' : css`\n        display: none;\n    `}\n    width: 100%;\n    height: 40px;\n    margin-top: ${props => props.marginTop}px;\n    /* background-color: #b3b4c4; */\n    /* border: 1px solid #000; */\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\n    text-align: ${props => props.textAlign};\n`;\n\nconst _ItemnLabel = styled.div<{\n    labelWidth?: number;\n}>`\n    display: inline-block;\n    height: calc(100% - 4px);\n    width: ${props => props.labelWidth ?? 140}px;\n    ${Styles.CSS_LABEL_MIDIUM}\n    color: #585858;\n    border: solid 1px #7a7a7abf;\n    box-sizing: border-box;\n    /* background-color: #85a2c5; */\n    background: linear-gradient(to bottom, #c3c3c3fc, #d8d8d8, #c3c3c3fc);\n    border-radius: 4px;\n    text-align: center;\n    vertical-align: top;\n    margin: 5px 4px 0 4px;\n`;\n\nconst _ItemnInputBak = styled.input<{\n    readOnly?: boolean;\n    isCenter: boolean;\n    hasTitle: boolean;\n    width?: number;\n    errorType?: ValidateUtil.ErrorType;\n}>`\n    display: inline-block;\n    height: calc(100% - 4px);\n    ${props => !props.hasTitle ? css`\n    ` : css`\n        width: calc(100% - 152px);\n    `}\n    ${props => props.width == undefined ? '' : css`\n        width: ${props.width}px;\n    `}\n    margin-top: 2px;\n    font-size: 24px;\n    line-height: 32px;\n    /* font-weight: 600; */\n    color: #3d3d3d;\n    border: solid 1px #959595;\n    border-radius: 4px;\n    padding: 0 5px;\n    box-sizing: border-box;\n    background-color: ${props => {\n        if (props.errorType == undefined) return '#ececec';\n        else {\n            switch (props.errorType) {\n                case 'required': return '#dbd7b3';\n                case 'length': return '#dbb3b3';\n                case 'value': return '#b3b3db';\n                case 'relation': return '#b3dbb3';\n            }\n        }\n    }};\n    text-align: left;\n    vertical-align: top;\n    user-select: text;\n    /* ${props => !props.isCenter ? css`\n        margin-left: 4px;\n    ` : css``\n    } */\n    ${props => !props.readOnly ? '' : css`\n        color: #020075;\n        /* border: none; */\n        outline: none;\n        background-color: transparent;\n    `}\n    ::placeholder {\n        color: #00000050;\n        font-style: italic;\n    }\n`;\n\nconst _ItemnInput = styled.input<{\n    readOnly?: boolean;\n    width?: number;\n    errorType?: ValidateUtil.ErrorType;\n    marginLeft?: number;\n}>`\n    display: inline-block;\n    height: calc(100% - 4px);\n    width: ${props => props.width}px;\n    margin-top: 2px;\n    margin-left: ${props => props.marginLeft ?? 0}px;\n    font-size: 24px;\n    line-height: 32px;\n    /* font-weight: 600; */\n    color: #3d3d3d;\n    border: solid 1px #959595;\n    border-radius: 4px;\n    padding: 0 5px;\n    box-sizing: border-box;\n    background-color: ${props => {\n        if (props.errorType == undefined) return '#ececec';\n        else {\n            switch (props.errorType) {\n                case 'required': return '#dbd7b3';\n                case 'length': return '#dbb3b3';\n                case 'value': return '#b3b3db';\n                case 'relation': return '#b3dbb3';\n            }\n        }\n    }};\n    text-align: left;\n    vertical-align: top;\n    user-select: text;\n    ${props => !props.readOnly ? '' : css`\n        color: #020075;\n        /* border: none; */\n        outline: none;\n        background-color: transparent;\n    `}\n    ::placeholder {\n        color: #00000050;\n        font-style: italic;\n    }\n`;\n\nconst _ItemCombobox = styled.select<{\n    readOnly?: boolean;\n    width?: number;\n    errorType?: ValidateUtil.ErrorType;\n    marginLeft?: number;\n}>`\n    display: inline-block;\n    height: calc(100% - 4px);\n    width: ${props => props.width}px;\n    margin-top: 2px;\n    margin-left: ${props => props.marginLeft ?? 0}px;\n    font-size: 24px;\n    line-height: 32px;\n    /* font-weight: 600; */\n    color: #3d3d3d;\n    border: solid 1px #959595;\n    border-radius: 4px;\n    padding: 0 5px;\n    box-sizing: border-box;\n    background-color: ${props => {\n        if (props.errorType == undefined) return '#ececec';\n        else {\n            switch (props.errorType) {\n                case 'required': return '#dbd7b3';\n                case 'length': return '#dbb3b3';\n                case 'value': return '#b3b3db';\n                case 'relation': return '#b3dbb3';\n            }\n        }\n    }};\n    text-align: left;\n    vertical-align: top;\n    user-select: text;\n    ${props => !props.readOnly ? '' : css`\n        color: #020075;\n        /* border: none; */\n        outline: none;\n        background-color: transparent;\n        pointer-events: none;\n    `}\n    ::placeholder {\n        color: #00000050;\n        font-style: italic;\n    }\n`;\n\nconst _Option = styled.option<{\n    isDisabled: boolean;\n}>`\n    ${props => !props.isDisabled ? '' : css`\n        color: #0000004b;\n    `}\n`;\n\nconst _Message = styled.div<{\n    isLink?: boolean;\n    isCenter: boolean;\n}>`\n    display: inline-block;\n    height: calc(100% - 4px);\n    margin-top: 2px;\n    font-size: ${Styles.FONT_MIDIUM}px;\n    line-height: 32px;\n    /* font-weight: 600; */\n    color: #002c52;\n    border-radius: 4px;\n    padding: 0 5px;\n    box-sizing: border-box;\n    /* background-color: #d37878; */\n    text-align: left;\n    vertical-align: top;\n    user-select: text;\n    ${props => !props.isCenter ? css`\n        margin-left: 4px;\n    ` : css``\n    }\n    ${props => !props.isLink ? '' : css`\n        color: #0459a3;\n        user-select: none;\n        text-decoration: underline;\n        &:hover {\n            color: #68a4d8;\n        }\n    `}\n`;\n\nconst _ButtonsDiv = styled.div`\n    display: inline-block;\n    width: 100%;\n    height: 40px;\n    /* background-color: #888888; */\n    box-sizing: border-box;\n    text-align: left;\n    white-space: nowrap;\n`;\n\nconst _Button = styled.div<{\n    isEnable: boolean;\n    isCenter: boolean;\n    width?: number;\n}>`\n    ${Styles.CSS_LABEL_MIDIUM}\n    ${props => props.width == undefined ? css`\n        padding: 0 40px;\n    ` : css`\n        width: ${props.width}px;\n    `}\n    /* line-height: 25px; */\n    box-sizing: border-box;\n    /* background-color: #a8a8a8; */\n    background: linear-gradient(to bottom, #cdcdcd, #ebebeb, #cdcdcd);\n    border: 1px solid #747474;\n    color: #515151;\n    border-radius: 4px;\n    ${props => !props.isCenter ? css`\n        margin-left: 4px;\n    ` : css``\n    }\n    margin: 5px 0 0 4px;\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\n    &:hover {\n        /* background-color: #98bfc2; */\n        background: linear-gradient(to bottom, #989898, #b4b4b4, #989898);\n    }\n`;\n\nconst _Switch = styled.div<{\n    isUse: boolean;\n    isEnable: boolean;\n    width?: number;\n    isRelation: boolean;\n}>`\n    ${Styles.CSS_LABEL_MIDIUM}\n    ${props => props.width == undefined ? css`\n        padding: 0 40px;\n    ` : css`\n        width: ${props.width}px;\n    `}\n    /* line-height: 25px; */\n    box-sizing: border-box;\n    background-color: #a8a8a8;\n    color: #515151;\n    border: 1px solid #747474;\n    ${props => !props.isRelation ? css<{ isUse: boolean }>`\n        background-color: ${props => !props.isUse ? '#e7e7e779' : '#e4f67e'};\n    ` : css<{ isUse: boolean }>`\n        background-color: ${props => !props.isUse ? '#ddc1d979' : '#d898b3'};\n        color: ${props => !props.isUse ? '#515151' : '#9c2626'};\n    `}\n    border-radius: 4px;\n    margin: 5px 0 0 4px;\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\n    &:hover {\n        ${props => !props.isRelation ? css<{ isUse: boolean }>`\n            background-color: ${props => !props.isUse ? '#edefb286' : '#b5be7f'};\n        ` : css<{ isUse: boolean }>`\n            background-color: ${props => !props.isUse ? '#d3a1cb79' : '#d898b3'};\n            color: ${props => !props.isUse ? '#515151' : '#9c2626'};\n        `}\n    }\n`;\n\nconst _BorderText = styled.div<{\n}>`\n    ${Styles.CSS_LABEL_SMALL}\n    color: #990000;\n    /* background-color: #0a0a0a40; */\n    font-style: italic;\n    margin: 4px 0 0 8px;\n`;\nconst _BorderPanel = styled.div<{\n    isEnable: boolean;\n}>`\n    display: inline-block;\n    margin: 0 0 0 6px;\n    padding: 4px;\n    width: calc(100% - 12px);\n    background-color: #dcddce;\n    border: 1px solid #000;\n    box-sizing: border-box;\n    border-radius: 4px;\n    text-align: left;\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\n`;\n\nconst _InfoDiv = styled.div<{\n    height: number;\n    color: string;\n}>`\n    margin: 4px 0 0 0;\n    display: inline-block;\n    background-color: #e7e5e561;\n    border: solid 1px #949494;\n    width: 100%;\n    height: ${props => props.height}px;\n    padding: 2px;\n    box-sizing: border-box;\n    text-align: left;\n    font-size: ${Styles.FONT_SMALL}px;\n    color: ${props => props.color};\n    overflow-y: auto;\n`;","import { useEffect, useMemo, useRef, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nnamespace TreeUtil {\n\n    export type ElementNode = {\n        // jsx: JSX.Element;\n        isOpen: boolean;\n        // index: number;\n        depth: number;\n        data: any;\n        children: ElementNode[];\n        parent: null | ElementNode;\n    }\n\n    export type DataNode = {\n        data: any;\n        children: DataNode[];\n    }\n\n    export const createNode = (data: any, parent: ElementNode): ElementNode => {\n        // parent.isOpen = true;\n        return {\n            data, parent, depth: parent.depth + 1,\n            isOpen: false,\n            children: [],\n        };\n    }\n\n    export const getChildIndex = (node: TreeUtil.ElementNode) => {\n        const parentNode = node.parent;\n        if (parentNode != null) {\n            for (let i = 0; i < parentNode.children.length; i++) {\n                if (node == parentNode.children[i]) return i;\n            }\n        }\n        return -1;\n    }\n\n    export const Frame = (props: {\n        rootDataNode: DataNode;\n        clickEvent: (node: ElementNode) => void;\n        getLabelJsx: (node: ElementNode) => JSX.Element;\n        invalidate: any;\n        isDisable?: boolean;\n        focusNode?: ElementNode | null;\n    }) => {\n        const isDisable = props.isDisable ?? false;\n        const focusNode = props.focusNode ?? null;\n\n        const ref = useRef({} as HTMLDivElement);\n\n        /**\n         * データを元に再帰的に以下のツリーを構成する。\n         * @returns ツリー\n         */\n        const buildElementNodeFromData = () => {\n            const build = (depth: number, dataNode: DataNode, parent: null | ElementNode): ElementNode => {\n                const node: ElementNode = {\n                    data: dataNode.data,\n                    depth: depth,\n                    // index: count,\n                    isOpen: false,\n                    children: [],\n                    parent\n                };\n                node.children = (() => {\n                    return dataNode.children.map(child => {\n                        return build(depth + 1, child, node);\n                    });\n                })();\n                return node;\n            }\n            return build(0, props.rootDataNode, null);\n        }\n        const [rootElementNode, setRootElementNode] = useState<ElementNode>(buildElementNodeFromData());\n\n        useEffect(() => {\n            setRootElementNode(buildElementNodeFromData());\n        }, [props.rootDataNode]);\n\n        useEffect(() => {\n            if (focusNode != null && focusNode.parent != null) {\n                focusNode.parent.isOpen = true;\n            }\n        }, [focusNode]);\n\n        const jsxList = useMemo(() => {\n            // console.log(rootElementNode);\n            const list: JSX.Element[] = [];\n            const buildJsxRecords = (element: ElementNode, spaceList: boolean[]) => {\n\n                const getSpaces = () => {\n                    return spaceList.map((space, i) => {\n                        const lines: JSX.Element[] = [];\n                        if (spaceList.length - 1 === i || space) lines.push(space ? <_LineFull key={lines.length} /> : <_LineTop key={lines.length} />);\n                        if (spaceList.length - 1 === i) lines.push(<_LineRight key={lines.length} />);\n                        return <_Space key={i}>{lines}</_Space>;\n                    });\n                }\n\n                const isRelationNode = () => {\n                    let result = false;\n                    let tempNode = focusNode;\n                    // 親判定\n                    while (tempNode != null) {\n                        if (element.parent == null || element == tempNode) {\n                            result = true;\n                            break;\n                        }\n                        tempNode = tempNode.parent;\n                    }\n                    // 兄弟判定\n                    if (result === false && focusNode != null && focusNode.parent != null) {\n                        result = focusNode.parent.children.find(node => node == element) != undefined;\n                    }\n                    return result;\n                }\n                const isCurrent = element.data == focusNode?.data;\n                list.push(\n                    <_Record\n                        key={list.length}\n                        width={ref.current.scrollWidth}\n                        isActive={isCurrent}\n                        isRelation={!isDisable && isRelationNode()}\n                        isDisable={isCurrent && isDisable}\n                    >\n                        {getSpaces()}\n                        {element.children.length === 0 ? <></> : <_Branch\n                            onClick={() => {\n                                element.isOpen = !element.isOpen;\n                                setRootElementNode({ ...rootElementNode });\n                                // alert(element.isOpen);\n                            }}\n                        >{element.isOpen ? '-' : '+'}</_Branch>}\n                        <_Jsx\n                            onClick={() => {\n                                props.clickEvent(element);\n                                setRootElementNode({ ...rootElementNode });\n                            }}\n                            onDoubleClick={() => {\n                                element.isOpen = !element.isOpen;\n                                setRootElementNode({ ...rootElementNode });\n                            }}\n                        >\n                            {props.getLabelJsx(element)}\n                        </_Jsx>\n                    </_Record>\n                );\n                if (element.isOpen) {\n                    element.children.forEach((child, i) => {\n                        buildJsxRecords(child, spaceList.slice().concat(element.children.length - 1 !== i));\n                    });\n                }\n            }\n            buildJsxRecords(rootElementNode, []);\n            // rootJsxNode.forEach((el) => {\n            //     addElement(el, []);\n            // });\n            return list;\n        }, [rootElementNode, props.invalidate, isDisable]);\n\n        return (\n            <_Wrap\n                ref={ref}\n                isDisable={isDisable}>\n                {jsxList}\n            </_Wrap>\n        );\n    }\n}\n\nexport default TreeUtil;\n\nconst _Wrap = styled.div<{\n    isDisable: boolean;\n}>`\n    display: inline-block;\n    position: relative;\n    background-color: #374a54;\n    width: calc(100% - 10px);\n    height: calc(100% - 10px);\n    box-sizing: border-box;\n    border: solid 1px #000;\n    margin: 5px;\n    overflow: auto;\n    ${props => !props.isDisable ? '' : css`\n        pointer-events: none;\n        background-color: #1f3642;\n    `}\n`;\n\nconst _Record = styled.div<{\n    width: number;\n    isActive: boolean;\n    isRelation: boolean;\n    isDisable: boolean;\n}>`\n    display: inline-block;\n    /* position: relative; */\n    ${props => !props.isDisable ? '' : css`\n        background-color: #459cff46;\n    `}\n    opacity: 0.3;\n    ${props => !props.isRelation ? '' : css`\n        background-color: #ffffff28;\n        opacity: 1;\n    `}\n    ${props => !props.isActive ? '' : css`\n        background-color: #b4d9dd83;\n        opacity: 1;\n    `}\n    width: ${props => props.width}px;\n    height: 40px;\n    box-sizing: border-box;\n    white-space: nowrap;\n    /* border: solid 1px #000;\n    margin: 5px; */\n    & *{\n        vertical-align: top;\n    }\n    &:hover {\n        opacity: 1;\n    }\n`;\n\nconst _Space = styled.div`\n    display: inline-block;\n    position: relative;\n    /* background-color: #b6d5be; */\n    width: 40px;\n    height: 100%;\n    box-sizing: border-box;\n    /* border: solid 1px #000; */\n`;\nconst _LineTop = styled.div`\n    display: inline-block;\n    position: relative;\n    background-color: #b60000;\n    width: 4px;\n    height: 22px;\n    box-sizing: border-box;\n    margin: 0 0 0 20px;\n`;\nconst _LineFull = styled.div`\n    display: inline-block;\n    position: relative;\n    background-color: #b60000;\n    width: 4px;\n    height: 100%;\n    box-sizing: border-box;\n    margin: 0 0 0 20px;\n`;\nconst _LineRight = styled.div`\n    display: inline-block;\n    position: relative;\n    background-color: #b60000;\n    width: 16px;\n    height: 4px;\n    box-sizing: border-box;\n    margin: 18px 0 0 0;\n`;\n\nconst _Branch = styled.div`\n    display: inline-block;\n    /* position: relative; */\n    background-color: #d1d1d1;\n    width: 30px;\n    height: calc(100% - 10px);\n    border: solid 1px #000;\n    margin: 5px 0 0 3px;\n    box-sizing: border-box;\n    font-size: 30px;\n    /* font-weight: 600; */\n    color: #6d1717;\n    line-height: 20px;\n    padding-left: 3px;\n`;\nconst _Jsx = styled.div`\n    display: inline-block;\n    position: relative;\n    /* background-color: #ffffff3c; */\n    min-width: 100px;\n    height: 100%;\n    margin: 0 0  0 3px;\n    box-sizing: border-box;\n`;\n","import styled from \"styled-components\";\nimport FormUtil from \"../../utils/form/formUtiil\";\nimport { GlobalContext } from \"../entry/systemEntry\";\nimport { useContext } from \"react\";\n\nnamespace ConfirmDialog {\n\n    export const Component = (props: {\n        message: string;\n        width?: number;\n        height?: number;\n        buttons?: FormUtil.ButtonProps[];\n    }) => {\n\n        const {store,  setStore } = useContext(GlobalContext);\n\n        const width = props.width ?? 600;\n        const height = props.height ?? 150;\n        const buttons = props.buttons ?? [\n            {\n                label: 'OK',\n                callback: () => {\n                    store.system.dialog = null;\n                    setStore({...store});\n                }\n            }\n        ];\n\n        return (\n            <_Frame width={width} height={height}>\n                <_Main><_Inner>\n                    {props.message.split('\\n').map((msg, i) => {\n                        return <FormUtil.Message\n                            key={i}\n                            message={msg}\n                            isCenter\n                        />\n                    })}\n                </_Inner></_Main>\n                <FormUtil.ButtonRecord\n                    isCenter\n                    buttons={buttons} />\n            </_Frame>\n        );\n    }\n}\n\nexport default ConfirmDialog;\n\nconst _Frame = styled.div<{\n    width: number;\n    height: number;\n}>`\n    display: inline-block;\n    position: absolute;\n    z-index: 11;\n    top: calc(50% - ${props => props.height / 2}px);\n    left: calc(50% - ${props => props.width / 2}px);\n    width: ${props => props.width}px;\n    height: ${props => props.height}px;\n    background-color: #e7e7e7e2;\n    border: 1px solid #8f8f8f;\n    border-radius: 4px;\n    box-shadow: 10px 15px 15px #0000004b;\n`;\n\nconst _Main = styled.div<{}>`\n    display: inline-block;\n    width: 100%;\n    height: 110px;\n    display: flex;\n    align-items: center;\n\n`;\n\nconst _Inner = styled.div<{}>`\n    /* text-align: center; */\n    display: inline-block;\n    width: 100%;\n    /* background-color: #bb6868e1; */\n`;","\n/**\n * 入力チェックを行うユーティリティ。\n */\nnamespace ValidateUtil {\n\n    export type ErrorType = 'required' | 'length' | 'value' | 'relation';\n\n    export type Validate = {\n        checker: (value: string) => boolean;\n        errorType: ErrorType;\n        message?: string;\n    }\n\n    /**\n     * 必須チェック\n     * @param str 検証する文字列\n     * @returns 判定結果\n     */\n    export const checkRequired = (str: string) => {\n        return str.length > 0;\n    }\n\n    /**\n     * 文字列の長さチェック\n     * @param str 検証する文字列\n     * @param min 最小値\n     * @param max 最大値\n     * @returns 判定結果\n     */\n    export const checkStringLength = (str: string, min: number, max: number) => {\n        return str.length === 0 || (str.length >= min && str.length <= max);\n    }\n\n    /**\n     * 半角英数時チェック\n     * @param str 検証する文字列\n     * @returns 判定結果\n     */\n    export const checkAsciiChars = (str: string) => {\n        const list = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        return checkIncludesChars(str, list);\n    }\n\n    /**\n     * 指定の文字列で構成されているかチェック\n     * @param str 検証する文字列\n     * @param list 入力を許す対象文字列\n     * @returns 判定結果\n     */\n    export const checkIncludesChars = (str: string, list: string) => {\n        for (let i = 0; i < str.length; i++) {\n            const ch = str.charAt(i);\n            if (list.indexOf(ch) === -1) return false;\n        }\n        return true;\n    }\n\n    /**\n     * 指定の文字列が数値に変換できるかチェック\n     * @param str 検証する文字列\n     * @returns 判定結果\n     */\n    export const checkNumber = (str: string) => {\n        return !isNaN(Number(str));\n    }\n\n    /**\n     * 数値の値の範囲をチェック\n     * @param str 検証する文字列\n     * @param min 下限\n     * @param max 上限\n     * @returns 判定結果\n     */\n    export const checkNumberRange = (str: string, min: number, max: number) => {\n        if (!isNaN(Number(str))) {\n            const num = Number(str);\n            return num >= min && num <= max;\n        }\n        return true;\n    }\n\n    /**\n     * \n     * @param conditions \n     * @returns \n     */\n    export const checkAll = (conditions: boolean[]): boolean => {\n        let result = true;\n        for (let i = 0; i < conditions.length; i++) {\n            if (!conditions[i]) {\n                result = false;\n                break;\n            }\n        }\n        return result;\n    }\n}\nexport default ValidateUtil;\n","import SystemConst from \"./systemConst\";\n\nnamespace CanvasUtil {\n\n    /**\n     * Canvasに任意の描画をし、画像のURLを取得する\n     * @param width 幅\n     * @param height 高さ\n     * @param draw 描画\n     * @returns 画像のURL\n     */\n    export const createURL = (width: number, height: number, draw: (ctx: CanvasRenderingContext2D) => void) => {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n        canvas.width = width;\n        canvas.height = height;\n        draw(ctx);\n        return canvas.toDataURL();\n    }\n\n    export const getLogoURL = () => {\n        return CanvasUtil.createURL(350, 80, (ctx) => {\n            // ctx.fillStyle = '#ffffff';\n            // ctx.fillRect(0, 0, 350, 80);\n\n            ctx.shadowColor = \"#555\";\n            ctx.shadowOffsetX = 2;\n            ctx.shadowOffsetY = 1;\n            ctx.shadowBlur = 5;\n            ctx.font = '55pt Arial';\n            ctx.fillStyle = '#db0000';\n            ctx.fillText('L', 30, 70);\n            const adjust = ctx.measureText('L').width;\n            ctx.fillStyle = '#ffffff';\n            ctx.fillText('iCreSia', 30 + adjust, 70);\n            ctx.save();\n        });\n    }\n\n    export const getAuthTextURL = (text: string) => {\n        const WIDTH = SystemConst.AUTH_TEXT_WIDTH;\n        const SIZE = SystemConst.AUTH_TEXT_WIDTH / 6;\n        return createURL(WIDTH, SystemConst.AUTH_TEXT_HEIGHT, (ctx) => {\n            ctx.rotate(1 * Math.PI / 180);\n            for (let i = 0; i < text.length; i++) {\n                const char = text.charAt(i);\n\n                const fontRand = Math.random() * 60;\n                const alphaRand = Math.random() * 60;\n                ctx.font = `${20 + fontRand}pt Arial`;\n                ctx.fillStyle = \"rgba(\" + [40, 0, 100, 0.05 + 0.01 * alphaRand] + \")\";\n                ctx.fillText(char, i * SIZE, 60);\n            }\n        });\n    }\n}\n\nexport default CanvasUtil;","import VectorUtil from \"./vectorUtil\";\n\nnamespace Particle {\n\n    export type Props = {\n        owner: Instance[];\n        pos: VectorUtil.XY;\n        vec: VectorUtil.Vector;\n        limit: number;\n        drawer: (self: Instance, ctx: CanvasRenderingContext2D) => void;\n        extend: ((self: Instance) => void)[];\n    }\n\n    export class Instance {\n\n        owner: Instance[];\n        pos: VectorUtil.XY;\n        prevPos: VectorUtil.XY;\n        vec: VectorUtil.Vector;\n        frame: number;\n        limit: number;\n        isLive: boolean;\n        drawer: (self: Instance, ctx: CanvasRenderingContext2D) => void;\n        extend: ((self: Instance) => void)[];\n\n        constructor(props: Props) {\n            this.owner = props.owner;\n            this.pos = props.pos;\n            this.prevPos = props.pos;\n            this.vec = props.vec;\n\n            this.frame = 0;\n            this.limit = props.limit;\n            this.isLive = true;\n            this.drawer = props.drawer;\n            this.extend = props.extend;\n        }\n\n        update = () => {\n\n            this.pos.x += this.vec.xy.x;\n            this.pos.y += this.vec.xy.y;\n\n            this.extend.forEach(callback => callback(this));\n\n            if (this.frame === this.limit) {\n                this.isLive = false;\n            }\n            this.frame++;\n        }\n\n        draw = (ctx: CanvasRenderingContext2D) => {\n            this.drawer(this, ctx);\n        }\n    }\n}\n\nexport default Particle;","import Particle from \"./particle\";\n\nnamespace DrawUtil {\n\n    export type Rgba = {\n        r: number;\n        g: number;\n        b: number;\n        a: number;\n    }\n\n    export type ColorStop = {\n        offset: number;\n        color: string;\n    }\n\n    export type DrawerParam = {\n        color: string;\n        radius?: number;\n        disappearStartRate?: number;\n        shrinkStartRate?: number;\n        flashAppearFrame?: number;\n        flashHideFrame?: number;\n    }\n\n    export const createGradDrawer = (param: DrawerParam) => {\n\n        /** 基準となる半径 */\n        const radiusBase = param.radius ?? 30;\n        return (self: Particle.Instance, ctx: CanvasRenderingContext2D) => {\n            if(param.flashAppearFrame != undefined) {\n                const appearFrame = param.flashAppearFrame;\n                const hideFrame = (param.flashHideFrame as number);\n                const unitFrame = appearFrame + hideFrame;\n                if((self.frame % unitFrame) >= appearFrame) return;\n            }\n\n            let radius = radiusBase;\n            if (param.shrinkStartRate != undefined) {\n                const start = Math.floor(self.limit * param.shrinkStartRate);\n                if (self.frame > start) {\n                    const limit = self.limit - start;\n                    const frame = self.frame - start;\n                    const rate = (limit - frame) / limit;\n                    radius *= rate;\n                }\n            }\n\n            const x = self.pos.x;\n            const y = self.pos.y;\n            const g = ctx.createRadialGradient(x, y, 1, x, y, radius);\n\n            const grads: ColorStop[] = [];\n            const rgba = convertRgbaFromColorCode(param.color) ?? { r: 255, g: 255, b: 255, a: 255 };\n            grads.push({ offset: 0, color: convertColorCodeFromRgba({ r: 255, g: 255, b: 255, a: Math.floor(rgba.a * 0.9) }) });\n            grads.push({ offset: 0.2, color: convertColorCodeFromRgba({ ...rgba, a: Math.floor(rgba.a * 0.15) }) });\n            grads.push({ offset: 1, color: convertColorCodeFromRgba({ ...rgba, a: 1 }) });\n\n            grads.forEach(grad => {\n                g.addColorStop(grad.offset, grad.color);\n            });\n\n            ctx.globalAlpha = 1;\n            if (param.disappearStartRate != undefined) {\n                const start = Math.floor(self.limit * param.disappearStartRate);\n                if (self.frame > start) {\n                    const limit = self.limit - start;\n                    const frame = self.frame - start;\n                    ctx.globalAlpha = (limit - frame) / limit;\n                }\n            }\n\n            ctx.fillStyle = g;\n            ctx.beginPath();\n            ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\n            ctx.fill();\n        };\n    }\n\n    export const convertRgbaFromColorCode = (code: string): Rgba | null => {\n        const div = code.split('#');\n        if (div.length !== 2 || div[1].length < 6) return null;\n\n        const value = div[1];\n        const r = Number.parseInt(value.substring(0, 2), 16);\n        const g = Number.parseInt(value.substring(2, 4), 16);\n        const b = Number.parseInt(value.substring(4, 6), 16);\n        let a = 1;\n        if (value.length === 8) {\n            a = Number.parseInt(value.substring(6, 8), 16);\n        }\n        return { r, g, b, a };\n    }\n\n    export const convertColorCodeFromRgba = (rgba: Rgba): string => {\n        const r = ('00' + rgba.r.toString(16)).slice(-2);\n        const g = ('00' + rgba.g.toString(16)).slice(-2);\n        const b = ('00' + rgba.b.toString(16)).slice(-2);\n        const a = ('00' + rgba.a.toString(16)).slice(-2);\n        return `#${r}${g}${b}${a}`;\n    }\n\n    export const toWhite = (color: string, rate: number): string => {\n        return color;\n    }\n}\n\nexport default DrawUtil;","namespace VectorUtil {\n\n    export type XY = {\n        x: number, y: number;\n    }\n\n    export class Vector {\n\n        xy: XY;\n        rad: number;\n        len: number;\n\n        constructor(xy: XY) {\n            this.xy = xy;\n            this.rad = 0;\n            this.len = 0;\n            this.syncFromXY();\n        }\n\n        syncFromXY = () => {\n            this.len = Math.sqrt(this.xy.x * this.xy.x + this.xy.y * this.xy.y);\n            this.rad = Math.atan2(this.xy.y, this.xy.x);\n        }\n\n        syncFromRad = () => {\n            this.xy.x = Math.cos(this.rad) * this.len;\n            this.xy.y = Math.sin(this.rad) * this.len;\n        }\n\n    }\n}\n\nexport default VectorUtil;","\nnamespace ParamUtil {\n    export enum VisualParamType {\n        RADIUS = 'radius',\n        COLOR_R = 'color_r',\n        COLOR_G = 'color_g',\n        COLOR_B = 'color_b',\n        COLOR_A = 'color_a',\n        THICKNESS = 'thickness',\n    }\n    export const VisualParams = Object.values(VisualParamType);\n    export type VisualParam = typeof VisualParams[number];\n\n    export enum BehaviorParamType {\n        LIMIT = 'limit',\n        POS_X = 'pos_x',\n        POS_Y = 'pos_y',\n        VEC_X = 'vec_x',\n        VEC_Y = 'vec_y',\n        VEC_RAD = 'vec_radian',\n        VEC_LEN = 'vec_length',\n    }\n    export const BehaviorParams = Object.values(BehaviorParamType);\n    export type BehaviorParam = typeof BehaviorParams[number];\n\n    export enum SelfParamType {\n        FRAME = 'self_frame',\n        LIMIT = 'self_limit',\n        POS_X = 'self_pos_x',\n        POS_Y = 'self_pos_y',\n        VEC_X = 'self_vec_x',\n        VEC_Y = 'self_vec_y',\n        VEC_RAD = 'self_vec_radian',\n        VEC_LEN = 'self_vec_length',\n    }\n    export const SelfParams = Object.values(SelfParamType);\n    export type SelfParam = typeof SelfParams[number];\n\n    export enum ExtendParamType {\n        LOOP_COUNT = 'loop_count',\n        LOOP_ITERATE = 'loop_iterate',\n        INVOKE = 'invoke',\n    }\n    export const ExtendParams = Object.values(ExtendParamType);\n    export type ExtendParam = typeof ExtendParams[number];\n\n    export enum EffectParamType {\n        DISAPPEAR_START = 'disappear_start',\n        SHRINK_START = 'shrink_start',\n        FLASH_APPEAR_FRAME = 'flash_appear_frame',\n        FLASH_HIDE_FRAME = 'flash_hide_frame',\n    }\n    export const EffectParams = Object.values(EffectParamType);\n    export type EffectParam = typeof EffectParams[number];\n\n    export enum ModulateParamType {\n        DECAY_RATE = 'decay_rate',\n        DECAY_LIMIT = 'decay_limit',\n        GRAVITY_VAL = 'gravity_val',\n        GRAVITY_LIMIT = 'gravity_limit',\n    }\n    export const ModulateParams = Object.values(ModulateParamType);\n    export type ModulateParam = typeof ModulateParams[number];\n\n    export enum ConstantType {\n        SCREEN_WIDTH = 'screen_width',\n        SCREEN_HEIGHT = 'screen_height',\n        PI = 'pi',\n        RADIAN_ROUND = 'radian_round',\n    }\n    export const Constants = Object.values(ConstantType);\n    export type Constant = typeof Constants[number];\n\n}\n\nexport default ParamUtil;","import Particle from \"../../graphic/particle\";\n\nnamespace ModulateBuilder {\n\n    type ModulateParam = {\n        decayRate?: number;\n        decayLimit?: number;\n        gravity?: number;\n        gravityLimit?: number;\n    }\n\n    export const build = (extendList: ((self: Particle.Instance) => void)[], param: ModulateParam) => {\n        \n        // 減衰メソッド\n        if (param.decayRate != undefined && param.decayLimit != undefined) {\n            const decayLimit = param.decayLimit;\n            const decayRate = param.decayRate;\n            extendList.push((self: Particle.Instance) => {\n\n                if (self.vec.len > decayLimit) {\n                    self.vec.len = self.vec.len * decayRate;\n                    self.vec.syncFromRad();\n                }\n            });\n        }\n        // 重力メソッド\n        if (param.gravity != undefined && param.gravityLimit != undefined) {\n            const gravityLimit = param.gravityLimit;\n            const gravity = param.gravity;\n            extendList.push((self: Particle.Instance) => {\n\n                if (self.vec.xy.y < gravityLimit) {\n                    self.vec.xy.y += gravity;\n                    self.vec.syncFromXY();\n                }\n            });\n        }\n    }\n}\n\nexport default ModulateBuilder;","import DrawUtil from \"../../graphic/drawUtil\";\nimport Particle from \"../../graphic/particle\";\nimport VectorUtil from \"../../graphic/vectorUtil\";\nimport LogicUtil from \"../factory/util/logicUtil\";\nimport ParamUtil from \"../factory/util/paramUtil\";\nimport ModulateBuilder from \"./modulateBuilder\";\n\nnamespace PreviewUtil {\n\n    export const SCREEN_WIDTH = 550;\n    export const SCREEN_HEIGHT = 550;\n\n    export type ValueMap = {\n        name: string;\n        value: number;\n    }\n\n    export const buildLogicProps = (\n        owner: Particle.Instance[],\n        origin: LogicUtil.NodeLogicItem,\n        rootData: LogicUtil.WrapElement,\n        sends: ValueMap[]\n    ): Particle.Props => {\n\n        /**\n         * ディペンドするロジック要素を識別名から探して返す。\n         * @param name ロジックの識別名\n         * @returns ロジック要素\n         */\n        const searchDependLogic = (name: string): LogicUtil.NodeLogicItem | null => {\n            const mng = (rootData.data as LogicUtil.NodeRoot).logicMng.data as LogicUtil.NodeLogicManager;\n            const wrap = mng.defs.find(def => (def.data as LogicUtil.NodeLogicItem).name === name);\n            if (wrap == undefined) return null;\n            return wrap.data as LogicUtil.NodeLogicItem;\n        }\n\n        /**\n         * 再帰的にパーティクルを生成する。\n         * @param cur ルートとなるロジック要素\n         * @param sends 親要素から送られてきたフィールド\n         * @returns パーティクルのプロパティ\n         */\n        const createParticleRec = (cur: LogicUtil.NodeLogicItem, sends: ValueMap[]): Particle.Props => {\n            let valueMapList: ValueMap[] = sends.concat(ConstantValueMap);\n\n\n            // フィールドのパラメータを取得\n            const fieldMng = searchElement('field-mng', cur.mngs);\n            if (fieldMng != null) {\n                (fieldMng.data as LogicUtil.NodeFieldManager).fields.forEach(field => {\n                    const paramItem = field.data as LogicUtil.NodeParamItem;\n                    const value = convertFormulaToValue(paramItem, valueMapList);\n                    valueMapList.push({ name: paramItem.name, value });\n                });\n            }\n\n            const visualParams = (searchElement('visual-mng', cur.mngs)?.data as LogicUtil.NodeParamManager).\n                params.map(param => param.data as LogicUtil.NodeParamItem);\n            const behaviorParams = (searchElement('behavior-mng', cur.mngs)?.data as LogicUtil.NodeParamManager).\n                params.map(param => param.data as LogicUtil.NodeParamItem);\n\n            const getVisualParam = (name: string) => {\n                return convertParamsToValue(name, visualParams, valueMapList);\n            }\n            const getBehaviorParam = (name: string) => {\n                return convertParamsToValue(name, behaviorParams, valueMapList);\n            }\n\n            // Behaviorのパラメータを取得\n            const limit = Math.floor(getBehaviorParam(ParamUtil.BehaviorParamType.LIMIT) as number);\n            const pos = {\n                x: getBehaviorParam(ParamUtil.BehaviorParamType.POS_X) as number,\n                y: getBehaviorParam(ParamUtil.BehaviorParamType.POS_Y) as number\n            };\n            const vec = new VectorUtil.Vector({ x: 0, y: 0 });\n            const isVectorMethod = behaviorParams.find(param => param.name === ParamUtil.BehaviorParamType.VEC_X) != undefined;\n            if (isVectorMethod) {\n                vec.xy.x = getBehaviorParam(ParamUtil.BehaviorParamType.VEC_X) as number;\n                vec.xy.y = getBehaviorParam(ParamUtil.BehaviorParamType.VEC_Y) as number;\n                vec.syncFromXY();\n            } else {\n                vec.rad = getBehaviorParam(ParamUtil.BehaviorParamType.VEC_RAD) as number;\n                vec.len = getBehaviorParam(ParamUtil.BehaviorParamType.VEC_LEN) as number;\n                vec.syncFromRad();\n            }\n\n            /**\n             * 追加動作（子要素、エフェクト、モデュレート）\n             */\n            const extendList: ((self: Particle.Instance) => void)[] = [];\n\n            // 子要素を生成する\n            const connectMng = searchElement('inherit-mng', cur.mngs);\n            if (connectMng != null) {\n\n                // パーティクル情報のフィールド追加\n                valueMapList.push({ name: ParamUtil.BehaviorParamType.POS_X, value: pos.x });\n                valueMapList.push({ name: ParamUtil.BehaviorParamType.POS_Y, value: pos.y });\n                valueMapList.push({ name: ParamUtil.BehaviorParamType.VEC_X, value: vec.xy.x });\n                valueMapList.push({ name: ParamUtil.BehaviorParamType.VEC_X, value: vec.xy.y });\n                valueMapList.push({ name: ParamUtil.BehaviorParamType.VEC_RAD, value: vec.rad });\n                valueMapList.push({ name: ParamUtil.BehaviorParamType.VEC_LEN, value: vec.len });\n\n                const connects = (connectMng.data as LogicUtil.NodeConnectManager).inherits;\n\n                connects.forEach(connect => {\n                    const connector = connect.data as LogicUtil.NodeInheritConnector;\n                    if (connector.disable ?? false) return;\n\n                    const logicItem = connector.method === 'create' ?\n                        searchElement('inherit-logic', connector.mngs)?.data as LogicUtil.NodeLogicItem :\n                        searchDependLogic(connector.depend);\n\n                    if (logicItem != null) {\n\n                        extendList.push((self: Particle.Instance) => {\n\n                            const addValueMap = (item: ValueMap) => {\n                                const map = valueMapList.find(map => map.name === item.name);\n                                if (map != undefined) map.value = item.value;\n                                else valueMapList.push(item);\n                            }\n                            addValueMap({ name: ParamUtil.SelfParamType.FRAME, value: self.frame });\n                            addValueMap({ name: ParamUtil.SelfParamType.LIMIT, value: self.limit });\n                            addValueMap({ name: ParamUtil.SelfParamType.POS_X, value: self.pos.x });\n                            addValueMap({ name: ParamUtil.SelfParamType.POS_Y, value: self.pos.y });\n                            addValueMap({ name: ParamUtil.SelfParamType.VEC_X, value: self.vec.xy.x });\n                            addValueMap({ name: ParamUtil.SelfParamType.VEC_Y, value: self.vec.xy.y });\n                            addValueMap({ name: ParamUtil.SelfParamType.VEC_RAD, value: self.vec.rad });\n                            addValueMap({ name: ParamUtil.SelfParamType.VEC_LEN, value: self.vec.len });\n\n                            // Inherit配下のフィールドのパラメータを取得\n                            const itrfldValueMap: ValueMap[] = [];\n                            const fieldMng = searchElement('inhfld-mng', connector.mngs);\n                            if (fieldMng != null) {\n                                (fieldMng.data as LogicUtil.NodeFieldManager).fields.forEach(field => {\n                                    const paramItem = field.data as LogicUtil.NodeParamItem;\n                                    const value = convertFormulaToValue(paramItem, valueMapList);\n                                    itrfldValueMap.push({ name: paramItem.name, value });\n                                });\n                            }\n\n                            let loopCnt = 1;\n                            const extendItem = searchElement('extend-mng', connector.mngs) as LogicUtil.WrapElement;\n                            const extendParams = (extendItem.data as LogicUtil.NodeParamManager).params.map(param => param.data as LogicUtil.NodeParamItem);\n                            const loopCntVal = convertParamsToValue(ParamUtil.ExtendParamType.LOOP_COUNT, extendParams, valueMapList.concat(itrfldValueMap));\n\n                            // 派生条件\n                            const isInvoke = convertParamsToBoolean(ParamUtil.ExtendParamType.INVOKE, extendParams, valueMapList) ?? true;\n\n                            // 条件を満たさない場合、以下の処理（パーティクルの生成）を行わない\n                            if (!isInvoke) return;\n\n                            // イテレータを利用している場合\n                            if (loopCntVal != undefined) {\n                                loopCnt = loopCntVal;\n                            }\n\n                            for (let i = 0; i < loopCnt; i++) {\n\n                                // イテレータ関連のパラメータを追加\n                                const iterateValueMap: ValueMap[] = [\n                                    { name: ParamUtil.ExtendParamType.LOOP_COUNT, value: loopCnt },\n                                    { name: ParamUtil.ExtendParamType.LOOP_ITERATE, value: i }\n                                ];\n\n                                const sendItem = searchElement('send-mng', connector.mngs)?.data as LogicUtil.NodeParamManager;\n                                const params = sendItem.params.map(param => param.data as LogicUtil.NodeParamItem);\n                                const sendValueMapList: ValueMap[] = params.map(item => {\n                                    return { name: item.name, value: convertParamsToValue(item.name, params, valueMapList.concat(itrfldValueMap).concat(iterateValueMap)) ?? 0 }\n                                });\n\n                                const props = createParticleRec(\n                                    logicItem,\n                                    sendValueMapList\n                                );\n                                self.owner.push(new Particle.Instance(props));\n                            }\n                        });\n                    }\n                });\n            }\n\n            // モデュレート（動きの変化）を付与\n            ModulateBuilder.build(extendList, {\n                decayLimit: getBehaviorParam(ParamUtil.ModulateParamType.DECAY_LIMIT),\n                decayRate: getBehaviorParam(ParamUtil.ModulateParamType.DECAY_RATE),\n                gravity: getBehaviorParam(ParamUtil.ModulateParamType.GRAVITY_VAL),\n                gravityLimit: getBehaviorParam(ParamUtil.ModulateParamType.GRAVITY_LIMIT),\n            });\n\n            // Visualのパラメータを取得\n            const radius = getVisualParam(ParamUtil.VisualParamType.RADIUS);\n            const colorR = getVisualParam(ParamUtil.VisualParamType.COLOR_R);\n            const colorG = getVisualParam(ParamUtil.VisualParamType.COLOR_G);\n            const colorB = getVisualParam(ParamUtil.VisualParamType.COLOR_B);\n            const colorA = getVisualParam(ParamUtil.VisualParamType.COLOR_A);\n\n            // エフェクト付与\n            const disappearStart = getVisualParam(ParamUtil.EffectParamType.DISAPPEAR_START);\n            const shrinkStart = getVisualParam(ParamUtil.EffectParamType.SHRINK_START);\n            const flashAppearFrame = getVisualParam(ParamUtil.EffectParamType.FLASH_APPEAR_FRAME);\n            const flashHideFrame = getVisualParam(ParamUtil.EffectParamType.FLASH_HIDE_FRAME);\n\n            let drawer: (self: Particle.Instance, ctx: CanvasRenderingContext2D) => void = () => { };\n            if (radius != undefined) {\n                drawer = DrawUtil.createGradDrawer({\n                    radius: radius,\n                    color: DrawUtil.convertColorCodeFromRgba({\n                        r: colorR as number,\n                        g: colorG as number,\n                        b: colorB as number,\n                        a: colorA as number,\n                    }),\n                    disappearStartRate: disappearStart,\n                    shrinkStartRate: shrinkStart,\n                    flashAppearFrame,\n                    flashHideFrame,\n                });\n            }\n\n            return {\n                owner, pos, vec,\n                limit, drawer,\n                extend: extendList\n            };\n        }\n\n        return createParticleRec(origin, sends);\n    }\n\n    const searchElement = (type: LogicUtil.NodeType, warpList: LogicUtil.WrapElement[]) => {\n        return warpList.find(wrap => wrap.type === type) ?? null;\n    }\n\n    /**\n     * 式を計算して結果の値を返す\n     * @param name プロパティ名\n     * @param params パラメータ要素\n     * @param valueMapList 値変換マップ\n     * @returns 算出された値\n     */\n    export const convertParamsToValue = (name: string, params: LogicUtil.NodeParamItem[], valueMapList: ValueMap[]): number | undefined => {\n        const formula = params.find(param => param.name === name);\n        if (formula == undefined) return undefined;\n        return convertFormulaToValue(formula, valueMapList);\n    }\n\n    const convertFormulaToValue = (formula: LogicUtil.NodeParamItem, valueMapList: ValueMap[]): number => {\n        const values = formula.values.map(v => {\n            if (v.type === 'direct') return Number(v.value);\n            const valueMap = valueMapList.find(m => m.name === v.value);\n            if (valueMap == undefined) return 0;\n            return valueMap.value;\n        });\n\n        let formulaStr = '';\n        let varCnt = 0;\n        formula.formulaItems.forEach((item) => {\n            let str = item;\n            if (item === 'var') {\n                str = values[varCnt].toString();\n                varCnt++;\n            }\n            else if (item === 'rand(') str = 'Math.random()*(';\n            else if (item === 'integer(') str = 'Math.floor(';\n            formulaStr += str;\n        });\n        // console.log(formulaStr);\n        const ret = Function(`return (${formulaStr})`)();\n        // console.log(ret);\n        return ret;\n    }\n\n    export const convertParamsToBoolean = (name: string, params: LogicUtil.NodeParamItem[], valueMapList: ValueMap[]): boolean | undefined => {\n        const formula = params.find(param => param.name === name);\n        if (formula == undefined) return undefined;\n        return convertFormulaToBoolean(formula, valueMapList);\n    }\n\n    const convertFormulaToBoolean = (formula: LogicUtil.NodeParamItem, valueMapList: ValueMap[]): boolean => {\n        const values = formula.values.map(v => {\n            if (v.type === 'direct') return Number(v.value);\n            const valueMap = valueMapList.find(m => m.name === v.value);\n            if (valueMap == undefined) return 0;\n            return valueMap.value;\n        });\n\n        let formulaStr = '';\n        let varCnt = 0;\n        formula.formulaItems.forEach((item, i) => {\n            let str = item;\n            if (item === 'var') {\n                str = values[varCnt].toString();\n                varCnt++;\n            }\n            else if (item === 'rand(') str = 'Math.random()*(';\n            else if (item === 'integer(') str = 'Math.floor(';\n            else if (item === '=') str = '==';\n            formulaStr += str;\n        });\n        // console.log(formulaStr);\n        const ret = Function(`return (${formulaStr})`)();\n        // console.log(formulaStr);\n        return ret;\n    }\n\n    export const ConstantValueMap: ValueMap[] = [\n        { name: ParamUtil.ConstantType.SCREEN_WIDTH, value: SCREEN_WIDTH },\n        { name: ParamUtil.ConstantType.SCREEN_HEIGHT, value: SCREEN_HEIGHT },\n        { name: ParamUtil.ConstantType.PI, value: 3.14159265359 },\n        { name: ParamUtil.ConstantType.RADIAN_ROUND, value: 3.14159265359 * 2 }\n    ];\n}\n\nexport default PreviewUtil;","import styled from \"styled-components\";\nimport { useContext, useEffect, useMemo, useState, useRef } from \"react\";\nimport { GlobalContext } from \"../../entry/systemEntry\";\nimport FormUtil from \"../../../utils/form/formUtiil\";\nimport TreeUtil from \"../../../utils/treeUtil\";\nimport LogicUtil from \"../factory/util/logicUtil\";\nimport { TabbedPane } from \"../../../base/components/tab/tabbedPane\";\nimport ValidateUtil from \"../../../utils/form/validateUtil\";\nimport CanvasUtil from \"../../../utils/canvasUtil\";\nimport Particle from \"../../graphic/particle\";\nimport PreviewUtil from \"./previewUtil\";\nimport Styles from \"../../../base/design/styles\";\n\nnamespace LogicPreviewFrame {\n\n    const width = 600;\n    const height = 660;\n\n    export const Component = (props: {\n        node: TreeUtil.ElementNode;\n        rootData: LogicUtil.WrapElement;\n    }) => {\n        const { store, setStore } = useContext(GlobalContext);\n        const ref = useRef<HTMLDivElement>({} as HTMLDivElement);\n\n        const [formList, setFormList] = useState<FormUtil.CheckableValue[]>([]);\n\n        const [sceens, setSceens] = useState<string[]>([]);\n        const [frameCnt, setFrameCnt] = useState<number>(-1);\n        const [tabIndex, setTabIndex] = useState<number>(0);\n        const [cur, setCur] = useState<number>(0);\n        const [isBuild, setBuild] = useState<boolean>(false);\n        const [isPlay, setPlay] = useState<boolean>(false);\n\n        useEffect(() => {\n            if (isPlay) {\n                if (cur < frameCnt) {\n                    setTimeout(() => {\n                        setCur(cur + 1);\n                    }, 1000 / 30);\n                } else {\n                    setPlay(false);\n                    setCur(0);\n                }\n            }\n        }, [isPlay, cur]);\n\n        const getMapList = (): { key: string, value: string }[] => {\n            const argWrap = (props.node.children[0].data as LogicUtil.WrapElement);\n            if (argWrap.type === 'argument-mng') {\n                return (argWrap.data as LogicUtil.NodeArgumentManager).args.map(arg => {\n                    const argItem = arg.data as LogicUtil.NodeArgumentItem;\n                    let value: string = '';\n                    return { key: argItem.name, value };\n                });\n            }\n            return [];\n        }\n\n        const argMapList = useMemo(() => {\n            return getMapList();\n        }, []);\n\n        useEffect(() => {\n            setFormList(argMapList.map(arg => {\n                return { value: arg.value, errors: [] };\n            }));\n        }, []);\n\n        const formListJsx = useMemo(() => {\n            return formList.map((form, i) => {\n                return (\n                    <FormUtil.FormRecord\n                        key={i}\n                        titleLabel={argMapList.map(arg => arg.key)[i]}\n                        labelWidth={250}\n                        jsx={\n                            <FormUtil.TextField\n                                width={332}\n                                isNumber\n                                checkable={form}\n                                setCheckable={(checkable) => {\n                                    form = { ...checkable };\n                                    setFormList(formList.slice());\n                                }}\n                                validates={[\n                                    {\n                                        checker: (value) => ValidateUtil.checkRequired(value),\n                                        errorType: \"required\"\n                                    }\n                                ]}\n                            />\n                        }\n                    />);\n            });\n        }, [formList]);\n\n\n        const build = () => {\n\n            setBuild(true);\n\n            const sceens: string[] = [];\n\n            const owner: Particle.Instance[] = [];\n\n            let frameCnt = 0;\n            do {\n                if (frameCnt === 0) {\n                    const origin = (props.node.data as LogicUtil.WrapElement).data as LogicUtil.NodeLogicItem;\n                    owner.push(new Particle.Instance(\n                        PreviewUtil.buildLogicProps(owner, origin, props.rootData, formList.map((form, i) => {\n                            return { name: argMapList.map(arg => arg.key)[i], value: Number(form.value) }\n                        }))\n                    ));\n                }\n\n                sceens.push(CanvasUtil.createURL(550, 550, (ctx) => {\n\n                    // パーティクルの描画\n                    owner.forEach(par => {\n                        par.draw(ctx);\n                    });\n\n                    // 経過フレーム、要素数の表示\n                    ctx.globalAlpha = 1;\n                    ctx.font = '16pt Arial';\n                    ctx.fillStyle = '#ffffff';\n                    ctx.fillText(`${frameCnt}`, 6, 24);\n                    ctx.fillStyle = '#ffec5c';\n                    ctx.fillText(`${owner.length}`, 6, 44);\n\n                    ctx.save();\n                }));\n\n                // パーティクルの更新\n                for (let i = owner.length - 1; i >= 0; i--) {\n                    const particle = owner[i];\n\n                    particle.update();\n                }\n\n                // 死滅したパーティクルの削除\n                for (let i = owner.length - 1; i >= 0; i--) {\n                    const particle = owner[i];\n                    if (!particle.isLive) {\n                        owner.splice(i, 1);\n                    }\n                }\n\n                if (frameCnt > 500 || owner.length > 3000) break;\n                frameCnt++;\n            } while (owner.length > 0);\n            setFrameCnt(frameCnt);\n            setSceens(sceens);\n\n            setBuild(false);\n            setTabIndex(1);\n        }\n\n\n        const isInputOK = () => {\n            return formList.find(form => form.errors.length > 0) == undefined;\n        }\n        const buildTabJsx = (\n            <_Wrap>\n                <_FormDiv>\n                    {formListJsx}\n                </_FormDiv>\n                <FormUtil.ButtonRecord\n                    isCenter\n                    buttons={[\n                        {\n                            label: 'Build',\n                            isEnable: isInputOK() && !isBuild,\n                            callback: () => {\n                                build();\n                            }\n                        }\n                    ]}\n                />\n            </_Wrap>\n        );\n\n        const previewTabJsx = (\n            <_Wrap>\n                <_CanvasDiv>\n                    {sceens.length === 0 ? <></> : <_IMG src={sceens[cur]} />}\n                </_CanvasDiv>\n                <_ProgressDiv ref={ref} onClick={(e) => {\n                    if(isPlay) return;\n                    const clickX = e.pageX;\n                    // 要素の位置を取得\n                    const clientRect = ref.current.getBoundingClientRect();\n                    const positionX = clientRect.left + window.pageXOffset;\n\n                    // 要素内におけるクリック位置を計算\n                    const x = clickX - positionX;\n                    const rate = x / clientRect.width;\n                    setCur(Math.floor(frameCnt * rate));\n                }}>\n                    <_ProgressVal rate={100 * cur / (frameCnt - 1)} />\n                </_ProgressDiv>\n                <FormUtil.ButtonRecord\n                    isCenter\n                    buttons={[\n                        {\n                            label: '←',\n                            width: 50,\n                            isEnable: !isPlay && cur > 0,\n                            callback: () => {\n                                setCur(cur - 1);\n                            }\n                        },\n                        {\n                            label: '→',\n                            width: 50,\n                            isEnable: !isPlay && cur < sceens.length - 1,\n                            callback: () => {\n                                setCur(cur + 1);\n                            }\n                        },\n                        {\n                            label: !isPlay ? 'start' : 'Stop',\n                            callback: () => {\n                                setPlay(!isPlay);\n                            }\n                        },\n                        {\n                            label: 'reset',\n                            isEnable: !isPlay,\n                            callback: () => {\n                                setCur(0);\n                            }\n                        },\n                    ]}\n                />\n            </_Wrap>\n        );\n\n        return (\n            <_Frame\n                width={width}\n                height={height}\n                tabIndex={0}\n                onKeyDown={(e) => {\n                    if (tabIndex === 0) {\n                        if (isInputOK() && e.key === ' ') build();\n                    } else {\n                        switch (e.key) {\n                            case 'ArrowLeft': {\n                                if (!isPlay && !isPlay && cur > 0) setCur(cur - 1);\n                            } break;\n                            case 'ArrowRight': {\n                                if (!isPlay && cur < sceens.length - 1) setCur(cur + 1);\n                            } break;\n                            case ' ': {\n                                setPlay(!isPlay);\n                            } break;\n                        }\n                    }\n                    if (!isPlay && e.key === 'Escape') {\n                        store.system.dialog = null;\n                        setStore({ ...store });\n                    }\n                }}\n            >\n                <_Main>\n                    <TabbedPane\n                        tabElements={[\n                            { name: 'Build', enable: true, cont: buildTabJsx },\n                            { name: 'Play', enable: frameCnt !== -1, cont: previewTabJsx }\n                        ]}\n                        activeNo={tabIndex}\n                        selectTabIndex={(index: number) => setTabIndex(index)}\n                    />\n                </_Main>\n                <_CloseButton\n                    isEnable={!isPlay}\n                    onClick={() => {\n                        store.system.dialog = null;\n                        setStore({ ...store });\n                    }}\n                >×</_CloseButton>\n            </_Frame>\n        );\n    }\n}\n\nexport default LogicPreviewFrame;\n\nconst _Frame = styled.div<{\n    width: number;\n    height: number;\n}>`\n    display: inline-block;\n    position: absolute;\n    z-index: 11;\n    top: calc(50% - ${props => props.height / 2}px);\n    left: calc(50% - ${props => props.width / 2}px);\n    width: ${props => props.width}px;\n    height: ${props => props.height}px;\n    background-color: #e7e7e7e2;\n    border: 1px solid #8f8f8f;\n    border-radius: 4px;\n    box-shadow: 10px 15px 15px #0000004b;\n`;\n\nconst _Main = styled.div<{}>`\n    display: inline-block;\n    width: 100%;\n    height: 100%;\n    background-color: #4d5056df;\n`;\nconst _FormDiv = styled.div<{}>`\n    display: inline-block;\n    width: 100%;\n    height: 580px;\n    background-color: #a2c1d5df;\n`;\nconst _CanvasDiv = styled.div<{}>`\n    display: inline-block;\n    width: ${PreviewUtil.SCREEN_WIDTH}px;\n    height: ${PreviewUtil.SCREEN_HEIGHT}px;\n    margin: 5px 0 0 20px;\n    background-color: #020202df;\n    border: solid 1px #fff;\n    box-sizing: border-box;\n`;\n\nconst _Wrap = styled.div<{}>`\n    display: inline-block;\n    width: 100%;\n    height: 100%;\n    background-color: #aed5d8e0;\n`;\n\nconst _ProgressDiv = styled.div<{}>`\n    display: inline-block;\n    width: calc(100% - 8px);\n    height: 20px;\n    margin: 5px 0 0 4px;\n    background-color: #000000;\n    border: solid 1px #fff;\n    box-sizing: border-box;\n`;\nconst _ProgressVal = styled.div<{\n    rate: number;\n}>`\n    display: inline-block;\n    position: relative;\n    width: ${props => props.rate}%;\n    height: 100%;\n    /* background-color: #2fccf3; */\n    background: linear-gradient(to bottom, #37819492, #2fccf3, #37819492);\n`;\n\nconst _IMG = styled.img`\n    display: inline-block;\n    position: relative;\n    width: 100%;\n    height: 100%;\n`;\n\nconst _CloseButton = styled.div<{\n    isEnable: boolean;\n}>`\n    display: inline-block;\n    position: absolute;\n    top: 2px;\n    right: 4px;\n    width: 30px;\n    height: 30px;\n    z-index: 12;\n    background-color: #d5d5d5;\n    border: 1px solid #3d3d3d;\n    border-radius: 4px;\n    font-size: 18px;\n    padding-left: 8px;\n    font-weight: 600;\n    color: #3d3d3d;\n    box-sizing: border-box;\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\n    &:hover {\n        background-color: #ce9595;\n    }\n`;","import { assert } from \"console\";\r\nimport FormUtil from \"../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../utils/treeUtil\";\r\nimport LogicUtil from \"./logicUtil\";\r\nimport ParamUtil from \"./paramUtil\";\r\n\r\n\r\nnamespace LogicElementUtil {\r\n\r\n    export const getInnerNode = (\r\n        node: TreeUtil.ElementNode, ...typeList: LogicUtil.NodeType[]\r\n    ): TreeUtil.ElementNode | null => {\r\n\r\n        let cur: TreeUtil.ElementNode | null = node;\r\n        typeList.some(type => {\r\n            if (cur == null) return 1;\r\n            const target = cur.children.find(child => (child.data as LogicUtil.WrapElement).type === type);\r\n            if (target == undefined) cur = null;\r\n            else cur = target;\r\n        });\r\n        return cur;\r\n    }\r\n\r\n    export const getInnerWrap = (\r\n        wrap: LogicUtil.WrapElement, ...typeList: LogicUtil.NodeType[]\r\n    ): LogicUtil.WrapElement | null => {\r\n\r\n        let cur: LogicUtil.WrapElement | null = wrap;\r\n        typeList.some(type => {\r\n            if (cur == null) return 1;\r\n            const listName = getListParamName(cur.type);\r\n            if (listName == null) cur = null;\r\n            else {\r\n                const list = cur.data[`${listName}`] as LogicUtil.WrapElement[];\r\n                const target = list.find(child => child.type === type);\r\n                if (target == undefined) cur = null;\r\n                else cur = target;\r\n            }\r\n        });\r\n        return cur;\r\n    }\r\n\r\n    export const addChild = (wrapElement: LogicUtil.WrapElement, node: TreeUtil.ElementNode) => {\r\n        return insertChild(wrapElement, node, node.children.length);\r\n    }\r\n    export const insertChild = (wrapElement: LogicUtil.WrapElement, node: TreeUtil.ElementNode, listPos: number) => {\r\n        const wrap = node.data as LogicUtil.WrapElement;\r\n        const listName = getListParamName(wrap.type);\r\n        wrap.data[`${listName}`].splice(listPos, 0, wrapElement);\r\n        const newNode = TreeUtil.createNode(wrapElement, node);\r\n        node.children.splice(listPos, 0, newNode);\r\n        return newNode;\r\n    }\r\n\r\n    export const removeChild = (node: TreeUtil.ElementNode, listPos: number, size: number) => {\r\n        const wrap = node.data as LogicUtil.WrapElement;\r\n        const listName = getListParamName(wrap.type);\r\n        wrap.data[`${listName}`].splice(listPos, size);\r\n        node.children.splice(listPos, size);\r\n    }\r\n\r\n    export const isHead = (node: TreeUtil.ElementNode) => {\r\n        if (node.parent == null) return false;\r\n        const ownerChildren = node.parent.children;\r\n        return ownerChildren[0] == node;\r\n    }\r\n\r\n    export const isTail = (node: TreeUtil.ElementNode) => {\r\n        if (node.parent == null) return false;\r\n        const ownerChildren = node.parent.children;\r\n        return ownerChildren[ownerChildren.length - 1] == node;\r\n    }\r\n\r\n    const swapOrder = (node: TreeUtil.ElementNode, offset: number) => {\r\n        if (node.parent == null) return;\r\n        const ownerChildren = node.parent.children;\r\n        const wrap = node.parent.data as LogicUtil.WrapElement;\r\n        const listName = getListParamName(wrap.type);\r\n        const ownDataChildren = wrap.data[`${listName}`] as LogicUtil.WrapElement[];\r\n\r\n        // 自身の要素番号を取得\r\n        let curNo = -1;\r\n        ownerChildren.some((it, i) => {\r\n            if (it == node) {\r\n                curNo = i;\r\n                return 1;\r\n            }\r\n        });\r\n        if (curNo === -1) return;\r\n\r\n        // ツリーノードの入れ替え\r\n        const swapNode = ownerChildren[curNo];\r\n        ownerChildren[curNo] = ownerChildren[curNo + offset];\r\n        ownerChildren[curNo + offset] = swapNode;\r\n        // データ要素の入れ替え\r\n        const swapData = ownDataChildren[curNo];\r\n        ownDataChildren[curNo] = ownDataChildren[curNo + offset];\r\n        ownDataChildren[curNo + offset] = swapData;\r\n    }\r\n\r\n    export const getSwapButtons = (node: TreeUtil.ElementNode, invalidate: () => void) => {\r\n        return <>\r\n            <FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Swap ↑',\r\n                        isEnable: !LogicElementUtil.isHead(node),\r\n                        callback: () => {\r\n                            swapOrder(node, -1);\r\n                            invalidate();\r\n                        }\r\n                    }\r\n                ]}\r\n            />\r\n            <FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Swap ↓',\r\n                        isEnable: !LogicElementUtil.isTail(node),\r\n                        callback: () => {\r\n                            swapOrder(node, 1);\r\n                            invalidate();\r\n                        }\r\n                    }\r\n                ]}\r\n            />\r\n        </>;\r\n    }\r\n\r\n    export const getListParamName = (type: LogicUtil.NodeType) => {\r\n        switch (type) {\r\n            case 'seed-mng':\r\n            case 'logic-mng': return 'defs';\r\n            case 'seed-item':\r\n            case 'connector':\r\n            case 'inherit-logic':\r\n            case 'interface-mng':\r\n            case 'logic-item': return 'mngs';\r\n            case 'send-mng':\r\n            case 'behavior-mng':\r\n            case 'visual-mng':\r\n            case 'extend-mng':\r\n            case 'seedsend-mng':\r\n            case 'visual-mng': return 'params';\r\n            case 'inherit-mng': return 'inherits';\r\n            case 'seedarg-mng':\r\n            case 'argument-mng': return 'args';\r\n            case 'sample-mng': return 'samples';\r\n            case 'inhfld-mng':\r\n            case 'field-mng': return 'fields';\r\n            case 'thumbnail-mng': return 'items';\r\n        }\r\n        return null;\r\n    }\r\n\r\n    export const getIdentifyParamName = (type: LogicUtil.NodeType) => {\r\n        switch (type) {\r\n            case 'argument-item':\r\n            case 'field-item':\r\n            case 'logic-item': return 'name';\r\n            case 'connector': return 'id';\r\n        }\r\n        return null;\r\n    }\r\n\r\n    export const getNamableProps = (type: LogicUtil.NodeType) => {\r\n        switch (type) {\r\n            case 'connector': return 'id';\r\n            case 'logic-item': return 'name';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    export const syncTreeElementFromWrap = (node: TreeUtil.ElementNode) => {\r\n        const wrap = node.data as LogicUtil.WrapElement;\r\n        const listName = getListParamName(wrap.type);\r\n        if (listName == null) return;\r\n        (wrap.data[listName] as any[]).forEach(childWrap => {\r\n            const newNode = TreeUtil.createNode(childWrap, node);\r\n            node.children.push(newNode);\r\n            syncTreeElementFromWrap(newNode);\r\n        });\r\n    }\r\n\r\n    export const createParamWrap = (type: LogicUtil.NodeType, paramDataList: LogicUtil.NodeParamItem): LogicUtil.WrapElement => {\r\n        return { type: type, data: paramDataList };\r\n    }\r\n    export const createParamWrapList = (type: LogicUtil.NodeType, paramDataList: LogicUtil.NodeParamItem[]): LogicUtil.WrapElement[] => {\r\n        return paramDataList.map(data => {\r\n            return { type: type, data: data };\r\n        });\r\n    }\r\n\r\n    export const createVisualParams = (): LogicUtil.WrapElement[] => {\r\n        const type = ParamUtil.VisualParamType;\r\n        return createParamWrapList('param-item', [\r\n            { name: type.RADIUS, formulaItems: ['var'], values: [{ type: 'direct', value: '20' }] },\r\n            { name: type.COLOR_R, formulaItems: ['var'], values: [{ type: 'direct', value: '255' }] },\r\n            { name: type.COLOR_G, formulaItems: ['var'], values: [{ type: 'direct', value: '255' }] },\r\n            { name: type.COLOR_B, formulaItems: ['var'], values: [{ type: 'direct', value: '255' }] },\r\n            { name: type.COLOR_A, formulaItems: ['var'], values: [{ type: 'direct', value: '255' }] },\r\n        ]);\r\n    }\r\n\r\n    export const createBehaviorParams = (): LogicUtil.WrapElement[] => {\r\n        const list: LogicUtil.NodeParamItem[] = [];\r\n        const type = ParamUtil.BehaviorParamType;\r\n        list.push({\r\n            name: type.LIMIT,\r\n            formulaItems: ['var'], values: [{ type: 'direct', value: '30' }]\r\n        });\r\n        list.push({\r\n            name: type.POS_X,\r\n            formulaItems: ['var'], values: [{ type: 'direct', value: '0' }]\r\n        });\r\n        list.push({\r\n            name: type.POS_Y,\r\n            formulaItems: ['var'], values: [{ type: 'direct', value: '0' }]\r\n        });\r\n        list.push({\r\n            name: type.VEC_X,\r\n            formulaItems: ['var'], values: [{ type: 'direct', value: '0' }]\r\n        });\r\n        list.push({\r\n            name: type.VEC_Y,\r\n            formulaItems: ['var'], values: [{ type: 'direct', value: '0' }]\r\n        });\r\n        return createParamWrapList('param-item', list);\r\n    }\r\n\r\n    export const getDefaultLogicMngs = (): LogicUtil.WrapElement[] => {\r\n        return [\r\n            {\r\n                type: 'visual-mng',\r\n                data: {\r\n                    params: createVisualParams()\r\n                } as LogicUtil.NodeParamManager\r\n            },\r\n            {\r\n                type: 'behavior-mng',\r\n                data: {\r\n                    params: createBehaviorParams()\r\n                } as LogicUtil.NodeParamManager\r\n            }\r\n        ];\r\n    }\r\n\r\n    export const getInitialData = (): LogicUtil.WrapElement => {\r\n        return {\r\n            type: 'root',\r\n            data: {\r\n                seedMng: {\r\n                    type: 'seed-mng',\r\n                    data: {\r\n                        defs: []\r\n                    } as LogicUtil.NodeSeedManager\r\n                } as LogicUtil.WrapElement,\r\n                logicMng: {\r\n                    type: 'logic-mng',\r\n                    data: {\r\n                        defs: []\r\n                    } as LogicUtil.NodeLogicManager\r\n                } as LogicUtil.WrapElement\r\n            } as LogicUtil.NodeRoot\r\n        }\r\n    }\r\n\r\n    export const getSeedNameList = (mng: LogicUtil.NodeSeedManager) => {\r\n        const nameList: string[] = [];\r\n        mng.defs.forEach(seed => {\r\n            if (seed.data != null) {\r\n                nameList.push((seed.data as LogicUtil.NodeSeedItem).name);\r\n            }\r\n        });\r\n        return nameList;\r\n    }\r\n\r\n    /**\r\n     * 同階層の名前パラメータを持つ要素より、既存の名前一覧を取得する。\r\n     * @param node 現在のノード\r\n     * @returns 同階層の既存の名前一覧\r\n     */\r\n    export const getExistNameList = (node: TreeUtil.ElementNode) => {\r\n        const nameList: string[] = [];\r\n        const curWrap = node.data as LogicUtil.WrapElement;\r\n        const nameParam = getIdentifyParamName(curWrap.type);\r\n        const mngWrap = node.parent?.data as LogicUtil.WrapElement;\r\n        const listParam = getListParamName(mngWrap.type);\r\n        if (listParam == null || nameParam == null) return [];\r\n        const list = mngWrap.data[listParam] as LogicUtil.WrapElement[];\r\n        list.forEach(wrap => {\r\n            if (wrap.data != null && curWrap != wrap) {\r\n                nameList.push(wrap.data[nameParam]);\r\n            }\r\n        });\r\n        return nameList;\r\n    }\r\n\r\n    export const getLogicNameList = (mng: LogicUtil.NodeLogicManager) => {\r\n        const nameList: string[] = [];\r\n        mng.defs.forEach(logic => {\r\n            if (logic.data != null) {\r\n                nameList.push((logic.data as LogicUtil.NodeLogicItem).name);\r\n            }\r\n        });\r\n        return nameList;\r\n    }\r\n\r\n    export const getParamNameList = (curLogicOwner: LogicUtil.NodeLogicItem) => {\r\n        const nameList: string[] = [];\r\n\r\n        // システム固有のパラメータ名を取得\r\n        ParamUtil.VisualParams.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n        ParamUtil.BehaviorParams.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n        ParamUtil.SelfParams.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n        ParamUtil.ExtendParams.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n        ParamUtil.EffectParams.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n        ParamUtil.ModulateParams.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n        ParamUtil.Constants.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n\r\n        // 引数のパラメータ名を取得\r\n        const argMng = curLogicOwner.mngs.find(mng => mng.type === 'argument-mng');\r\n        if (argMng != undefined) {\r\n            const args = (argMng.data as LogicUtil.NodeArgumentManager).args;\r\n            args.forEach(arg => {\r\n                if (arg.data != null) {\r\n                    nameList.push((arg.data as LogicUtil.NodeArgumentItem).name);\r\n                }\r\n            });\r\n        }\r\n        // フィールドのパラメータ名を取得\r\n        const fieldMng = curLogicOwner.mngs.find(mng => mng.type === 'field-mng');\r\n        if (fieldMng != undefined) {\r\n            const fields = (fieldMng.data as LogicUtil.NodeFieldManager).fields;\r\n            fields.forEach(field => {\r\n                if (field.data != null) {\r\n                    nameList.push((field.data as LogicUtil.NodeParamItem).name);\r\n                }\r\n            });\r\n        }\r\n        return nameList;\r\n    }\r\n\r\n    /**\r\n     * 子要素の接頭連番をチェックし、重複しない名称を返す。\r\n     * @param prefix 接頭語\r\n     * @param node 基準となるノード\r\n     */\r\n    export const getNumberingOnPrefixName = (prefix: string, node: TreeUtil.ElementNode) => {\r\n        let num = 0;\r\n        // 接頭番号を取得\r\n        while (true) {\r\n            const check = node.children.find(child => {\r\n                const wrap = child.data as LogicUtil.WrapElement;\r\n                if (wrap.data == null) return false;\r\n                console.log(wrap);\r\n                return wrap.data[getNamableProps(wrap.type)] === `${prefix}${num}`;\r\n            });\r\n            if (check != undefined) num++;\r\n            else break;\r\n        }\r\n        return `${prefix}${num}`;\r\n    }\r\n\r\n    /**\r\n     * パラメータの式で参照されている変数を検索し、\r\n     * 任意の処理（callback）を実行する。\r\n     * @param node 現在のノード\r\n     * @param callback 処理\r\n     */\r\n    export const searchVariableReferInFormula = (node: TreeUtil.ElementNode, callback: Function) => {\r\n\r\n        const mngType = (node.parent?.data as LogicUtil.WrapElement).type;\r\n        const getLogicItem = () => {\r\n            switch (mngType) {\r\n                case 'field-mng':\r\n                case 'argument-mng': return node.parent?.parent?.data as LogicUtil.WrapElement;\r\n                case 'inhfld-mng': return node.parent?.parent?.parent?.parent?.data as LogicUtil.WrapElement;\r\n            }\r\n        }\r\n        const logicItem = getLogicItem()?.data as LogicUtil.NodeLogicItem;\r\n        if (mngType === 'argument-mng') {\r\n            const fieldMng = logicItem.mngs.find(mng => mng.type === 'field-mng');\r\n            if (fieldMng != undefined) {\r\n                callback((fieldMng.data as LogicUtil.NodeFieldManager).fields);\r\n            }\r\n        }\r\n        if (mngType !== 'inhfld-mng') {\r\n            const visualMng = logicItem.mngs.find(mng => mng.type === 'visual-mng');\r\n            if (visualMng != undefined) {\r\n                callback((visualMng.data as LogicUtil.NodeParamManager).params);\r\n            }\r\n            const behaviorMng = logicItem.mngs.find(mng => mng.type === 'behavior-mng');\r\n            if (behaviorMng != undefined) {\r\n                callback((behaviorMng.data as LogicUtil.NodeParamManager).params);\r\n            }\r\n        }\r\n        const inhMng = logicItem.mngs.find(mng => mng.type === 'inherit-mng');\r\n        if (inhMng != undefined) {\r\n            (inhMng.data as LogicUtil.NodeConnectManager).inherits.forEach(inh => {\r\n                if (mngType !== 'inhfld-mng') {\r\n                    const inhfld = LogicElementUtil.getInnerWrap(inh, 'inhfld-mng');\r\n                    // Inherit配下のField要素のチェック\r\n                    if (inhfld != null) {\r\n                        callback((inhfld.data as LogicUtil.NodeFieldManager).fields);\r\n                    }\r\n                }\r\n                // Extend要素のチェック\r\n                callback((LogicElementUtil.getInnerWrap(inh, 'extend-mng')?.data as LogicUtil.NodeParamManager).params);\r\n                // Send要素のチェック\r\n                callback((LogicElementUtil.getInnerWrap(inh, 'send-mng')?.data as LogicUtil.NodeParamManager).params);\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default LogicElementUtil;","import { useContext } from \"react\";\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\nimport TreeUtil from \"../../../../../utils/treeUtil\";\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\nimport LogicElementUtil from \"../../util/logicElementUtil\";\nimport LogicUtil from \"../../util/logicUtil\";\n\nconst EditorArgumentMng = () => {\n    const {node, setFocusNode} = useContext(FactoryTreeContext);\n    const wrap = node.data as LogicUtil.WrapElement;\n\n    return (<>\n        <FormUtil.BorderPanel\n            title=\"operation\"\n            innerJsx={<FormUtil.ButtonRecord\n                isCenter\n                buttons={[\n                    {\n                        label: 'Add Argument',\n                        callback: () => {\n                            const newWrap: LogicUtil.WrapElement = {\n                                type: 'argument-item',\n                                data: null\n                            };\n                            const newNode = LogicElementUtil.addChild(newWrap, node);\n                            setFocusNode(newNode);\n                        }\n                    }\n                ]}\n            />}\n        />\n    </>);\n}\n\nexport default EditorArgumentMng;","import { useContext, useEffect } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nnamespace ModifyOperations {\r\n\r\n    export type Props = {\r\n        mappingForm: () => void;\r\n        checkableFields: FormUtil.CheckableValue[];\r\n        isInputOK?: boolean;\r\n        firstRegist: () => void;\r\n        modifyRegist: () => void;\r\n    }\r\n\r\n    export const Component = (props: Props) => {\r\n        const { node, isModify, setModify, removeSelf } = useContext(FactoryTreeContext);\r\n\r\n        const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n        const isComplete = FormUtil.isCompleteCheck(props.checkableFields);\r\n\r\n        return (<>\r\n            <FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Cancel',\r\n                        isEnable: isModify,\r\n                        callback: () => {\r\n                            if (wrap.data == null) {\r\n                                removeSelf();\r\n                            } else {\r\n                                props.mappingForm();\r\n                            }\r\n                            setModify(false);\r\n                        }\r\n                    },\r\n                    {\r\n                        label: !isModify ? 'Modify' : 'Regist',\r\n                        isEnable: !isModify || (props.isInputOK ?? isComplete),\r\n                        callback: () => {\r\n                            if (!isModify) {\r\n                                setModify(true);\r\n                            } else {\r\n                                if (wrap.data == null) {\r\n                                    props.firstRegist();\r\n                                } else {\r\n                                    props.modifyRegist();\r\n                                }\r\n                                setModify(false);\r\n                            }\r\n                        }\r\n                    }\r\n                ]}\r\n            />\r\n        </>);\r\n    }\r\n}\r\n\r\nexport default ModifyOperations;","import { useContext, useEffect, useMemo, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport Styles from \"../../../../../base/design/styles\";\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\nimport TreeUtil from \"../../../../../utils/treeUtil\";\nimport ConfirmDialog from \"../../../../dialog/confirmDialog\";\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\nimport PreviewUtil from \"../../../preview/previewUtil\";\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\nimport LogicElementUtil from \"../../util/logicElementUtil\";\nimport LogicUtil from \"../../util/logicUtil\";\nimport ParamUtil from \"../../util/paramUtil\";\nimport ModifyOperations from \"../common/modifyOperations\";\n\ntype FormProps = {\n    inputType: FormUtil.CheckableValue;\n    value: FormUtil.CheckableValue;\n};\n\nenum Level {\n    FIELD = 0,\n    INITIAL,\n    INHERIT_FIELD,\n    INHERIT_EXTEND,\n    INHERIT_SEND\n}\n\nconst EditorParamItem = () => {\n    const { store, setStore } = useContext(GlobalContext);\n    const { removeSelf, node, invalidate, setModify, isModify } = useContext(FactoryTreeContext);\n    const wrap = node.data as LogicUtil.WrapElement;\n\n    /** 名前 */\n    const [name, setName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    /** 式 */\n    const [formulaItems, setFormulaItems] = useState<string[]>([]);\n    /** 変数の入力フォーム */\n    const [varFormList, setVarFormList] = useState<FormProps[]>([]);\n    // const [formJsxList, setFaormJsxList] = useState<JSX.Element[]>([]);\n\n    const isField = wrap.type === 'field-item';\n    const isCondition = wrap.type === 'condition-item';\n\n    const mappingForm = () => {\n        const param = wrap.data as LogicUtil.NodeParamItem;\n        setName({ value: param.name, errors: [] });\n        setFormulaItems(param.formulaItems.slice());\n        setVarFormList(param.values.map(v => {\n            return {\n                inputType: { value: v.type, errors: [] },\n                value: { value: v.value, errors: [] }\n            }\n        }));\n    };\n\n    useEffect(() => {\n        if (wrap.data == null) {\n            setModify(true);\n        } else {\n            mappingForm();\n        }\n    }, [node]);\n\n    const level: Level = useMemo(() => {\n        const parentType = (node.parent?.data as LogicUtil.WrapElement).type;\n        switch (parentType) {\n            case 'field-mng': return Level.FIELD;\n            case 'visual-mng':\n            case 'behavior-mng': return Level.INITIAL;\n            case 'inhfld-mng': return Level.INHERIT_FIELD;\n            case 'extend-mng': return Level.INHERIT_EXTEND;\n            case 'send-mng': return Level.INHERIT_SEND;\n        }\n        return -1;\n    }, [node]);\n\n    /**\n     * 引数とフィールド変数のキーリストを取得する。\n     */\n    const [argumentList, fieldKeyList] = useMemo(() => {\n        let argumentList: string[] = [];\n        const fieldKeys: string[] = [];\n        const parentType = (node.parent?.data as LogicUtil.WrapElement).type;\n        const targetTypes: LogicUtil.NodeType[] = ['field-mng', 'behavior-mng', 'visual-mng', 'inhfld-mng', 'send-mng', 'extend-mng'];\n        if (targetTypes.includes(parentType)) {\n            const getLogicNode = () => {\n                switch (parentType) {\n                    case 'field-mng':\n                    case 'visual-mng':\n                    case 'behavior-mng': return node.parent?.parent;\n                    case 'inhfld-mng':\n                    case 'send-mng':\n                    case 'extend-mng': return node?.parent?.parent?.parent?.parent;\n                }\n            };\n            const logicItem = (getLogicNode()?.data as LogicUtil.WrapElement).data as LogicUtil.NodeLogicItem;\n            // 引数リストを追加\n            const argMng = logicItem.mngs.find(mng => mng.type === 'argument-mng');\n            if (argMng != undefined) {\n                argumentList = (argMng.data as LogicUtil.NodeArgumentManager).\n                    args.map(arg => (arg.data as LogicUtil.NodeArgumentItem).name);\n            }\n            // 変数リストを追加\n            const fieldMng = logicItem.mngs.find(mng => mng.type === 'field-mng');\n            if (level >= Level.INITIAL && fieldMng != undefined) {\n                (fieldMng.data as LogicUtil.NodeFieldManager).fields.forEach(field => {\n                    const fieldName = (field.data as LogicUtil.NodeParamItem).name;\n                    fieldKeys.push(fieldName);\n                });\n            }\n        } else if (parentType === 'seedsend-mng') {\n            // シード配下のSendは特別に扱う（どのレベルにも属さない）\n            const argMng = LogicElementUtil.getInnerWrap((node.parent?.parent as TreeUtil.ElementNode).data, 'seedarg-mng');\n            if (argMng != null) {\n                argumentList = (argMng.data as LogicUtil.NodeSeedArgManager).\n                    args.map(arg => (arg.data as LogicUtil.NodeSeedArgItem).name);\n            } else throw new Error('argMng is undefined.');\n        }\n        if (level >= Level.INHERIT_FIELD) {\n            fieldKeys.push(ParamUtil.BehaviorParamType.POS_X);\n            fieldKeys.push(ParamUtil.BehaviorParamType.POS_Y);\n            fieldKeys.push(ParamUtil.BehaviorParamType.VEC_X);\n            fieldKeys.push(ParamUtil.BehaviorParamType.VEC_Y);\n            fieldKeys.push(ParamUtil.BehaviorParamType.VEC_RAD);\n            fieldKeys.push(ParamUtil.BehaviorParamType.VEC_LEN);\n            // fieldKeys.push(ParamUtil.VisualParamType.RADIUS);\n            // fieldKeys.push(ParamUtil.VisualParamType.COLOR_R);\n            // fieldKeys.push(ParamUtil.VisualParamType.COLOR_G);\n            // fieldKeys.push(ParamUtil.VisualParamType.COLOR_B);\n            // fieldKeys.push(ParamUtil.VisualParamType.COLOR_A);\n\n            // フィールドキーにInherit配下のFieldパラメータを追加\n            if (level >= Level.INHERIT_EXTEND) {\n                const inhfldNode = LogicElementUtil.getInnerNode(node.parent?.parent as TreeUtil.ElementNode, 'inhfld-mng');\n                if (inhfldNode != null) {\n                    const fieldMng = (inhfldNode.data as LogicUtil.WrapElement).data as LogicUtil.NodeFieldManager;\n                    fieldMng.fields.forEach(field => {\n                        const fieldName = (field.data as LogicUtil.NodeParamItem).name;\n                        fieldKeys.push(fieldName);\n                    });\n                }\n            }\n            // フィールドキーにExtendパラメータを追加\n            if (level === Level.INHERIT_SEND) {\n                const extendWrap = LogicElementUtil.getInnerWrap((node.parent?.parent as TreeUtil.ElementNode).data, 'extend-mng') as LogicUtil.WrapElement;\n                const extendElement = extendWrap.data as LogicUtil.NodeParamManager;\n                //Extendにloop_countのパラメータがある場合\n                if (extendElement.params.find(\n                    param => (param.data as LogicUtil.NodeParamItem).name === ParamUtil.ExtendParamType.LOOP_COUNT\n                ) != undefined) {\n                    fieldKeys.push(ParamUtil.ExtendParamType.LOOP_COUNT);\n                    fieldKeys.push(ParamUtil.ExtendParamType.LOOP_ITERATE);\n                }\n            }\n        }\n        return [argumentList, fieldKeys];\n    }, [node]);\n\n    /** 既存のパラメータ名を取得（重複チェックに使用） */\n    const paramNameList = useMemo(() => {\n        const owner = (node.parent?.parent?.data as LogicUtil.WrapElement).data;\n        return LogicElementUtil.getParamNameList(owner);\n    }, [node]);\n\n    useEffect(() => {\n        let num = 0;\n        formulaItems.forEach((item) => {\n            if (item === 'var') num++;\n        });\n\n        if (varFormList.length < num) {\n            const addNum = num - varFormList.length;\n            for (let i = 0; i < addNum; i++) varFormList.push({\n                inputType: { value: 'direct', errors: [] },\n                value: { value: '', errors: [] }\n            });\n            setVarFormList(varFormList.slice());\n        } else if (varFormList.length > num) {\n            const delNum = varFormList.length - num;\n            for (let i = 0; i < delNum; i++) varFormList.splice(varFormList.length - delNum, delNum);\n            setVarFormList(varFormList.slice());\n        }\n    }, [formulaItems]);\n\n    /** 「(」の数-「)」の数 */\n    const parenthesisBalance = useMemo(() => {\n        let num = 0;\n        formulaItems.forEach((item) => {\n            if (['(', 'rand(', 'integer('].includes(item)) num++;\n            else if (item === ')') num--;\n        });\n        return num;\n    }, [formulaItems]);\n\n    /** 値の入力フォームのJSX */\n    const formJsxList = useMemo(() => {\n        return varFormList.map((v, i) => {\n\n            const getValueForm = (): JSX.Element => {\n                const type = v.inputType.value as LogicUtil.ParamInputType;\n                if (type === 'direct') {\n                    return (\n                        <FormUtil.TextField\n                            marginLeft={2}\n                            checkable={v.value}\n                            isNumber\n                            isReadOnly={!isModify}\n                            width={178}\n                            setCheckable={(checkable) => {\n                                varFormList[i].value = checkable;\n                                setVarFormList(varFormList.slice());\n                            }}\n                            validates={[\n                                {\n                                    checker: (value) => ValidateUtil.checkRequired(value),\n                                    errorType: \"required\"\n                                }\n                            ]}\n                        />\n                    );\n                } else {\n                    let list: string[] = [];\n                    if (type === 'argument') {\n                        list = argumentList;\n                    } else if (type === 'field') {\n                        list = fieldKeyList;\n                    } else if (type === 'self') {\n                        list = ParamUtil.SelfParams;\n                    } else if (type === 'constant') {\n                        list = PreviewUtil.ConstantValueMap.map(item => item.name);\n                    }\n                    return (\n                        <FormUtil.Combobox\n                            marginLeft={2}\n                            checkable={v.value}\n                            width={178}\n                            isReadOnly={!isModify}\n                            setCheckable={(checkable) => {\n                                varFormList[i].value = checkable;\n                                setVarFormList(varFormList.slice());\n                            }}\n                            list={list.map(item => {\n                                return { value: item, labelText: item };\n                            })}\n                            headBlank\n                            validates={[\n                                {\n                                    checker: (value) => ValidateUtil.checkRequired(value),\n                                    errorType: \"required\"\n                                }\n                            ]}\n                        />\n                    );\n                }\n            }\n            return <FormUtil.FormRecord\n                key={i}\n                titleLabel={`var_${i}`}\n                labelWidth={90}\n                marginTop={i === 0 ? 4 : 0}\n                jsx={<>\n                    <FormUtil.Combobox\n                        checkable={v.inputType}\n                        width={142}\n                        isReadOnly={!isModify}\n                        setCheckable={(checkable) => {\n                            varFormList[i].inputType = checkable;\n                            if (isModify) {\n                                varFormList[i].value.value = checkable.value === 'direct' ? '0' : '';\n                            }\n                            setVarFormList(varFormList.slice());\n                        }}\n                        list={LogicUtil.ParamInputTypes.filter(item => {\n                            switch (item) {\n                                case 'direct':\n                                case 'constant':\n                                case 'argument': return true;\n                                case 'field': return level >= Level.INITIAL;\n                                case 'self': return level >= Level.INHERIT_FIELD;\n                            }\n                        }).map(item => {\n                            return { value: item, labelText: item };\n                        })}\n                    />\n                    {getValueForm()}\n                </>}\n            />;\n        });\n    }, [varFormList, isModify]);\n\n    const getFormulaJsx = () => {\n        let num = 0;\n        const jsxList: JSX.Element[] = [];\n        formulaItems.forEach((item) => {\n            if (jsxList.length > 0) {\n                jsxList.push(<span key={jsxList.length}>&nbsp;</span>);\n            }\n            if (item === 'var') {\n                jsxList.push(<_Var key={jsxList.length}>{`$\\{var_${num}}`}</_Var>);\n                num++;\n            } else {\n                jsxList.push(<_Sig key={jsxList.length}>{item}</_Sig>);\n            }\n        });\n        return jsxList;\n    }\n\n    const isLastVar = () => formulaItems.length > 0 && ['var', ')'].includes(formulaItems[formulaItems.length - 1]);\n    const isFormulaOK = parenthesisBalance === 0 && varFormList.length > 0 &&\n        ['var', ')'].includes(formulaItems[formulaItems.length - 1]);\n    const hasFormError = !isFormulaOK || varFormList.find(varForm => varForm.value.errors.length > 0) != undefined;\n\n\n    const getFormulaItem = (label: string, width: number, isEnable: boolean, value: string) => {\n        return {\n            label, width, isEnable,\n            callback: () => {\n                formulaItems.push(value);\n                setFormulaItems(formulaItems.slice());\n            }\n        };\n    }\n\n    return (<>\n        <ModifyOperations.Component\n            mappingForm={mappingForm}\n            checkableFields={[]}\n            firstRegist={() => {\n                const param: LogicUtil.NodeParamItem = {\n                    name: name.value,\n                    formulaItems: formulaItems.slice(),\n                    values: varFormList.map(varForm => {\n                        return {\n                            type: varForm.inputType.value as LogicUtil.ParamInputType,\n                            value: varForm.value.value\n                        }\n                    })\n                };\n                param.name = name.value;\n                wrap.data = param;\n            }}\n            isInputOK={parenthesisBalance === 0 && !hasFormError && name.errors.length === 0}\n            modifyRegist={() => {\n                const data = wrap.data as LogicUtil.NodeParamItem;\n                data.formulaItems = formulaItems.slice();\n                data.values = varFormList.map(varForm => {\n                    return {\n                        type: varForm.inputType.value as LogicUtil.ParamInputType,\n                        value: varForm.value.value\n                    }\n                });\n                if (isField) {\n                    const prevName = data.name;\n                    data.name = name.value;\n                    if (prevName !== name.value) {\n                        syncFieldName(node.parent as TreeUtil.ElementNode, prevName, name.value);\n                    }\n                }\n            }}\n        />\n        <FormUtil.BorderPanel\n            title=\"param\"\n            innerJsx={<>\n                <FormUtil.FormRecord\n                    titleLabel=\"Name\"\n                    jsx={\n                        <FormUtil.TextField\n                            width={200}\n                            isReadOnly={!isModify || !isField}\n                            checkable={name}\n                            setCheckable={setName}\n                            validates={[\n                                {\n                                    checker: (value) => ValidateUtil.checkRequired(value),\n                                    errorType: \"required\"\n                                },\n                                {\n                                    checker: (value) => ValidateUtil.checkStringLength(value, 1, 16),\n                                    errorType: \"length\"\n                                },\n                                {\n                                    checker: (value) => LogicUtil.checkFieldName(value),\n                                    errorType: \"value\"\n                                },\n                                {\n                                    checker: (value) => {\n                                        const list = paramNameList.filter(name => {\n                                            // 自分自身のパラメータ名を除外\n                                            if (wrap.data != null) {\n                                                return (wrap.data as LogicUtil.NodeParamItem).name !== name;\n                                            }\n                                            return true;\n                                        });\n                                        return !list.includes(value);\n                                    },\n                                    errorType: \"relation\"\n                                }\n                            ]}\n                        />\n                    }\n                />\n                <FormUtil.ButtonRecord\n                    isCenter\n                    buttons={[\n                        getFormulaItem('+', 50, isModify && isLastVar(), '+'),\n                        getFormulaItem('-', 50, isModify && isLastVar(), '-'),\n                        getFormulaItem('*', 50, isModify && isLastVar(), '*'),\n                        getFormulaItem('/', 50, isModify && isLastVar(), '/'),\n                        getFormulaItem('%', 50, isModify && isLastVar(), '%'),\n                        getFormulaItem('(', 35, isModify && !isLastVar(), '('),\n                        getFormulaItem(')', 35, isModify && isLastVar() && parenthesisBalance > 0, ')'),\n                        {\n                            label: 'del',\n                            width: 60,\n                            isEnable: isModify && formulaItems.length > 0,\n                            callback: () => {\n                                formulaItems.splice(formulaItems.length - 1, 1);\n                                setFormulaItems(formulaItems.slice());\n                            }\n                        },\n                    ]}\n                />\n                {!isCondition ? <></> : (\n                    <FormUtil.ButtonRecord\n                        isCenter\n                        buttons={[\n                            getFormulaItem('<', 50, isModify && isLastVar(), '<'),\n                            getFormulaItem('<=', 50, isModify && isLastVar(), '<='),\n                            getFormulaItem('=', 50, isModify && isLastVar(), '='),\n                            getFormulaItem('>=', 50, isModify && isLastVar(), '>='),\n                            getFormulaItem('>', 50, isModify && isLastVar(), '>'),\n                            getFormulaItem('&&', 50, isModify && isLastVar(), '&&'),\n                            getFormulaItem('||', 50, isModify && isLastVar(), '||'),\n                        ]}\n                    />\n                )}\n                <FormUtil.ButtonRecord\n                    isCenter\n                    buttons={[\n                        getFormulaItem('var', 70, isModify && !isLastVar(), 'var'),\n                        getFormulaItem('rand', 80, isModify && !isLastVar(), 'rand('),\n                        getFormulaItem('integer', 80, isModify && !isLastVar(), 'integer('),\n                        {\n                            label: 'clear',\n                            isEnable: isModify && formulaItems.length > 0,\n                            width: 90,\n                            callback: () => {\n                                setFormulaItems([]);\n                            }\n                        },\n                    ]}\n                />\n                <_Formula\n                    isInvalid={!isFormulaOK}\n                >{getFormulaJsx()}</_Formula>\n                {formJsxList}\n            </>}\n        />\n        <FormUtil.BorderPanel\n            title=\"operation\"\n            isEnable={!isModify && isField}\n            innerJsx={<>\n                <FormUtil.ButtonRecord\n                    isCenter\n                    buttons={[\n                        {\n                            label: 'Delete',\n                            isEnable: !isModify,\n                            callback: () => {\n                                const param = wrap.data as LogicUtil.NodeArgumentItem;\n                                const refers = getFieldRefers(node, param.name);\n                                if (refers.length === 0) {\n                                    removeSelf();\n                                } else {\n                                    store.system.dialog = <ConfirmDialog.Component\n                                        message={`[${param.name}] is referenced in the formula.\\n${refers}`}\n                                    />;\n                                    setStore({ ...store });\n                                }\n                            }\n                        }\n                    ]}\n                />\n                {/* 並び順入れ替えボタン */}\n                {!isField ? <></> : LogicElementUtil.getSwapButtons(node, invalidate)}\n            </>}\n        />\n    </>);\n}\n\nexport default EditorParamItem;\n\n\n/**\n * ノードの変数を参照している箇所のリストを返す。\n * @param node 変数のノード\n * @param argName 変数名\n * @returns 参照パラメータリスト\n */\nexport const getFieldRefers = (node: TreeUtil.ElementNode, argName: string) => {\n\n    const refers: string[] = [];\n\n    const callback = (list: LogicUtil.WrapElement[]) => {\n        list.forEach(wrap => {\n            const param = wrap.data as LogicUtil.NodeParamItem;\n            param.values.forEach(varItem => {\n                if (varItem.type === 'field' && varItem.value === argName) {\n                    refers.push(param.name);\n                }\n            });\n        });\n    }\n    LogicElementUtil.searchVariableReferInFormula(node, callback);\n\n    return refers;\n}\n\n/**\n * フィールド名の変更に伴い、式で参照している変数を同期する\n * @param mngNode ノード\n */\nexport const syncFieldName = (mngNode: TreeUtil.ElementNode, prevName: string, newName: string) => {\n\n    const syncFormula = (list: LogicUtil.WrapElement[]) => {\n        list.forEach(wrap => {\n            const values = (wrap.data as LogicUtil.NodeParamItem).values;\n            values.forEach(varItem => {\n                if (varItem.type === 'field' && varItem.value === prevName) {\n                    varItem.value = newName;\n                }\n            });\n        });\n    }\n\n    const type = (mngNode.data as LogicUtil.WrapElement).type;\n    if (type === 'field-mng') {\n        const logic = (mngNode.parent?.data as LogicUtil.WrapElement).data as LogicUtil.NodeLogicItem;\n\n        const visualMng = logic.mngs.find(mng => mng.type === 'visual-mng');\n        if (visualMng != undefined) {\n            syncFormula((visualMng.data as LogicUtil.NodeParamManager).params);\n        }\n        const behaviorMng = logic.mngs.find(mng => mng.type === 'behavior-mng');\n        if (behaviorMng != undefined) {\n            syncFormula((behaviorMng.data as LogicUtil.NodeParamManager).params);\n        }\n        const inhMng = logic.mngs.find(mng => mng.type === 'inherit-mng');\n        if (inhMng != undefined) {\n            (inhMng.data as LogicUtil.NodeConnectManager).inherits.forEach(inh => {\n                const inhfld = LogicElementUtil.getInnerWrap(inh, 'inhfld-mng');\n                // Inherit配下のField要素のチェック\n                if (inhfld != null) {\n                    syncFormula((inhfld.data as LogicUtil.NodeFieldManager).fields);\n                }\n                // Extend要素のチェック\n                syncFormula((LogicElementUtil.getInnerWrap(inh, 'extend-mng')?.data as LogicUtil.NodeParamManager).params);\n                // Send要素のチェック\n                syncFormula((LogicElementUtil.getInnerWrap(inh, 'send-mng')?.data as LogicUtil.NodeParamManager).params);\n            });\n        }\n    } else if (type === 'inhfld-mng') {\n        const inheritWrap = mngNode.parent?.data as LogicUtil.WrapElement;\n\n        // Extend要素のチェック\n        syncFormula((LogicElementUtil.getInnerWrap(inheritWrap, 'extend-mng')?.data as LogicUtil.NodeParamManager).params);\n        // Send要素のチェック\n        syncFormula((LogicElementUtil.getInnerWrap(inheritWrap, 'send-mng')?.data as LogicUtil.NodeParamManager).params);\n    }\n}\n\nconst _Formula = styled.div<{\n    isInvalid: boolean;\n}>`\n    display: inline-block;\n    width: calc(100% - 12px);\n    ${Styles.CSS_LABEL_MIDIUM}\n    overflow-wrap: break-word;\n    height: 100px;//calc(100% - 4px);\n    color: #585858;\n    border: solid 1px #7a7a7abf;\n    box-sizing: border-box;\n    background-color: #ffffff8b;\n    ${props => !props.isInvalid ? '' : css`\n        background-color: #ffe8628a;\n    `}\n    border-radius: 4px;\n    text-align: left;\n    padding: 0 0 0 4px;\n    vertical-align: top;\n    margin: 5px 0 0 6px;\n`;\nconst _Var = styled.span`\n    color: #e70013;\n`;\nconst _Sig = styled.span`\n    color: #3333339d;\n`;","import { type } from \"os\";\nimport { useContext, useEffect, useMemo, useState } from \"react\";\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\nimport TreeUtil from \"../../../../../utils/treeUtil\";\nimport ConfirmDialog from \"../../../../dialog/confirmDialog\";\nimport GloballDialog from \"../../../../dialog/globalDialog\";\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\nimport LogicElementUtil from \"../../util/logicElementUtil\";\nimport LogicUtil from \"../../util/logicUtil\";\nimport ModifyOperations from \"../common/modifyOperations\";\n\nconst EditorArgumentItem = () => {\n    const { store, setStore } = useContext(GlobalContext);\n    const { node, removeSelf, setModify, isModify, invalidate } = useContext(FactoryTreeContext);\n    const wrap = node.data as LogicUtil.WrapElement;\n\n    const [name, setName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    const [argType, setArgType] = useState<FormUtil.CheckableValue>({ value: 'number', errors: [] });\n\n    /** 既存のパラメータ名を取得（重複チェックに使用） */\n    const reservedList = useMemo(() => {\n        const owner = (node.parent?.parent?.data as LogicUtil.WrapElement).data;\n        return LogicElementUtil.getParamNameList(owner);\n    }, [node]);\n\n    const mappingForm = () => {\n        const param = wrap.data as LogicUtil.NodeArgumentItem;\n        setName({ ...name, value: param.name });\n        setArgType({ ...argType, value: param.valueType });\n    };\n\n    useEffect(() => {\n        if (wrap.data == null) {\n            setModify(true);\n        } else {\n            mappingForm();\n        }\n    }, [node]);\n\n    return (<>\n        <ModifyOperations.Component\n            mappingForm={mappingForm}\n            checkableFields={[name, argType]}\n            firstRegist={() => {\n                const param: LogicUtil.NodeArgumentItem = {\n                    name: name.value,\n                    valueType: argType.value as LogicUtil.ArgumentType\n                };\n                param.name = name.value;\n                wrap.data = param;\n                syncArgumentAdd(node.parent?.parent as TreeUtil.ElementNode, name.value);\n            }}\n            modifyRegist={() => {\n                const param = wrap.data as LogicUtil.NodeArgumentItem;\n                const prevName = param.name;\n                param.name = name.value;\n                param.valueType = argType.value as LogicUtil.ArgumentType;\n                wrap.data = param;\n\n                if (prevName !== name.value) {\n                    syncArgumentName(node.parent?.parent as TreeUtil.ElementNode, prevName, name.value);\n                }\n            }}\n        />\n        <FormUtil.BorderPanel\n            title=\"param\"\n            innerJsx={<>\n                <FormUtil.FormRecord\n                    titleLabel=\"Name\"\n                    jsx={\n                        <FormUtil.TextField\n                            width={200}\n                            isReadOnly={!isModify}\n                            checkable={name}\n                            setCheckable={setName}\n                            validates={[\n                                {\n                                    checker: (value) => ValidateUtil.checkRequired(value),\n                                    errorType: \"required\"\n                                },\n                                {\n                                    checker: (value) => ValidateUtil.checkStringLength(value, 1, 16),\n                                    errorType: \"length\"\n                                },\n                                {\n                                    checker: (value) => LogicUtil.checkFieldName(value),\n                                    errorType: \"value\"\n                                },\n                                {\n                                    checker: (value) => {\n                                        const list = reservedList.filter(name => {\n                                            // 自分自身のパラメータ名を除外\n                                            if (wrap.data != null) {\n                                                return (wrap.data as LogicUtil.NodeArgumentItem).name !== name;\n                                            }\n                                            return true;\n                                        });\n                                        return !list.includes(value);\n                                    },\n                                    errorType: \"relation\"\n                                }\n                            ]}\n                        />\n                    }\n                />\n                <FormUtil.FormRecord\n                    titleLabel=\"Type\"\n                    jsx={\n                        <FormUtil.Combobox\n                            checkable={argType}\n                            setCheckable={setArgType}\n                            list={LogicUtil.ArgTypes.map(type => {\n                                return { value: type, labelText: type, isDisabled: type === 'color' }\n                            })}\n                            headBlank\n                            width={200}\n                            isReadOnly={!isModify}\n                            validates={\n                                [\n                                    {\n                                        checker: (value) => ValidateUtil.checkRequired(value),\n                                        errorType: \"required\"\n                                    }\n                                ]\n                            }\n                        />\n                    }\n                />\n            </>}\n        />\n        <FormUtil.BorderPanel\n            title=\"operation\"\n            isEnable={!isModify}\n            innerJsx={<>\n                <FormUtil.ButtonRecord\n                    isCenter\n                    buttons={[\n                        {\n                            label: 'Delete',\n                            isEnable: !isModify,\n                            callback: () => {\n                                const param = wrap.data as LogicUtil.NodeArgumentItem;\n                                const refers = getArgumentRefers(node, param.name);\n                                if (refers.length === 0) {\n                                    // DependしているInheritのSendパラメータを同期する\n                                    syncArgumentDel(node.parent?.parent as TreeUtil.ElementNode, name.value);\n                                    removeSelf();\n                                } else {\n                                    store.system.dialog = <ConfirmDialog.Component\n                                        message={`[${param.name}] is referenced in the formula.\\n${refers}`}\n                                    />;\n                                    setStore({ ...store });\n                                }\n                            }\n                        }\n                    ]}\n                />\n                {/* 並び順入れ替えボタン */}\n                {LogicElementUtil.getSwapButtons(node, invalidate)}\n            </>}\n        />\n    </>);\n}\n\nexport default EditorArgumentItem;\n\n/**\n * ノードの引数を参照している箇所のリストを返す。\n * @param node 引数のノード\n * @param argName 引数名\n * @returns 参照パラメータリスト\n */\nexport const getArgumentRefers = (node: TreeUtil.ElementNode, argName: string) => {\n\n    const refers: string[] = [];\n\n    const callback = (list: LogicUtil.WrapElement[]) => {\n        list.forEach(wrap => {\n            const param = wrap.data as LogicUtil.NodeParamItem;\n            param.values.forEach(varItem => {\n                if (varItem.type === 'argument' && varItem.value === argName) {\n                    refers.push(param.name);\n                }\n            });\n        });\n    }\n    LogicElementUtil.searchVariableReferInFormula(node, callback);\n\n    return refers;\n}\n\n/**\n* 引数名の変更に伴い、式で参照している変数を同期する\n* @param logicNode ロジックノード\n*/\nexport const syncArgumentName = (logicNode: TreeUtil.ElementNode, prevName: string, newName: string) => {\n\n    const syncFormula = (list: LogicUtil.WrapElement[]) => {\n        list.forEach(wrap => {\n            const values = (wrap.data as LogicUtil.NodeParamItem).values;\n            values.forEach(varItem => {\n                if (varItem.type === 'argument' && varItem.value === prevName) {\n                    varItem.value = newName;\n                }\n            });\n        });\n    }\n\n    const wrap = logicNode.data as LogicUtil.WrapElement;\n    const logicItem = wrap.data as LogicUtil.NodeLogicItem;\n    const fieldMng = logicItem.mngs.find(mng => mng.type === 'field-mng');\n    if (fieldMng != undefined) {\n        syncFormula((fieldMng.data as LogicUtil.NodeFieldManager).fields);\n    }\n    const visualMng = logicItem.mngs.find(mng => mng.type === 'visual-mng');\n    if (visualMng != undefined) {\n        syncFormula((visualMng.data as LogicUtil.NodeParamManager).params);\n    }\n    const behaviorMng = logicItem.mngs.find(mng => mng.type === 'behavior-mng');\n    if (behaviorMng != undefined) {\n        syncFormula((behaviorMng.data as LogicUtil.NodeParamManager).params);\n    }\n    const inhMng = logicItem.mngs.find(mng => mng.type === 'inherit-mng');\n    if (inhMng != undefined) {\n        (inhMng.data as LogicUtil.NodeConnectManager).inherits.forEach(inh => {\n            const inhfld = LogicElementUtil.getInnerWrap(inh, 'inhfld-mng');\n            // Inherit配下のField要素のチェック\n            if (inhfld != null) {\n                syncFormula((inhfld.data as LogicUtil.NodeFieldManager).fields);\n            }\n            // Extend要素のチェック\n            syncFormula((LogicElementUtil.getInnerWrap(inh, 'extend-mng')?.data as LogicUtil.NodeParamManager).params);\n            // Send要素のチェック\n            syncFormula((LogicElementUtil.getInnerWrap(inh, 'send-mng')?.data as LogicUtil.NodeParamManager).params);\n        });\n    }\n\n    const syncParamName = (params: LogicUtil.WrapElement[]) => {\n        params.forEach(wrap => {\n            const item = wrap.data as LogicUtil.NodeParamItem;\n            if (item.name === prevName) {\n                item.name = newName;\n            }\n        });\n    }\n    if (wrap.type === 'logic-item') {\n\n        // dependしている箇所を全て反映するために再帰で洗う\n        const runRec = (logic: LogicUtil.NodeLogicItem) => {\n            const inhMng = logic.mngs.find(mng => mng.type === 'inherit-mng');\n            if (inhMng == undefined) return;\n            (inhMng.data as LogicUtil.NodeConnectManager).inherits.forEach(inh => {\n                const conn = inh.data as LogicUtil.NodeInheritConnector;\n                if (conn.method === 'create') {\n                    const inhLogic = (LogicElementUtil.getInnerWrap(inh, 'inherit-logic') as LogicUtil.WrapElement).data as LogicUtil.NodeLogicItem;\n                    runRec(inhLogic);\n                } else if (conn.method === 'depend' && conn.depend === logicItem.name) {\n                    const sendMng = (LogicElementUtil.getInnerWrap(inh, 'send-mng') as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager;\n                    syncParamName(sendMng.params);\n                }\n            });\n        }\n        const logicMngNode = logicNode.parent as TreeUtil.ElementNode;\n        logicMngNode.children.forEach(logic => {\n            runRec((logic.data as LogicUtil.WrapElement).data);\n        });\n    } else if (wrap.type === 'inherit-logic') {\n        const connWrap = logicNode.parent?.data as LogicUtil.WrapElement;\n        const sendMng = (LogicElementUtil.getInnerWrap(connWrap, 'send-mng') as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager;\n        syncParamName(sendMng.params);\n    }\n}\n\n/**\n * 引数の更新に伴い、参照先のSend管理に処理（callback）を行う\n * @param logicNode ロジックノード\n * @param callback 処理\n */\nconst syncArgumentCallback = (\n    logicNode: TreeUtil.ElementNode,\n    callback: (sendNode: TreeUtil.ElementNode) => void\n) => {\n\n    const wrap = logicNode.data as LogicUtil.WrapElement;\n    const logicItem = wrap.data as LogicUtil.NodeLogicItem;\n\n    if (wrap.type === 'logic-item') {\n        const runRec = (logicNode: TreeUtil.ElementNode) => {\n            const inhMngNode = logicNode.children.find(child => (child.data as LogicUtil.WrapElement).type === 'inherit-mng');\n            if (inhMngNode == undefined) return;\n            inhMngNode.children.forEach(child => {\n                const conn = (child.data as LogicUtil.WrapElement).data as LogicUtil.NodeInheritConnector;\n                if (conn.method === 'create') {\n                    runRec(LogicElementUtil.getInnerNode(child, 'inherit-logic') as TreeUtil.ElementNode);\n                } else if (conn.method === 'depend' && conn.depend === logicItem.name) {\n                    callback(LogicElementUtil.getInnerNode(child, 'extend-mng') as TreeUtil.ElementNode);\n                }\n            });\n        }\n        const logicMngNode = logicNode.parent as TreeUtil.ElementNode;\n        logicMngNode.children.forEach(child => {\n            runRec(child);\n        });\n    } else if (wrap.type === 'inherit-logic') {\n        const sendNode = LogicElementUtil.getInnerNode(logicNode.parent as TreeUtil.ElementNode, 'send-mng') as TreeUtil.ElementNode;\n        callback(sendNode);\n    }\n}\n\n/**\n * 引数の追加に伴い、Send管理を同期する\n * @param logicNode ロジックノード\n */\nconst syncArgumentAdd = (logicNode: TreeUtil.ElementNode, newArgName: string) => {\n    const addNewParam = (sendNode: TreeUtil.ElementNode) => {\n        const paramWrap = LogicElementUtil.createParamWrap('send-item',\n            { name: newArgName, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] }\n        );\n        const sendMng = (sendNode.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager;\n        sendMng.params.push(paramWrap);\n        sendNode.children.push(TreeUtil.createNode(paramWrap, sendNode));\n    }\n    syncArgumentCallback(logicNode, addNewParam);\n}\n\n/**\n * 引数の削除に伴い、Send管理を同期する\n * @param logicNode ロジックノード\n */\nconst syncArgumentDel = (logicNode: TreeUtil.ElementNode, delArgName: string) => {\n    const delArgParam = (sendNode: TreeUtil.ElementNode) => {\n        const sendMng = (sendNode.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager;\n        let delIndex = -1;\n        sendMng.params.some((param, i) => {\n            if ((param.data as LogicUtil.NodeParamItem).name == delArgName) {\n                delIndex = i;\n                return 1;\n            }\n        });\n        sendMng.params.splice(delIndex, 1);\n        sendNode.children.splice(delIndex, 1);\n    }\n    syncArgumentCallback(logicNode, delArgParam);\n}","import { useContext } from \"react\";\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\nimport TreeUtil from \"../../../../../utils/treeUtil\";\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\nimport LogicUtil from \"../../util/logicUtil\";\n\nconst EditorSeedMng = () => {\n    const {node, setFocusNode} = useContext(FactoryTreeContext);\n    const wrap = node.data as LogicUtil.WrapElement;\n\n    return (<>\n        <FormUtil.BorderPanel\n            title=\"operation\"\n            innerJsx={<FormUtil.ButtonRecord\n                isCenter\n                buttons={[\n                    {\n                        label: 'Add Seed',\n                        callback: () => {\n                            const itemWrap: LogicUtil.WrapElement = {\n                                type: 'seed-item',\n                                data: null\n                            };\n                            (wrap.data as LogicUtil.NodeSeedManager).defs.push(itemWrap);\n                            const newNode = TreeUtil.createNode(itemWrap, node);\n                            node.children.push(newNode);\n                            setFocusNode(newNode);\n                        }\n                    }\n                ]}\n            />}\n        />\n    </>);\n}\n\nexport default EditorSeedMng;","import { useContext } from \"react\";\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\nimport TreeUtil from \"../../../../../utils/treeUtil\";\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\nimport LogicElementUtil from \"../../util/logicElementUtil\";\nimport LogicUtil from \"../../util/logicUtil\";\n\nconst EditorLogicMng = () => {\n    const {node, setFocusNode} = useContext(FactoryTreeContext);\n    const wrap = node.data as LogicUtil.WrapElement;\n\n    return (<>\n        <FormUtil.BorderPanel\n            title=\"operation\"\n            innerJsx={<FormUtil.ButtonRecord\n                isCenter\n                buttons={[\n                    {\n                        label: 'Add Logic',\n                        callback: () => {\n                            const newWrap: LogicUtil.WrapElement = {\n                                type: 'logic-item',\n                                data: null\n                            };\n                            const newNode = LogicElementUtil.addChild(newWrap, node);\n                            setFocusNode(newNode);\n                        }\n                    }\n                ]}\n            />}\n        />\n    </>);\n}\n\nexport default EditorLogicMng;","import { useContext, useEffect, useMemo, useState } from \"react\";\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\nimport TreeUtil from \"../../../../../utils/treeUtil\";\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\nimport LogicUtil from \"../../util/logicUtil\";\nimport ModifyOperations from \"../common/modifyOperations\";\nimport LogicTemplateDialog from \"../../dialog/logicTemplateDialog\";\nimport LogicElementUtil from \"../../util/logicElementUtil\";\nimport ConfirmDialog from \"../../../../dialog/confirmDialog\";\n\nconst EditorLogicItem = () => {\n    const { store, setStore } = useContext(GlobalContext);\n    const { removeSelf, node, setFocusNode, invalidate, setModify, isModify } = useContext(FactoryTreeContext);\n    const wrap = node.data as LogicUtil.WrapElement;\n\n    const [name, setName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n\n    const [isConnect, hasArgNode, hasFieldNode, hasConnectNode] = useMemo(() => {\n        const list = node.children.map(el => {\n            return (el.data as LogicUtil.WrapElement).type;\n        });\n        const parentType = (node.parent?.data as LogicUtil.WrapElement).type;\n        return [\n            parentType === 'connector',\n            list.includes('argument-mng'),\n            list.includes('field-mng'),\n            list.includes('inherit-mng'),\n        ];\n    }, [node]);\n\n    const mappingForm = () => {\n        if (!isConnect) {\n            const param = wrap.data as LogicUtil.NodeLogicItem;\n            setName({ ...name, value: param.name });\n        }\n    };\n\n    /** 既存のロジック名を取得（重複チェックに使用） */\n    const logicNameList = useMemo(() => {\n        // インヘリットの場合、名前を持たないため取得しない\n        if (wrap.type === 'inherit-logic') return [];\n        return LogicElementUtil.getExistNameList(node);\n    }, [node]);\n\n    useEffect(() => {\n        if (wrap.data == null) {\n            setModify(true);\n        } else {\n            mappingForm();\n        }\n    }, [node, isConnect]);\n\n    /**\n     * 追加要素の表示非表示を切り替える\n     */\n    const toggleElement = (hasNode: boolean, listPos: number, wrapElement: LogicUtil.WrapElement) => {\n        if (hasNode) {\n            LogicElementUtil.removeChild(node, listPos, 1);\n            setFocusNode({ ...node });\n            invalidate();\n        } else {\n            LogicElementUtil.insertChild(wrapElement, node, listPos);\n            setFocusNode({ ...node });\n            invalidate();\n        }\n    };\n\n    /**\n     * 引数要素の有無を判定\n     */\n    const hasArgument = () => {\n        const argumentNode = LogicElementUtil.getInnerNode(node, 'argument-mng');\n        if (argumentNode == null) return false;\n        return argumentNode.children.length > 0;\n    }\n    /**\n     * 変数要素の有無を判定\n     */\n    const hasField = () => {\n        const fieldNode = LogicElementUtil.getInnerNode(node, 'field-mng');\n        if (fieldNode == null) return false;\n        return fieldNode.children.length > 0;\n    }\n    /**\n     * 派生要素の有無を判定\n     */\n    const hasInherit = () => {\n        const inheritNode = LogicElementUtil.getInnerNode(node, 'inherit-mng');\n        if (inheritNode == null) return false;\n        return inheritNode.children.length > 0;\n    }\n\n    return (<>\n        {isConnect ? <></> : (<>\n            <ModifyOperations.Component\n                mappingForm={mappingForm}\n                checkableFields={[name]}\n                firstRegist={() => {\n                    const element: LogicUtil.NodeLogicItem = {\n                        name: name.value,\n                        mngs: LogicElementUtil.getDefaultLogicMngs()\n                    };\n                    element.name = name.value;\n                    wrap.data = element;\n\n                    element.mngs.forEach(mng => {\n                        const newNode = TreeUtil.createNode(mng, node);\n                        const data = (newNode.data as LogicUtil.WrapElement).data;\n                        (data as LogicUtil.NodeParamManager).params.forEach(param => {\n                            newNode.children.push(TreeUtil.createNode(param, newNode));\n                        });\n                        node.children.push(newNode);\n                    });\n                    invalidate();\n                    setStore({ ...store });\n                }}\n                modifyRegist={() => {\n                    const param = wrap.data as LogicUtil.NodeLogicItem;\n                    const prevName = param.name;\n                    param.name = name.value;\n                    wrap.data = param;\n                    // 名前が変わった場合、参照箇所も修正する\n                    if (prevName !== param.name) {\n                        syncLogicName(node, prevName, param.name);\n                    }\n                }}\n            />\n            <FormUtil.BorderPanel\n                title=\"param\"\n                innerJsx={<>\n                    <FormUtil.FormRecord\n                        titleLabel=\"Name\"\n                        jsx={\n                            <FormUtil.TextField\n                                width={200}\n                                isReadOnly={!isModify}\n                                checkable={name}\n                                setCheckable={setName}\n                                validates={[\n                                    {\n                                        checker: (value) => ValidateUtil.checkRequired(value),\n                                        errorType: \"required\"\n                                    },\n                                    {\n                                        checker: (value) => ValidateUtil.checkStringLength(value, 1, 16),\n                                        errorType: \"length\"\n                                    },\n                                    {\n                                        checker: (value) => LogicUtil.checkFieldName(value),\n                                        errorType: \"value\"\n                                    },\n                                    {\n                                        checker: (value) => !logicNameList.includes(value),\n                                        errorType: \"relation\"\n                                    }\n                                ]}\n                            />\n                        }\n                    />\n                </>}\n            />\n        </>)}\n        <FormUtil.BorderPanel\n            title=\"element\"\n            isEnable={!isModify}\n            innerJsx={<>\n                <FormUtil.Record\n                    textAlign=\"center\"\n                    jsx={<FormUtil.Switch\n                        label={'Argument'}\n                        width={300}\n                        isUse={hasArgNode}\n                        isEnable={!hasArgument()}\n                        callback={() => {\n                            let listPos = 0;\n                            toggleElement(\n                                hasArgNode,\n                                listPos,\n                                {\n                                    type: 'argument-mng',\n                                    data: {\n                                        args: []\n                                    } as LogicUtil.NodeArgumentManager\n                                }\n                            );\n                        }}\n                    />}\n                />\n                <FormUtil.Record\n                    textAlign=\"center\"\n                    isEnable={true}\n                    jsx={<FormUtil.Switch\n                        label={'Field'}\n                        width={300}\n                        isUse={hasFieldNode}\n                        isEnable={!hasField()}\n                        callback={() => {\n                            let listPos = 0;\n                            if (hasArgNode) listPos++;\n                            toggleElement(\n                                hasFieldNode,\n                                listPos,\n                                {\n                                    type: 'field-mng',\n                                    data: {\n                                        fields: []\n                                    } as LogicUtil.NodeFieldManager\n                                }\n                            );\n                        }}\n                    />}\n                />\n                <FormUtil.Record\n                    textAlign=\"center\"\n                    jsx={\n                        <FormUtil.Switch\n                            label={'Inherit'}\n                            width={300}\n                            isUse={hasConnectNode}\n                            isEnable={!hasInherit()}\n                            callback={() => {\n                                let listPos = 2;\n                                if (hasArgNode) listPos++;\n                                if (hasFieldNode) listPos++;\n                                toggleElement(\n                                    hasConnectNode,\n                                    listPos,\n                                    {\n                                        type: 'inherit-mng',\n                                        data: {\n                                            inherits: []\n                                        } as LogicUtil.NodeConnectManager\n                                    }\n                                );\n                            }}\n                        />\n                    }\n                />\n            </>}\n        />\n        {isConnect ? <></> : (\n            <FormUtil.BorderPanel\n                title=\"operation\"\n                isEnable={!isModify}\n                innerJsx={<>\n                    <FormUtil.ButtonRecord\n                        isCenter\n                        buttons={[\n                            {\n                                label: 'Clone',\n                                // isEnable: !isModify,\n                                isEnable: false,\n                                callback: () => {\n                                    store.system.dialog = <ConfirmDialog.Component\n                                        message=\"Clone this logic.\"\n                                        buttons={[\n                                            {\n                                                label: 'Cancel',\n                                                callback: () => {\n                                                    store.system.dialog = null;\n                                                    setStore({ ...store });\n                                                }\n                                            },\n                                            {\n                                                label: 'Enter',\n                                                callback: () => {\n                                                    let rootNode = node;\n                                                    while (rootNode.parent != null) rootNode = rootNode.parent;\n                                                    const inheritNode = node.children.find(el => (el.data as LogicUtil.WrapElement).type === 'inherit-logic');\n                                                    const logicMngNode = rootNode.children.find(el => (el.data as LogicUtil.WrapElement).type === 'logic-mng');\n                                                    if (logicMngNode == undefined || inheritNode == undefined) return;\n                                                    const inherit = (inheritNode.data as LogicUtil.WrapElement).data;\n                                                    const clone = JSON.parse(JSON.stringify((inherit))) as LogicUtil.NodeInheritItem;\n                                                    // ロジック名（自動命名）を取得\n                                                    const defaultName = LogicElementUtil.getNumberingOnPrefixName('clone_inherit_', logicMngNode);\n                                                    const logicItem: LogicUtil.NodeLogicItem = {\n                                                        ...clone,\n                                                        name: defaultName\n                                                    };\n                                                    const newWrap: LogicUtil.WrapElement = {\n                                                        type: 'logic-item',\n                                                        data: logicItem\n                                                    };\n\n                                                    // ロジックマネージャに追加\n                                                    const newNode = LogicElementUtil.addChild(newWrap, logicMngNode);\n                                                    // 子要素の展開\n                                                    newNode.children = LogicUtil.getChildrenElementNode(newNode);\n\n                                                    // 自身（コネクタ）からインヘリット要素を削除\n                                                    LogicElementUtil.removeChild(node, 2, 1);\n\n                                                    const param = wrap.data as LogicUtil.NodeInheritConnector;\n                                                    param.method = 'depend';\n                                                    param.depend = logicItem.name;\n                                                    mappingForm();\n\n                                                    store.system.dialog = null;\n                                                    setStore({ ...store });\n                                                    invalidate();\n                                                }\n                                            }\n                                        ]}\n                                    />;\n                                    setStore({ ...store });\n                                }\n                            }\n                        ]}\n                    />\n                    <FormUtil.ButtonRecord\n                        isCenter\n                        buttons={[\n                            {\n                                label: 'Delete',\n                                callback: () => {\n                                    const param = wrap.data as LogicUtil.NodeArgumentItem;\n                                    const refers = getLocgicRefers(node, param.name);\n                                    if (refers.length === 0) {\n                                        removeSelf();\n                                    } else {\n                                        store.system.dialog = <ConfirmDialog.Component\n                                            message={`[${param.name}] is referenced in the Inherit.\\n${refers}`}\n                                        />;\n                                        setStore({ ...store });\n                                    }\n                                }\n                            }\n                        ]}\n                    />\n                    {/* 並び順入れ替えボタン */}\n                    {LogicElementUtil.getSwapButtons(node, invalidate)}\n                </>}\n            />\n        )}\n    </>);\n}\n\nexport default EditorLogicItem;\n\n/**\n * ロジックを参照しているInheritのリストを返す。\n * @param node 現在のノード\n * @param logicName ロジック名\n * @returns 参照Inheritリスト\n */\nexport const getLocgicRefers = (node: TreeUtil.ElementNode, logicName: string) => {\n\n    const refers: string[] = [];\n    const callback = (conn: LogicUtil.NodeInheritConnector) => {\n        refers.push(conn.id);\n    }\n    searchLogicReferInherit(node, logicName, callback);\n    return refers;\n}\n\n/**\n * ロジック名の変更に伴い、参照しているインヘリットを同期する\n * @param node ロジックノード\n */\nconst syncLogicName = (node: TreeUtil.ElementNode, prevName: string, newName: string) => {\n    const callback = (conn: LogicUtil.NodeInheritConnector) => {\n        conn.depend = newName;\n    }\n    searchLogicReferInherit(node, prevName, callback);\n}\n\nconst searchLogicReferInherit = (\n    node: TreeUtil.ElementNode,\n    logicName: string,\n    callback: (conn: LogicUtil.NodeInheritConnector) => void\n) => {\n    const logicMngNode = node.parent as TreeUtil.ElementNode\n    const runRec = (logic: LogicUtil.NodeLogicItem) => {\n        const inhMng = logic.mngs.find(mng => mng.type === 'inherit-mng');\n        if (inhMng == undefined) return;\n        (inhMng.data as LogicUtil.NodeConnectManager).inherits.forEach(inh => {\n            const conn = inh.data as LogicUtil.NodeInheritConnector;\n            if (conn.method === 'create') {\n                const inhLogic = LogicElementUtil.getInnerWrap(inh, 'inherit-logic');\n                runRec(inhLogic?.data);\n            } else {\n                if (conn.depend === logicName) {\n                    callback(conn);\n                }\n            }\n        });\n    }\n    logicMngNode.children.forEach(logic => {\n        runRec((logic.data as LogicUtil.WrapElement).data);\n    });\n}","import { useContext, useEffect, useMemo, useState } from \"react\";\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\nimport TreeUtil from \"../../../../../utils/treeUtil\";\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\nimport LogicElementUtil from \"../../util/logicElementUtil\";\nimport LogicUtil from \"../../util/logicUtil\";\nimport ParamUtil from \"../../util/paramUtil\";\n\nconst EditorBehiviorMng = () => {\n    const { node, setFocusNode, invalidate, setModify, isModify } = useContext(FactoryTreeContext);\n    const mng = (node.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager;\n\n    const [isVector, hasDecayParam, hasGravityParam] = useMemo(() => {\n        const list = node.children.map(el => {\n            return ((el.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamItem).name;\n        });\n        return [\n            list.includes(ParamUtil.BehaviorParamType.VEC_X),\n            list.includes(ParamUtil.ModulateParamType.DECAY_RATE),\n            list.includes(ParamUtil.ModulateParamType.GRAVITY_VAL)\n        ]\n    }, [node]);\n\n    const exchangeElements = (flag: boolean, listPos: number,\n        trueParamElements: LogicUtil.NodeParamItem[],\n        falseParamElements: LogicUtil.NodeParamItem[]\n    ) => {\n        const size = (flag ? trueParamElements : falseParamElements).length;\n        LogicElementUtil.removeChild(node, listPos, size);\n\n        (flag ? trueParamElements : falseParamElements).forEach((data, i) => {\n            const wrap: LogicUtil.WrapElement = {\n                type: 'param-item',\n                data\n            };\n            LogicElementUtil.insertChild(wrap, node, listPos + i);\n        });\n        setFocusNode({ ...node });\n        invalidate();\n    };\n\n    const exchangeVectorMethod = () => {\n        exchangeElements(!isVector, 3,\n            [\n                { name: ParamUtil.BehaviorParamType.VEC_X, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] },\n                { name: ParamUtil.BehaviorParamType.VEC_Y, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] },\n            ],\n            [\n                { name: ParamUtil.BehaviorParamType.VEC_RAD, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] },\n                { name: ParamUtil.BehaviorParamType.VEC_LEN, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] },\n            ]\n        )\n    }\n\n    /**\n     * 追加要素の表示非表示を切り替える\n     */\n    const toggleElements = (hasNode: boolean, listPos: number, paramElements: LogicUtil.NodeParamItem[]) => {\n        const size = paramElements.length;\n        if (hasNode) {\n            mng.params.splice(listPos, size);\n            node.children.splice(listPos, size);\n            setFocusNode({ ...node });\n            invalidate();\n        } else {\n            paramElements.forEach((data, i) => {\n                const wrap: LogicUtil.WrapElement = {\n                    type: 'param-item',\n                    data\n                };\n                mng.params.splice(listPos + i, 0, wrap);\n                const newNode = TreeUtil.createNode(wrap, node);\n                node.children.splice(listPos + i, 0, newNode);\n            });\n            setFocusNode({ ...node });\n            invalidate();\n        }\n    };\n\n    return (<>\n        <FormUtil.BorderPanel\n            title=\"method\"\n            isEnable={!isModify}\n            innerJsx={<>\n                <FormUtil.Record\n                    textAlign=\"center\"\n                    jsx={\n                        <FormUtil.Switch\n                            label={'Vector method'}\n                            width={300}\n                            isRelation\n                            isUse={isVector}\n                            callback={exchangeVectorMethod}\n                        />\n                    }\n                />\n                <FormUtil.Record\n                    textAlign=\"center\"\n                    jsx={\n                        <FormUtil.Switch\n                            label={'Direction method'}\n                            width={300}\n                            isRelation\n                            isUse={!isVector}\n                            callback={exchangeVectorMethod}\n                        />\n                    }\n                />\n            </>}\n        />\n        <FormUtil.BorderPanel\n            title=\"modulate\"\n            isEnable={!isModify}\n            innerJsx={<>\n                <FormUtil.Record\n                    textAlign=\"center\"\n                    jsx={\n                        <FormUtil.Switch\n                            label={'Decay'}\n                            width={300}\n                            isUse={hasDecayParam}\n                            callback={() => {\n                                toggleElements(hasDecayParam, 5, [\n                                    {\n                                        name: ParamUtil.ModulateParamType.DECAY_RATE,\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '0.9' }]\n                                    },\n                                    {\n                                        name: ParamUtil.ModulateParamType.DECAY_LIMIT,\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '1' }]\n                                    },\n                                ]);\n                            }}\n                        />\n                    }\n                />\n                <FormUtil.Record\n                    textAlign=\"center\"\n                    jsx={\n                        <FormUtil.Switch\n                            label={'Gravity'}\n                            width={300}\n                            isUse={hasGravityParam}\n                            callback={() => {\n                                toggleElements(hasGravityParam, !hasDecayParam ? 5 : 7, [\n                                    {\n                                        name: ParamUtil.ModulateParamType.GRAVITY_VAL,\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '0.2' }]\n                                    },\n                                    {\n                                        name: ParamUtil.ModulateParamType.GRAVITY_LIMIT,\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '10' }]\n                                    },\n                                ]);\n                            }}\n                        />\n                    }\n                />\n            </>}\n        />\n    </>);\n}\n\nexport default EditorBehiviorMng;","import { useContext, useEffect, useMemo, useState } from \"react\";\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\nimport LogicElementUtil from \"../../util/logicElementUtil\";\nimport LogicUtil from \"../../util/logicUtil\";\nimport ParamUtil from \"../../util/paramUtil\";\nimport ModifyOperations from \"../common/modifyOperations\";\n\ntype Medhod = 'blank' | 'particle' | 'snake'\n\nconst EditorVisualMng = () => {\n    const { node, setFocusNode, invalidate, setModify, isModify } = useContext(FactoryTreeContext);\n    const mng = (node.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager;\n\n    const [drawMethod, hasDisappearParam, hasShrinkParam, hasFlashParam] = useMemo(() => {\n        const list = node.children.map(el => {\n            return ((el.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamItem).name;\n        });\n        let drawMethod: Medhod = 'blank';\n        if(list.length > 0) {\n            drawMethod = list.includes(ParamUtil.VisualParamType.THICKNESS) ? 'snake' : 'particle';\n        }\n        return [\n            drawMethod,\n            list.includes(ParamUtil.EffectParamType.DISAPPEAR_START),\n            list.includes(ParamUtil.EffectParamType.SHRINK_START),\n            list.includes(ParamUtil.EffectParamType.FLASH_APPEAR_FRAME)\n        ]\n    }, [node]);\n\n    /**\n     * 追加要素の表示非表示を切り替える\n     */\n    const toggleElements = (hasNode: boolean, listPos: number, paramElements: LogicUtil.NodeParamItem[]) => {\n        const size = paramElements.length;\n        if (hasNode) {\n            LogicElementUtil.removeChild(node, listPos, size);\n            setFocusNode({ ...node });\n            invalidate();\n        } else {\n            paramElements.forEach((data, i) => {\n                const wrap: LogicUtil.WrapElement = {\n                    type: 'param-item',\n                    data\n                };\n                LogicElementUtil.insertChild(wrap, node, listPos + i);\n            });\n            setFocusNode({ ...node });\n            invalidate();\n        }\n    };\n\n    const addElements = (paramElements: LogicUtil.NodeParamItem[]) => {\n        const size = paramElements.length;\n        paramElements.forEach((data, i) => {\n            const wrap: LogicUtil.WrapElement = {\n                type: 'param-item',\n                data\n            };\n            LogicElementUtil.insertChild(wrap, node, i);\n        });\n        setFocusNode({ ...node });\n        invalidate();\n    };\n    const removeElements = (elementNameList: string[]) => {\n        const mng = (node.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager;\n        elementNameList.forEach((name) => {\n            mng.params.forEach((param, i) => {\n                if((param.data as LogicUtil.NodeParamItem).name === name) {\n                    LogicElementUtil.removeChild(node, i, 1);\n                }\n            });\n        });\n        setFocusNode({ ...node });\n        invalidate();\n    };\n\n    return (<>\n        <FormUtil.BorderPanel\n            title=\"method\"\n            isEnable={!isModify}\n            innerJsx={<>\n                <FormUtil.Record\n                    textAlign=\"center\"\n                    isEnable={!(hasShrinkParam || hasDisappearParam || hasFlashParam)}\n                    jsx={\n                        <FormUtil.Switch\n                            label={'None'}\n                            width={300}\n                            isRelation\n                            isUse={drawMethod === 'blank'}\n                            callback={() => {\n                                mng.params.length = 0;\n                                node.children.length = 0;\n                                setFocusNode({ ...node });\n                                invalidate();\n                            }}\n                        />\n                    }\n                />\n                {/* <FormUtil.Record\n                    textAlign=\"center\"\n                    jsx={\n                        <FormUtil.Switch\n                            label={'Snake Method'}\n                            width={300}\n                            isRelation\n                            isUse={drawMethod === 'snake'}\n                            callback={() => {\n                                removeElements([\n                                    ParamUtil.VisualParamType.RADIUS\n                                ]);\n                                addElements([\n                                    {\n                                        name: ParamUtil.VisualParamType.THICKNESS,\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '10' }]\n                                    },\n                                    {\n                                        name: ParamUtil.VisualParamType.COLOR_R,\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\n                                    },\n                                    {\n                                        name: ParamUtil.VisualParamType.COLOR_G,\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\n                                    },\n                                    {\n                                        name: ParamUtil.VisualParamType.COLOR_B,\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\n                                    },\n                                    {\n                                        name: ParamUtil.VisualParamType.COLOR_A,\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\n                                    },\n                                ]);\n                            }}\n                        />\n                    }\n                /> */}\n                <FormUtil.Record\n                    textAlign=\"center\"\n                    jsx={\n                        <FormUtil.Switch\n                            label={'Particle Method'}\n                            width={300}\n                            isRelation\n                            isUse={drawMethod === 'particle'}\n                            callback={() => {\n                                addElements([\n                                    {\n                                        name: ParamUtil.VisualParamType.RADIUS,\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '20' }]\n                                    },\n                                    {\n                                        name: ParamUtil.VisualParamType.COLOR_R,\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\n                                    },\n                                    {\n                                        name: ParamUtil.VisualParamType.COLOR_G,\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\n                                    },\n                                    {\n                                        name: ParamUtil.VisualParamType.COLOR_B,\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\n                                    },\n                                    {\n                                        name: ParamUtil.VisualParamType.COLOR_A,\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\n                                    },\n                                ]);\n                            }}\n                        />\n                    }\n                />\n            </>}\n        />\n        <FormUtil.BorderPanel\n            title=\"effect\"\n            isEnable={!isModify && drawMethod !== 'blank'}\n            innerJsx={<>\n                <FormUtil.Record\n                    textAlign=\"center\"\n                    isEnable={!hasFlashParam}\n                    jsx={\n                        <FormUtil.Switch\n                            label={'Disappear'}\n                            width={300}\n                            isUse={hasDisappearParam}\n                            callback={() => {\n                                toggleElements(hasDisappearParam, 5, [\n                                    {\n                                        name: ParamUtil.EffectParamType.DISAPPEAR_START,\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '0' }]\n                                    },\n                                ]);\n                            }}\n                        />\n                    }\n                />\n                <FormUtil.Record\n                    textAlign=\"center\"\n                    isEnable={!hasFlashParam}\n                    jsx={\n                        <FormUtil.Switch\n                            label={'Shrink'}\n                            width={300}\n                            isUse={hasShrinkParam}\n                            callback={() => {\n                                toggleElements(hasShrinkParam, !hasDisappearParam ? 5 : 6, [\n                                    {\n                                        name: ParamUtil.EffectParamType.SHRINK_START,\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '0' }]\n                                    },\n                                ]);\n                            }}\n                        />\n                    }\n                />\n                <FormUtil.Record\n                    textAlign=\"center\"\n                    isEnable={!(hasShrinkParam || hasDisappearParam)}\n                    jsx={\n                        <FormUtil.Switch\n                            label={'Flash'}\n                            width={300}\n                            isUse={hasFlashParam}\n                            callback={() => {\n                                toggleElements(hasFlashParam, 5, [\n                                    {\n                                        name: ParamUtil.EffectParamType.FLASH_APPEAR_FRAME,\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '1' }]\n                                    },\n                                    {\n                                        name: ParamUtil.EffectParamType.FLASH_HIDE_FRAME,\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '1' }]\n                                    },\n                                ]);\n                            }}\n                        />\n                    }\n                />\n            </>}\n        />\n    </>);\n}\n\nexport default EditorVisualMng;","import { useContext } from \"react\";\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\nimport TreeUtil from \"../../../../../utils/treeUtil\";\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\nimport LogicUtil from \"../../util/logicUtil\";\n\nconst EditorInheritConnMng = () => {\n    const { node, setFocusNode, invalidate } = useContext(FactoryTreeContext);\n    const mng = (node.data as LogicUtil.WrapElement).data as LogicUtil.NodeConnectManager;\n\n    return (<>\n        <FormUtil.BorderPanel\n            title=\"operation\"\n            innerJsx={<FormUtil.ButtonRecord\n                isCenter\n                buttons={[\n                    {\n                        label: 'Add Inherit',\n                        callback: () => {\n                            const wrap: LogicUtil.WrapElement = {\n                                type: 'connector',\n                                data: null\n                            }\n                            mng.inherits.push(wrap);\n                            const newNode = TreeUtil.createNode(wrap, node);\n                            node.children.push(newNode);\n                            setFocusNode(newNode);\n                            invalidate();\n                        }\n                    }\n                ]}\n            />}\n        />\n    </>);\n}\n\nexport default EditorInheritConnMng;","import { useContext, useEffect, useMemo, useState } from \"react\";\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\nimport TreeUtil from \"../../../../../utils/treeUtil\";\nimport ConfirmDialog from \"../../../../dialog/confirmDialog\";\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\nimport LogicElementUtil from \"../../util/logicElementUtil\";\nimport LogicUtil from \"../../util/logicUtil\";\nimport ModifyOperations from \"../common/modifyOperations\";\n\nconst EditorInheritConnector = () => {\n    const { store, setStore } = useContext(GlobalContext);\n    const { rootData, node, invalidate, setModify, isModify, removeSelf, setFocusNode } = useContext(FactoryTreeContext);\n    const wrap = node.data as LogicUtil.WrapElement;\n\n    // const [condition, setCondition] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    const [identify, setIdentify] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    const [method, setMethod] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    const [depend, setDepend] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n\n    const mappingForm = () => {\n        const param = wrap.data as LogicUtil.NodeInheritConnector;\n        setMethod({ ...method, value: param.method });\n        setDepend({ ...depend, value: param.depend });\n        setIdentify({ ...identify, value: param.id });\n    };\n\n    useEffect(() => {\n        if (wrap.data == null) {\n            setModify(true);\n            // 派生識別名（自動命名）の初期値を取得\n            const defaultName = LogicElementUtil.getNumberingOnPrefixName('id_', node.parent as TreeUtil.ElementNode);\n            setIdentify({ ...identify, value: defaultName });\n        } else {\n            mappingForm();\n        }\n    }, [node]);\n\n    const isCreate = method.value === 'create';\n\n    const hasFieldNode = useMemo(() => {\n        return LogicElementUtil.getInnerNode(node, 'inhfld-mng') != null;\n    }, [node]);\n\n    /** 引用するロジックリスト */\n    const logicList = useMemo((): string[] => {\n        const rootNode = rootData.data as LogicUtil.NodeRoot;\n        const inheritMng = rootNode.logicMng.data as LogicUtil.NodeLogicManager;\n        return inheritMng.defs.map(wrap => {\n            return (wrap.data as LogicUtil.NodeLogicItem).name;\n        });\n    }, [node]);\n\n    /** 同階層の既存のインヘリットIDを取得（重複チェックに使用） */\n    const idList = useMemo(() => {\n        return LogicElementUtil.getExistNameList(node);\n    }, [node]);\n\n    const initConnectorNode = (param: LogicUtil.NodeInheritConnector) => {\n        param.mngs = [];\n        node.children = [];\n        param.mngs.push({\n            type: 'extend-mng',\n            data: {\n                params: []\n            } as LogicUtil.NodeParamManager\n        });\n        param.mngs.push({\n            type: 'send-mng',\n            data: {\n                params: []\n            } as LogicUtil.NodeParamManager\n        });\n        if (isCreate) {\n            param.mngs.push({\n                type: 'inherit-logic',\n                data: {\n                    mngs: LogicElementUtil.getDefaultLogicMngs()\n                } as LogicUtil.NodeInheritItem\n            });\n        }\n        wrap.data = param;\n\n        param.mngs.forEach(mng => {\n            const newNode = TreeUtil.createNode(mng, node);\n            const data = (newNode.data as LogicUtil.WrapElement);\n            switch (data.type) {\n                case 'inherit-logic': {\n                    LogicElementUtil.syncTreeElementFromWrap(newNode);\n                } break;\n                case 'send-mng': {\n                    const connector = (newNode.parent?.data as LogicUtil.WrapElement).data as LogicUtil.NodeInheritConnector;\n                    if (connector.method === 'depend') {\n                        console.log('initSendParams');\n                        initSendParams(newNode, rootData);\n                    }\n                } break;\n            }\n            node.children.push(newNode);\n        });\n    }\n\n    const getSendParamList = (sendNode: TreeUtil.ElementNode, rootData: LogicUtil.WrapElement): string[] => {\n        const connector = (sendNode.parent?.data as LogicUtil.WrapElement).data as LogicUtil.NodeInheritConnector;\n        const rootNode = rootData.data as LogicUtil.NodeRoot;\n        const inheritMng = rootNode.logicMng.data as LogicUtil.NodeLogicManager;\n        const dependItem = inheritMng.defs.find(wrap => {\n            return (wrap.data as LogicUtil.NodeLogicItem).name === connector.depend;\n        });\n        if (dependItem != undefined) {\n            const logicWrap = dependItem;\n            const argWrap = (logicWrap.data as LogicUtil.NodeLogicItem).mngs[0];\n            if (argWrap.type === 'argument-mng') {\n                return (argWrap.data as LogicUtil.NodeArgumentManager).args.map(arg => {\n                    return (arg.data as LogicUtil.NodeArgumentItem).name;\n                });\n            }\n        }\n        return [];\n    }\n\n    const initSendParams = (sendNode: TreeUtil.ElementNode, rootData: LogicUtil.WrapElement) => {\n        const sendParamList = getSendParamList(sendNode, rootData);\n        // console.log(sendParamList);\n        const wrap = sendNode.data as LogicUtil.WrapElement;\n        const params = (wrap.data as LogicUtil.NodeParamManager).params;\n        // 必要な存在しないパラメータを追加\n        const curParamList = params.map(param => {\n            return (param.data as LogicUtil.NodeParamItem).name;\n        });\n        sendParamList.forEach(param => {\n            if (!curParamList.includes(param)) {\n                const paramWrap = LogicElementUtil.createParamWrap('send-item',\n                    { name: param, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] }\n                );\n                params.push(paramWrap);\n                sendNode.children.push(TreeUtil.createNode(paramWrap, sendNode));\n            }\n        });\n    }\n    \n    /**\n     * 追加要素の表示非表示を切り替える\n     */\n    const toggleElement = (hasNode: boolean, listPos: number, wrapElement: LogicUtil.WrapElement) => {\n        if (hasNode) {\n            LogicElementUtil.removeChild(node, listPos, 1);\n            setFocusNode({ ...node });\n            invalidate();\n        } else {\n            LogicElementUtil.insertChild(wrapElement, node, listPos);\n            setFocusNode({ ...node });\n            invalidate();\n        }\n    };\n\n    /**\n     * 変数要素の有無を判定\n     */\n    const hasField = () => {\n        const fieldNode = LogicElementUtil.getInnerNode(node, 'inhfld-mng');\n        if(fieldNode == null) return false;\n        return fieldNode.children.length > 0;\n    }\n\n    const isDisable = wrap.data == null ? false : (wrap.data as LogicUtil.NodeInheritConnector).disable ?? false;\n\n    return (<>\n        <ModifyOperations.Component\n            mappingForm={mappingForm}\n            checkableFields={[identify, method, depend]}\n            firstRegist={() => {\n                const param: LogicUtil.NodeInheritConnector = {\n                    method: method.value as LogicUtil.InheritMethod,\n                    depend: depend.value,\n                    id: identify.value,\n                    mngs: []\n                };\n                initConnectorNode(param);\n                invalidate();\n            }}\n            modifyRegist={() => {\n                const param = wrap.data as LogicUtil.NodeInheritConnector;\n                const isChange = param.method !== method.value || param.depend !== depend.value;\n                param.method = method.value as LogicUtil.InheritMethod;\n                param.depend = depend.value;\n                param.id = identify.value;\n                wrap.data = param;\n\n                if (isChange) {\n                    initConnectorNode(param);\n                }\n                invalidate();\n            }}\n        />\n        <FormUtil.BorderPanel\n            title=\"param\"\n            innerJsx={<>\n                <FormUtil.FormRecord\n                    titleLabel=\"Method\"\n                    jsx={\n                        <FormUtil.Combobox\n                            marginLeft={2}\n                            checkable={method}\n                            width={178}\n                            isReadOnly={!isModify}\n                            setCheckable={(checkable) => {\n                                // createが選択されたらdependを空にする\n                                if (checkable.value === 'create') {\n                                    setDepend({ ...depend, value: '' });\n                                }\n                                setMethod(checkable);\n                            }}\n                            list={LogicUtil.ConnectTypes.map(item => {\n                                return { value: item, labelText: item };\n                            })}\n                            headBlank\n                            validates={[\n                                {\n                                    checker: (value) => ValidateUtil.checkRequired(value),\n                                    errorType: \"required\"\n                                }\n                            ]}\n                        />\n                    }\n                />\n                <FormUtil.FormRecord\n                    titleLabel=\"Depend\"\n                    isEnable={method.value === 'depend'}\n                    jsx={\n                        <FormUtil.Combobox\n                            marginLeft={2}\n                            checkable={depend}\n                            width={270}\n                            isReadOnly={!isModify}\n                            setCheckable={setDepend}\n                            list={logicList.map(item => {\n                                return { value: item, labelText: item };\n                            })}\n                            headBlank\n                            dependency={[method]}\n                            validates={[\n                                {\n                                    checker: (value) => {\n                                        return method.value !== 'depend' || ValidateUtil.checkRequired(value);\n                                    },\n                                    errorType: \"required\"\n                                }\n                            ]}\n                        />\n                    }\n                />\n                <FormUtil.FormRecord\n                    titleLabel=\"Identify\"\n                    jsx={\n                        <FormUtil.TextField\n                            marginLeft={2}\n                            checkable={identify}\n                            width={270}\n                            isReadOnly={!isModify}\n                            setCheckable={setIdentify}\n                            validates={[\n                                {\n                                    checker: (value) => LogicUtil.checkFieldName(value),\n                                    errorType: \"value\"\n                                },\n                                {\n                                    checker: (value) => ValidateUtil.checkStringLength(value, 0, 20),\n                                    errorType: \"length\"\n                                },\n                                {\n                                    checker: (value) => !idList.includes(value),\n                                    errorType: \"relation\"\n                                }\n                            ]}\n                        />\n                    }\n                />\n            </>}\n        />\n        <FormUtil.BorderPanel\n            title=\"element\"\n            isEnable={!isModify}\n            innerJsx={<>\n                <FormUtil.Record\n                    textAlign=\"center\"\n                    isEnable={true}\n                    jsx={<FormUtil.Switch\n                        label={'Field'}\n                        width={300}\n                        isUse={hasFieldNode}\n                        isEnable={!hasField()}\n                        callback={() => {\n                            toggleElement(\n                                hasFieldNode,\n                                0,\n                                {\n                                    type: 'inhfld-mng',\n                                    data: {\n                                        fields: []\n                                    } as LogicUtil.NodeFieldManager\n                                }\n                            );\n                        }}\n                    />}\n                />\n            </>}\n        />\n        <FormUtil.BorderPanel\n            title=\"operation\"\n            innerJsx={<>\n                <FormUtil.Record\n                    textAlign=\"center\"\n                    jsx={<FormUtil.Switch\n                        label={'Disable'}\n                        width={300}\n                        isUse={isDisable}\n                        isEnable={!isModify}\n                        callback={() => {\n                            const data = (wrap.data as LogicUtil.NodeInheritConnector);\n                            if (isDisable) {\n                                data.disable = undefined;\n                            } else {\n                                data.disable = true;\n                            }\n                            invalidate();\n                        }}\n                    />}\n                />\n                <FormUtil.ButtonRecord\n                    isCenter\n                    buttons={[\n                        {\n                            label: 'Edit local',\n                            isEnable: !isModify && !isCreate,\n                            callback: () => {\n                                store.system.dialog = <ConfirmDialog.Component\n                                    message=\"Create a clone from the depended inherit logic.\"\n                                    buttons={[\n                                        {\n                                            label: 'Cancel',\n                                            callback: () => {\n                                                store.system.dialog = null;\n                                                setStore({ ...store });\n                                            }\n                                        },\n                                        {\n                                            label: 'Conversion',\n                                            callback: () => {\n                                                const logicMng = (rootData.data as LogicUtil.NodeRoot).logicMng.data as LogicUtil.NodeLogicManager;\n                                                const logicList = logicMng.defs.map(def => def.data as LogicUtil.NodeLogicItem);\n                                                // ディペンドしているロジックを取得\n                                                const dependLogic = logicList.find(inherit => inherit.name === depend.value);\n                                                if (dependLogic != undefined) {\n                                                    const cloneLogic = JSON.parse(JSON.stringify(dependLogic)) as LogicUtil.NodeLogicItem;\n                                                    const connectItem: LogicUtil.NodeInheritItem = {\n                                                        mngs: cloneLogic.mngs\n                                                    };\n                                                    const newWrap: LogicUtil.WrapElement = {\n                                                        type: 'inherit-logic',\n                                                        data: connectItem\n                                                    };\n                                                    const newNode = LogicElementUtil.addChild(newWrap, node);\n                                                    // 子要素の展開\n                                                    newNode.children = LogicUtil.getChildrenElementNode(newNode);\n\n                                                    const param = wrap.data as LogicUtil.NodeInheritConnector;\n                                                    param.method = 'create';\n                                                    param.depend = '';\n                                                    mappingForm();\n                                                }\n                                                store.system.dialog = null;\n                                                setStore({ ...store });\n                                                invalidate();\n                                            }\n                                        }\n                                    ]}\n                                />;\n                                setStore({ ...store });\n                            }\n                        }\n                    ]}\n                />\n                <FormUtil.ButtonRecord\n                    isCenter\n                    buttons={[\n                        {\n                            label: 'Detach global',\n                            isEnable: !isModify && isCreate,\n                            callback: () => {\n                                store.system.dialog = <ConfirmDialog.Component\n                                    message=\"Detach a clone from the this inherit logic.\"\n                                    buttons={[\n                                        {\n                                            label: 'Cancel',\n                                            callback: () => {\n                                                store.system.dialog = null;\n                                                setStore({ ...store });\n                                            }\n                                        },\n                                        {\n                                            label: 'Conversion',\n                                            callback: () => {\n                                                let rootNode = node;\n                                                while (rootNode.parent != null) rootNode = rootNode.parent;\n                                                const inheritNode = node.children.find(el => (el.data as LogicUtil.WrapElement).type === 'inherit-logic');\n                                                const logicMngNode = rootNode.children.find(el => (el.data as LogicUtil.WrapElement).type === 'logic-mng');\n                                                if (logicMngNode == undefined || inheritNode == undefined) return;\n                                                const inherit = (inheritNode.data as LogicUtil.WrapElement).data;\n                                                const clone = JSON.parse(JSON.stringify((inherit))) as LogicUtil.NodeInheritItem;\n                                                // ロジック名（自動命名）を取得\n                                                const defaultName = LogicElementUtil.getNumberingOnPrefixName('clone_inherit_', logicMngNode);\n                                                const logicItem: LogicUtil.NodeLogicItem = {\n                                                    ...clone,\n                                                    name: defaultName\n                                                };\n                                                const newWrap: LogicUtil.WrapElement = {\n                                                    type: 'logic-item',\n                                                    data: logicItem\n                                                };\n\n                                                // ロジックマネージャに追加\n                                                const newNode = LogicElementUtil.addChild(newWrap, logicMngNode);\n                                                // 子要素の展開\n                                                newNode.children = LogicUtil.getChildrenElementNode(newNode);\n\n                                                // 自身（コネクタ）からインヘリット要素を削除\n                                                LogicElementUtil.removeChild(node, 2, 1);\n\n                                                const param = wrap.data as LogicUtil.NodeInheritConnector;\n                                                param.method = 'depend';\n                                                param.depend = logicItem.name;\n                                                mappingForm();\n\n                                                store.system.dialog = null;\n                                                setStore({ ...store });\n                                                invalidate();\n                                            }\n                                        }\n                                    ]}\n                                />;\n                                setStore({ ...store });\n                            }\n                        }\n                    ]}\n                />\n                <FormUtil.ButtonRecord\n                    isCenter\n                    buttons={[\n                        {\n                            label: 'Delete',\n                            isEnable: !isModify,\n                            callback: () => {\n                                removeSelf();\n                            }\n                        }\n                    ]}\n                />\n                {/* 並び順入れ替えボタン */}\n                {LogicElementUtil.getSwapButtons(node, invalidate)}\n            </>}\n        />\n    </>);\n}\n\nexport default EditorInheritConnector;","import styled from \"styled-components\";\nimport { useContext, useEffect, useMemo, useState } from \"react\";\nimport { GlobalContext } from \"../../../entry/systemEntry\";\nimport FormUtil from \"../../../../utils/form/formUtiil\";\nimport LogicUtil from \"../util/logicUtil\";\nimport ParamUtil from \"../util/paramUtil\";\nimport ValidateUtil from \"../../../../utils/form/validateUtil\";\nimport TreeUtil from \"../../../../utils/treeUtil\";\nimport LogicElementUtil from \"../util/logicElementUtil\";\n\nnamespace SendTemplateDialog {\n\n    const FRAME_WIDTH = 450;\n    const FRAME_HEIGHT = 160;\n    const COMPONENT_WIDTH = 296;\n\n    export const ConnectParentPosition = (props: {\n        node: TreeUtil.ElementNode;\n        invalidate: () => void;\n    }) => {\n\n        const { store, setStore } = useContext(GlobalContext);\n\n        const [xName, setXName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n        const [yName, setYName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n\n        const message = 'Please, input property name!';\n\n        /** 既存のパラメータ名を取得（重複チェックに使用） */\n        const paramNameList = useMemo(() => {\n            const owner = (LogicElementUtil.getInnerWrap(props.node.parent?.data as LogicUtil.WrapElement, 'inherit-logic') as LogicUtil.WrapElement).data;\n            return LogicElementUtil.getParamNameList(owner);\n        }, [props.node]);\n\n        const buttons: FormUtil.ButtonProps[] = [\n            {\n                label: 'Cancel',\n                callback: () => {\n                    store.system.dialog = null;\n                    setStore({ ...store });\n                }\n            },\n            {\n                label: 'Execute',\n                isEnable: FormUtil.checkItems([xName, yName]),\n                callback: () => {\n                    // Sendにパラメータを追加\n                    LogicElementUtil.addChild(LogicElementUtil.createParamWrap('send-item',\n                        { name: xName.value, formulaItems: ['var'], values: [{ type: 'self', value: ParamUtil.SelfParamType.POS_X }] }\n                    ), props.node);\n                    LogicElementUtil.addChild(LogicElementUtil.createParamWrap('send-item',\n                        { name: yName.value, formulaItems: ['var'], values: [{ type: 'self', value: ParamUtil.SelfParamType.POS_Y }] }\n                    ), props.node);\n\n                    // 派生ロジックに引数を追加\n                    const logicNode = LogicElementUtil.getInnerNode(props.node.parent as TreeUtil.ElementNode, 'inherit-logic') as TreeUtil.ElementNode;\n                    const hasArgNode = logicNode.children.find(child => (child.data as LogicUtil.WrapElement).type === 'argument-mng') != undefined;\n                    if (!hasArgNode) {\n                        LogicElementUtil.insertChild({\n                            type: 'argument-mng',\n                            data: {\n                                args: []\n                            } as LogicUtil.NodeArgumentManager\n                        }, logicNode, 0);\n                    }\n                    const argNode = logicNode.children.find(child => (child.data as LogicUtil.WrapElement).type === 'argument-mng') as TreeUtil.ElementNode;\n\n                    LogicElementUtil.addChild({\n                        type: 'argument-item',\n                        data: {\n                            name: xName.value,\n                            valueType: 'number'\n                        } as LogicUtil.NodeArgumentItem\n                    }, argNode);\n                    LogicElementUtil.addChild({\n                        type: 'argument-item',\n                        data: {\n                            name: yName.value,\n                            valueType: 'number'\n                        } as LogicUtil.NodeArgumentItem\n                    }, argNode);\n\n                    // 派生ロジックの座標に引数を設定\n                    const behaviorNode = logicNode.children.find(child => (child.data as LogicUtil.WrapElement).type === 'behavior-mng') as TreeUtil.ElementNode;\n                    const setParamValue = (prpName: string, argName: string) => {\n                        const params = behaviorNode.children.map(child => (child.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamItem);\n                        const targetParam = params.find(param => param.name === prpName) as LogicUtil.NodeParamItem;\n                        targetParam.formulaItems = ['var'];\n                        targetParam.values = [{ type: 'argument', value: argName }];\n                    }\n                    setParamValue(ParamUtil.BehaviorParamType.POS_X, xName.value);\n                    setParamValue(ParamUtil.BehaviorParamType.POS_Y, yName.value);\n\n                    store.system.dialog = null;\n                    setStore({ ...store });\n                    props.invalidate();\n                }\n            }\n        ]\n\n        return (\n            <_Frame width={FRAME_WIDTH} height={FRAME_HEIGHT}>\n                <_Inner>\n                    <FormUtil.Message\n                        message={message}\n                        isCenter\n                    />\n                    <FormUtil.FormRecord\n                        titleLabel=\"self_pos_x\"\n                        jsx={\n                            <FormUtil.TextField\n                                marginLeft={2}\n                                checkable={xName}\n                                width={COMPONENT_WIDTH}\n                                setCheckable={setXName}\n                                validates={[\n                                    {\n                                        checker: (value) => ValidateUtil.checkRequired(value),\n                                        errorType: \"required\"\n                                    },\n                                    {\n                                        checker: (value) => LogicUtil.checkFieldName(value),\n                                        errorType: \"value\"\n                                    },\n                                    {\n                                        checker: (value) => ValidateUtil.checkStringLength(value, 0, 20),\n                                        errorType: \"length\"\n                                    },\n                                    {\n                                        checker: (value) => {\n                                            const list = paramNameList.slice();\n                                            if (yName.value !== '') list.push(yName.value);\n                                            return !list.includes(value);\n                                        },\n                                        errorType: \"relation\"\n                                    }\n                                ]}\n                                dependency={[yName]}\n                            />\n                        }\n                    />\n                    <FormUtil.FormRecord\n                        titleLabel=\"self_pos_y\"\n                        jsx={\n                            <FormUtil.TextField\n                                marginLeft={2}\n                                checkable={yName}\n                                width={COMPONENT_WIDTH}\n                                setCheckable={setYName}\n                                validates={[\n                                    {\n                                        checker: (value) => ValidateUtil.checkRequired(value),\n                                        errorType: \"required\"\n                                    },\n                                    {\n                                        checker: (value) => LogicUtil.checkFieldName(value),\n                                        errorType: \"value\"\n                                    },\n                                    {\n                                        checker: (value) => ValidateUtil.checkStringLength(value, 0, 20),\n                                        errorType: \"length\"\n                                    },\n                                    {\n                                        checker: (value) => {\n                                            const list = paramNameList.slice();\n                                            if (xName.value !== '') list.push(xName.value);\n                                            return !list.includes(value);\n                                        },\n                                        errorType: \"relation\"\n                                    }\n                                ]}\n                                dependency={[xName]}\n                            />\n                        }\n                    />\n                </_Inner>\n                <FormUtil.ButtonRecord\n                    isCenter\n                    buttons={buttons}\n                />\n            </_Frame>\n        );\n    }\n\n    export const SetParentPosition = (props: {\n        node: TreeUtil.ElementNode;\n        invalidate: () => void;\n    }) => {\n\n        const { store, setStore } = useContext(GlobalContext);\n\n        const [xName, setXName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n        const [yName, setYName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n\n        const message = 'Please, select property name!';\n\n        const list = useMemo(() => {\n            return props.node.children.map(child => {\n                const wrap = child.data as LogicUtil.WrapElement;\n                return (wrap.data as LogicUtil.NodeParamItem).name;\n            });\n        }, []);\n\n        const buttons: FormUtil.ButtonProps[] = [\n            {\n                label: 'Cancel',\n                callback: () => {\n                    store.system.dialog = null;\n                    setStore({ ...store });\n                }\n            },\n            {\n                label: 'Execute',\n                isEnable: FormUtil.checkItems([xName, yName]),\n                callback: () => {\n                    const paramList = props.node.children.map(child => (child.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamItem);\n                    const xParam = paramList.find(param => param.name === xName.value) as LogicUtil.NodeParamItem;\n                    const yParam = paramList.find(param => param.name === yName.value) as LogicUtil.NodeParamItem;\n                    xParam.formulaItems = ['var'];\n                    xParam.values = [{ type: 'self', value: ParamUtil.SelfParamType.POS_X }];\n                    yParam.formulaItems = ['var'];\n                    yParam.values = [{ type: 'self', value: ParamUtil.SelfParamType.POS_Y }];\n\n                    store.system.dialog = null;\n                    setStore({ ...store });\n                    props.invalidate();\n                }\n            }\n        ]\n\n        return (\n            <_Frame width={FRAME_WIDTH} height={FRAME_HEIGHT}>\n                <_Inner>\n                    <FormUtil.Message\n                        message={message}\n                        isCenter\n                    />\n                    <FormUtil.FormRecord\n                        titleLabel=\"self_pos_x\"\n                        jsx={\n                            <FormUtil.Combobox\n                                marginLeft={2}\n                                checkable={xName}\n                                width={COMPONENT_WIDTH}\n                                setCheckable={setXName}\n                                validates={[\n                                    {\n                                        checker: (value) => ValidateUtil.checkRequired(value),\n                                        errorType: \"required\"\n                                    }\n                                ]}\n                                headBlank\n                                list={list.filter(item => item !== yName.value).map(item => ({\n                                    value: item, labelText: item\n                                }))}\n                            />\n                        }\n                    />\n                    <FormUtil.FormRecord\n                        titleLabel=\"self_pos_y\"\n                        jsx={\n                            <FormUtil.Combobox\n                                marginLeft={2}\n                                checkable={yName}\n                                width={COMPONENT_WIDTH}\n                                setCheckable={setYName}\n                                validates={[\n                                    {\n                                        checker: (value) => ValidateUtil.checkRequired(value),\n                                        errorType: \"required\"\n                                    }\n                                ]}\n                                headBlank\n                                list={list.filter(item => item !== xName.value).map(item => ({\n                                    value: item, labelText: item\n                                }))}\n                            />\n                        }\n                    />\n                </_Inner>\n                <FormUtil.ButtonRecord\n                    isCenter\n                    buttons={buttons}\n                />\n            </_Frame>\n        );\n    }\n}\n\nexport default SendTemplateDialog;\n\nconst _Frame = styled.div<{\n    width: number;\n    height: number;\n}>`\n    display: inline-block;\n    position: absolute;\n    z-index: 11;\n    top: calc(50% - ${props => props.height / 2}px);\n    left: calc(50% - ${props => props.width / 2}px);\n    width: ${props => props.width}px;\n    height: ${props => props.height}px;\n    background-color: #e7e7e7e2;\n    border: 1px solid #8f8f8f;\n    border-radius: 4px;\n    box-shadow: 10px 15px 15px #0000004b;\n`;\n\nconst _Inner = styled.div<{}>`\n    /* text-align: center; */\n    display: inline-block;\n    width: 100%;\n    background-color: #d0e7e718;\n`;","import { useContext, useMemo } from \"react\";\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\nimport TreeUtil from \"../../../../../utils/treeUtil\";\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\nimport LogicTemplateDialog from \"../../dialog/logicTemplateDialog\";\nimport SendTemplateDialog from \"../../dialog/sendTemplateDialog\";\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\nimport LogicElementUtil from \"../../util/logicElementUtil\";\nimport LogicUtil from \"../../util/logicUtil\";\n\nconst EditorSendManager = () => {\n    const { store, setStore } = useContext(GlobalContext);\n    const { rootData, node, setFocusNode, invalidate } = useContext(FactoryTreeContext);\n    const wrap = node.data as LogicUtil.WrapElement;\n\n    const isDepend = () => {\n        const conn = (node.parent?.data as LogicUtil.WrapElement).data as LogicUtil.NodeInheritConnector;\n        return conn.method === 'depend';\n    };\n\n    // const getSendParamList = (): string[] => {\n    //     const connector = (node.parent?.data as LogicUtil.WrapElement).data as LogicUtil.NodeInheritConnector;\n    //     const isCreate = connector.method === 'create';\n    //     let targetWrap: LogicUtil.WrapElement | null = null;\n    //     if (!isCreate) {\n    //         const rootNode = rootData.data as LogicUtil.NodeRoot;\n    //         const inheritMng = rootNode.logicMng.data as LogicUtil.NodeLogicManager;\n    //         const dependItem = inheritMng.defs.find(wrap => {\n    //             return (wrap.data as LogicUtil.NodeLogicItem).name === connector.depend;\n    //         });\n    //         if (dependItem != undefined) targetWrap = dependItem;\n    //     } else {\n    //         targetWrap = (node.parent?.children[node.parent?.children.length - 1].data as LogicUtil.WrapElement)\n    //     }\n    //     if (targetWrap != null) {\n    //         const argWrap = (targetWrap.data as LogicUtil.NodeLogicItem).mngs[0];\n    //         if (argWrap.type === 'argument-mng') {\n    //             return (argWrap.data as LogicUtil.NodeArgumentManager).args.map(arg => {\n    //                 return (arg.data as LogicUtil.NodeArgumentItem).name;\n    //             });\n    //         }\n    //     }\n    //     return [];\n    // }\n\n    // const update = () => {\n    //     const sendParamList = getSendParamList();\n    //     const curSize = node.children.length;\n    //     const params = (wrap.data as LogicUtil.NodeParamManager).params;\n    //     // 不要なパラメータを削除\n    //     for (let i = curSize - 1; i >= 0; i--) {\n    //         const name = (params[i].data as LogicUtil.NodeParamItem).name;\n    //         if (!sendParamList.includes(name)) {\n    //             node.children.splice(i, 1);\n    //             params.splice(i, 1);\n    //         }\n    //     }\n    //     // 必要な存在しないパラメータを追加\n    //     const curParamList = params.map(param => {\n    //         return (param.data as LogicUtil.NodeParamItem).name;\n    //     });\n    //     sendParamList.forEach(param => {\n    //         if (!curParamList.includes(param)) {\n    //             const paramWrap = LogicElementUtil.createParamWrap('send-item',\n    //                 { name: param, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] }\n    //             );\n    //             params.push(paramWrap);\n    //             node.children.push(TreeUtil.createNode(paramWrap, node));\n    //         }\n    //     });\n    // }\n\n    return (<>\n        <FormUtil.BorderPanel\n            title=\"template\"\n            innerJsx={<>\n                <FormUtil.ButtonRecord\n                    isCenter\n                    buttons={[\n                        {\n                            label: 'Connect Position',\n                            isEnable: !isDepend(),\n                            callback: () => {\n                                store.system.dialog = <SendTemplateDialog.ConnectParentPosition\n                                    node={node}\n                                    invalidate={invalidate}\n                                />;\n                                setStore({ ...store });\n                            }\n                        }\n                    ]}\n                />\n                <FormUtil.ButtonRecord\n                    isCenter\n                    buttons={[\n                        {\n                            label: 'Set Position',\n                            callback: () => {\n                                store.system.dialog = <SendTemplateDialog.SetParentPosition\n                                    node={node}\n                                    invalidate={invalidate}\n                                />;\n                                setStore({ ...store });\n                            }\n                        }\n                    ]}\n                />\n            </>}\n        />\n    </>);\n}\n\nexport default EditorSendManager;","import { useContext } from \"react\";\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\nimport TreeUtil from \"../../../../../utils/treeUtil\";\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\nimport LogicElementUtil from \"../../util/logicElementUtil\";\nimport LogicUtil from \"../../util/logicUtil\";\n\nconst EditorFieldMng = () => {\n    const { invalidate, node, setFocusNode } = useContext(FactoryTreeContext);\n    const wrap = node.data as LogicUtil.WrapElement;\n\n    return (<>\n        <FormUtil.BorderPanel\n            title=\"operation\"\n            innerJsx={<FormUtil.ButtonRecord\n                isCenter\n                buttons={[\n                    {\n                        label: 'Add Field',\n                        callback: () => {\n                            // const newWrap: FactoryUtil.WrapNode = FactoryUtil.createParamWrap('field-item',\n                            //     { name: '', formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] }\n                            // );\n                            const newWrap: LogicUtil.WrapElement = {\n                                type: 'field-item',\n                                data: null\n                            };\n                            const newNode = LogicElementUtil.addChild(newWrap, node);\n                            setFocusNode(newNode);\n                            invalidate();\n                        }\n                    }\n                ]}\n            />}\n        />\n    </>);\n}\n\nexport default EditorFieldMng;","import { useContext, useEffect, useMemo } from \"react\";\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\nimport LogicElementUtil from \"../../util/logicElementUtil\";\nimport LogicUtil from \"../../util/logicUtil\";\nimport ParamUtil from \"../../util/paramUtil\";\n\nconst EditorExtendMng = () => {\n    const { node, setFocusNode, invalidate } = useContext(FactoryTreeContext);\n    const wrap = node.data as LogicUtil.WrapElement;\n\n    const [hasLoopParam, hasInvokeParam] = useMemo(() => {\n        const list = node.children.map(el => {\n            return ((el.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamItem).name as ParamUtil.ExtendParam;\n        });\n        return [\n            list.includes(ParamUtil.ExtendParamType.LOOP_COUNT),\n            list.includes(ParamUtil.ExtendParamType.INVOKE)\n        ]\n    }, [node]);\n\n    useEffect(() => {\n    }, [node]);\n\n    /**\n     * 追加要素の表示非表示を切り替える\n     */\n    const toggleElement = (hasNode: boolean, listPos: number, wrapElement: LogicUtil.WrapElement) => {\n        if (hasNode) {\n            LogicElementUtil.removeChild(node, listPos, 1);\n            setFocusNode({ ...node });\n            invalidate();\n        } else {\n            LogicElementUtil.insertChild(wrapElement, node, listPos);\n            setFocusNode({ ...node });\n            invalidate();\n        }\n    };\n\n    return (<>\n        <FormUtil.BorderPanel\n            title=\"element\"\n            innerJsx={<>\n                <FormUtil.Record\n                    textAlign=\"center\"\n                    jsx={\n                        <FormUtil.Switch\n                            label={'Loop'}\n                            width={300}\n                            isUse={hasLoopParam}\n                            callback={() => {\n                                toggleElement(hasLoopParam, 0, {\n                                    type: 'param-item',\n                                    data: {\n                                        name: ParamUtil.ExtendParamType.LOOP_COUNT,\n                                        formulaItems: ['var'],\n                                        values: [{ type: 'direct', value: '1' }]\n                                    } as LogicUtil.NodeParamItem\n                                });\n                            }}\n                        />\n                    }\n                />\n                <FormUtil.Record\n                    textAlign=\"center\"\n                    jsx={\n                        <FormUtil.Switch\n                            label={'Invoke'}\n                            width={300}\n                            isUse={hasInvokeParam}\n                            callback={() => {\n                                toggleElement(hasInvokeParam, hasLoopParam ? 1 : 0, {\n                                    type: 'condition-item',\n                                    data: {\n                                        name: ParamUtil.ExtendParamType.INVOKE,\n                                        formulaItems: ['var', '=', 'var'],\n                                        values: [{ type: 'direct', value: '0' }, { type: 'direct', value: '0' }]\n                                    } as LogicUtil.NodeParamItem\n                                });\n                            }}\n                        />\n                    }\n                />\n            </>}\n        />\n    </>);\n}\n\nexport default EditorExtendMng;","import { useContext, useEffect, useMemo, useState } from \"react\";\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\nimport TreeUtil from \"../../../../../utils/treeUtil\";\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\nimport LogicUtil from \"../../util/logicUtil\";\nimport ModifyOperations from \"../common/modifyOperations\";\nimport LogicElementUtil from \"../../util/logicElementUtil\";\n\nconst EditorSeedItem = () => {\n    const { store, setStore } = useContext(GlobalContext);\n    const { removeSelf, node, rootData, invalidate, setModify, isModify } = useContext(FactoryTreeContext);\n    const wrap = node.data as LogicUtil.WrapElement;\n\n    const [name, setName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    const [origin, setOrigin] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n\n    const mappingForm = () => {\n        const param = wrap.data as LogicUtil.NodeSeedItem;\n        setName({ ...name, value: param.name });\n        setOrigin({ ...origin, value: param.entry });\n    };\n\n    /** 既存のシード名を取得（重複チェックに使用） */\n    const seedNameList = useMemo(() => {\n        const mng = (node.parent?.data as LogicUtil.WrapElement).data;\n        return LogicElementUtil.getSeedNameList(mng);\n    }, [node]);\n\n    useEffect(() => {\n        if (wrap.data == null) {\n            setModify(true);\n        } else {\n            mappingForm();\n        }\n    }, [node]);\n\n    // 引用するロジックリスト\n    const logicNameList = useMemo((): string[] => {\n        const rootNode = rootData.data as LogicUtil.NodeRoot;\n        const logicMng = rootNode.logicMng.data as LogicUtil.NodeLogicManager;\n        return logicMng.defs.map(wrap => {\n            return (wrap.data as LogicUtil.NodeLogicItem).name;\n        });\n    }, [node]);\n\n    const getSendParamList = (): string[] => {\n        const seed = wrap.data as LogicUtil.NodeSeedItem;\n        const logicMng = (rootData.data as LogicUtil.NodeRoot).logicMng.data as LogicUtil.NodeLogicManager;\n        const dependItem = logicMng.defs.find(wrap => {\n            return (wrap.data as LogicUtil.NodeLogicItem).name === seed.entry;\n        });\n        if (dependItem != undefined) {\n            const logicWrap = dependItem;\n            const argWrap = (logicWrap.data as LogicUtil.NodeLogicItem).mngs[0];\n            if (argWrap.type === 'argument-mng') {\n                return (argWrap.data as LogicUtil.NodeArgumentManager).args.map(arg => {\n                    return (arg.data as LogicUtil.NodeArgumentItem).name;\n                });\n            }\n        }\n        return [];\n    }\n\n    const initSendParams = () => {\n        const sendParamList = getSendParamList();\n        const sendNode = LogicElementUtil.getInnerNode(node, 'interface-mng', 'seedsend-mng') as TreeUtil.ElementNode;\n        const params = ((sendNode.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager).params;\n        // 必要な存在しないパラメータを追加\n        const curParamList = params.map(param => {\n            return (param.data as LogicUtil.NodeParamItem).name;\n        });\n        sendParamList.forEach(param => {\n            if (!curParamList.includes(param)) {\n                const paramWrap = LogicElementUtil.createParamWrap('seedsend-item',\n                    { name: param, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] }\n                );\n                params.push(paramWrap);\n            }\n        });\n        LogicElementUtil.syncTreeElementFromWrap(sendNode);\n    }\n\n    const getDefaultSeedMngs = (): LogicUtil.WrapElement[] => {\n        return [\n            {\n                type: 'interface-mng',\n                data: {\n                    mngs: [\n                        {\n                            type: 'seedarg-mng',\n                            data: {\n                                args: []\n                            } as LogicUtil.NodeSeedArgManager\n                        },\n                        {\n                            type: 'seedsend-mng',\n                            data: {\n                                params: []\n                            } as LogicUtil.NodeSeedSendManager\n                        },\n                    ]\n                } as LogicUtil.NodeInterfaceMng\n            },\n            {\n                type: 'thumbnail-mng',\n                data: {\n                    items: []\n                } as LogicUtil.NodeThumnailManager\n            },\n            {\n                type: 'sample-mng',\n                data: {\n                    samples: []\n                } as LogicUtil.NodeSampleManager\n            }\n        ];\n    }\n\n    return (<>\n        <ModifyOperations.Component\n            mappingForm={mappingForm}\n            checkableFields={[name, origin]}\n            firstRegist={() => {\n                const element: LogicUtil.NodeSeedItem = {\n                    name: name.value,\n                    entry: origin.value,\n                    mngs: getDefaultSeedMngs()\n                };\n                wrap.data = element;\n\n                LogicElementUtil.syncTreeElementFromWrap(node);\n                // 参照しているロジックの引数をSendに設定\n                initSendParams();\n                invalidate();\n                setStore({ ...store });\n            }}\n            modifyRegist={() => {\n                const param = wrap.data as LogicUtil.NodeLogicItem;\n                param.name = name.value;\n                wrap.data = param;\n            }}\n        />\n        <FormUtil.BorderPanel\n            title=\"param\"\n            innerJsx={<>\n                <FormUtil.FormRecord\n                    titleLabel=\"Name\"\n                    jsx={\n                        <FormUtil.TextField\n                            width={200}\n                            isReadOnly={!isModify}\n                            checkable={name}\n                            setCheckable={setName}\n                            validates={[\n                                {\n                                    checker: (value) => ValidateUtil.checkRequired(value),\n                                    errorType: \"required\"\n                                },\n                                {\n                                    checker: (value) => ValidateUtil.checkStringLength(value, 1, 16),\n                                    errorType: \"length\"\n                                },\n                                {\n                                    checker: (value) => LogicUtil.checkFieldName(value),\n                                    errorType: \"value\"\n                                },\n                                {\n                                    checker: (value) => {\n                                        const list = seedNameList.filter(name => {\n                                            // 自分自身のロジック名を除外\n                                            if (wrap.data != null) {\n                                                return (wrap.data as LogicUtil.NodeLogicItem).name !== name;\n                                            }\n                                            return true;\n                                        });\n                                        return !list.includes(value);\n                                    },\n                                    errorType: \"relation\"\n                                }\n                            ]}\n                        />\n                    }\n                />\n                <FormUtil.FormRecord\n                    titleLabel=\"Entry\"\n                    jsx={\n                        <FormUtil.Combobox\n                            marginLeft={2}\n                            checkable={origin}\n                            width={270}\n                            isReadOnly={!isModify}\n                            setCheckable={setOrigin}\n                            list={logicNameList.map(item => {\n                                return { value: item, labelText: item };\n                            })}\n                            headBlank\n                            validates={[\n                                {\n                                    checker: (value) => ValidateUtil.checkRequired(value),\n                                    errorType: \"required\"\n                                }\n                            ]}\n                        />\n                    }\n                />\n            </>}\n        />\n        {/* <FormUtil.BorderPanel\n            title=\"element\"\n            isEnable={!isModify}\n            innerJsx={<>\n                <FormUtil.Record\n                    textAlign=\"center\"\n                    jsx={<FormUtil.Switch\n                        label={'Argument'}\n                        width={300}\n                        isUse={false}\n                        callback={() => {\n                        }}\n                    />}\n                />\n            </>}\n        /> */}\n        <FormUtil.BorderPanel\n            title=\"operation\"\n            isEnable={!isModify}\n            innerJsx={<>\n                <FormUtil.ButtonRecord\n                    isCenter\n                    buttons={[\n                        {\n                            label: 'Delete',\n                            callback: () => {\n                                removeSelf();\n                            }\n                        }\n                    ]}\n                />\n                {/* 並び順入れ替えボタン */}\n                {LogicElementUtil.getSwapButtons(node, invalidate)}\n            </>}\n        />\n    </>);\n}\n\nexport default EditorSeedItem;","import { useContext } from \"react\";\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\nimport { FactoryTreeContext as LogicTreeContext } from \"../../logicMainteTab\";\nimport LogicElementUtil from \"../../util/logicElementUtil\";\nimport LogicUtil from \"../../util/logicUtil\";\n\nconst EditorThumbnailMng = () => {\n    const { node, setFocusNode, invalidate } = useContext(LogicTreeContext);\n    const mng = (node.data as LogicUtil.WrapElement).data as LogicUtil.NodeThumnailManager;\n\n    return (<>\n        <FormUtil.BorderPanel\n            title=\"operation\"\n            innerJsx={<FormUtil.ButtonRecord\n                isCenter\n                buttons={[\n                    {\n                        label: 'Add Thumbnail',\n                        callback: () => {\n                            const newWrap: LogicUtil.WrapElement = {\n                                type: 'thumbnail-item',\n                                data: null\n                            }\n                            const newNode = LogicElementUtil.addChild(newWrap, node);\n                            setFocusNode(newNode);\n                        }\n                    }\n                ]}\n            />}\n        />\n    </>);\n}\n\nexport default EditorThumbnailMng;","import { useContext, useEffect, useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport CanvasUtil from \"../../../../../utils/canvasUtil\";\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\nimport TreeUtil from \"../../../../../utils/treeUtil\";\nimport Particle from \"../../../../graphic/particle\";\nimport PreviewUtil from \"../../../preview/previewUtil\";\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\nimport LogicElementUtil from \"../../util/logicElementUtil\";\nimport LogicUtil from \"../../util/logicUtil\";\nimport ModifyOperations from \"../common/modifyOperations\";\n\nconst WND_SIZE = 100;\n\nconst EditorThumbnailItem = () => {\n    const { rootData, node, removeSelf, setModify, isModify, invalidate } = useContext(FactoryTreeContext);\n    const wrap = node.data as LogicUtil.WrapElement;\n    const data = wrap.data as LogicUtil.NodeThumbnailItem;\n\n\n    const seedWrap = node.parent?.parent?.data as LogicUtil.WrapElement;\n    const sampleMng = LogicElementUtil.getInnerWrap(seedWrap, 'sample-mng')?.data as LogicUtil.NodeSampleManager;\n    const samples = sampleMng.samples.map(wrap => wrap.data as LogicUtil.NodeSampleItem);\n\n    const [name, setName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    const [frame, setFrame] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    const [urls, setUrls] = useState<string[]>([]);\n\n    /** 既存のパラメータ名を取得（重複チェックに使用） */\n    const reservedList = useMemo(() => {\n        const owner = (node.parent?.parent?.data as LogicUtil.WrapElement).data;\n        return LogicElementUtil.getParamNameList(owner);\n    }, [node]);\n\n    const mappingForm = () => {\n        const param = wrap.data as LogicUtil.NodeThumbnailItem;\n        setName({ ...name, value: param.name });\n        setFrame({ ...frame, value: param.frame.toString() });\n    };\n\n    useEffect(() => {\n        if (wrap.data == null) {\n            setModify(true);\n        } else {\n            mappingForm();\n            setTimeout(() => {\n                const urls: string[] = [];\n                samples.forEach((sample, i) => {\n                    urls.push(getThumbnailURL(data.frame, i));\n                });\n                setUrls(urls);\n            }, 1);\n        }\n    }, [node]);\n\n    const getSeedValueMap = (sampleNo: number): PreviewUtil.ValueMap[] => {\n        const argMng = LogicElementUtil.getInnerWrap(seedWrap, 'interface-mng', 'seedarg-mng')?.data as LogicUtil.NodeSeedArgManager;\n        const sendMng = LogicElementUtil.getInnerWrap(seedWrap, 'interface-mng', 'seedsend-mng')?.data as LogicUtil.NodeSeedSendManager;\n\n        const argMap: PreviewUtil.ValueMap[] = argMng.args.map((arg, i) => {\n            const name = (arg.data as LogicUtil.NodeSeedArgItem).name;\n            const value = samples[sampleNo].values[i];\n            return { name, value }\n        });\n        const sendParams = sendMng.params.map(send => send.data as LogicUtil.NodeParamItem);\n        return sendParams.map(item => {\n            return { name: item.name, value: PreviewUtil.convertParamsToValue(item.name, sendParams, argMap) ?? 0 }\n        });\n    }\n\n    const getThumbnailURL = (targetFrame: number, sampleNo: number) => {\n        console.log('create start!');\n        const owner: Particle.Instance[] = [];\n\n        let frameCnt = 0;\n        do {\n            if (frameCnt === 0) {\n                const seed = (node.parent?.parent?.data as LogicUtil.WrapElement).data as LogicUtil.NodeSeedItem;\n                const logicManager = (rootData.data as LogicUtil.NodeRoot).logicMng.data as LogicUtil.NodeLogicManager;\n                const logic = logicManager.defs.find(logic => (logic.data as LogicUtil.NodeLogicItem).name === seed.entry);\n                if (logic == undefined) break;\n\n                const sendValueMapList = getSeedValueMap(sampleNo);\n                owner.push(new Particle.Instance(\n                    PreviewUtil.buildLogicProps(owner, logic.data, rootData, sendValueMapList))\n                );\n            }\n\n            if (frameCnt === targetFrame) {\n                return CanvasUtil.createURL(550, 550, (ctx) => {\n\n                    // パーティクルの描画\n                    owner.forEach(par => {\n                        par.draw(ctx);\n                    });\n                    ctx.save();\n                });\n            }\n\n            // パーティクルの更新\n            for (let i = owner.length - 1; i >= 0; i--) {\n                const particle = owner[i];\n\n                particle.update();\n            }\n\n            // 死滅したパーティクルの削除\n            for (let i = owner.length - 1; i >= 0; i--) {\n                const particle = owner[i];\n                if (!particle.isLive) {\n                    owner.splice(i, 1);\n                }\n            }\n\n            if (frameCnt > 500 || owner.length > 3000) break;\n            frameCnt++;\n        } while (owner.length > 0);\n        return '';\n    }\n\n    const pictureJsxList = useMemo(() => {\n        const sampleMng = LogicElementUtil.getInnerWrap((node.parent?.parent as TreeUtil.ElementNode).data, 'sample-mng')?.data as LogicUtil.NodeSampleManager;\n        return sampleMng.samples.map((wrap, i) => {\n            const sample = wrap.data as LogicUtil.NodeSampleItem;\n\n            const url = urls[i];\n            const imgJsx = url == undefined ? <></> : <_IMG src={urls[i]} />;\n            return (\n                <_SampleDiv key={i}>-\n                    <_SampleName>{sample.name}</_SampleName>\n                    <_CanvasDiv>\n                        {imgJsx}\n                    </_CanvasDiv>\n                </_SampleDiv>\n            );\n        });\n    }, [node, urls]);\n\n    return (<>\n        <ModifyOperations.Component\n            mappingForm={mappingForm}\n            checkableFields={[name, frame]}\n            firstRegist={() => {\n                const param: LogicUtil.NodeThumbnailItem = {\n                    name: name.value,\n                    frame: Number(frame.value),\n                };\n                wrap.data = param;\n            }}\n            modifyRegist={() => {\n                const param = wrap.data as LogicUtil.NodeThumbnailItem;\n                param.name = name.value;\n                param.frame = Number(frame.value);\n                wrap.data = param;\n            }}\n        />\n        <FormUtil.BorderPanel\n            title=\"param\"\n            innerJsx={<>\n                <FormUtil.FormRecord\n                    titleLabel=\"Name\"\n                    jsx={\n                        <FormUtil.TextField\n                            width={200}\n                            isReadOnly={!isModify}\n                            checkable={name}\n                            setCheckable={setName}\n                            validates={[\n                                {\n                                    checker: (value) => ValidateUtil.checkRequired(value),\n                                    errorType: \"required\"\n                                },\n                                {\n                                    checker: (value) => ValidateUtil.checkStringLength(value, 1, 16),\n                                    errorType: \"length\"\n                                },\n                                {\n                                    checker: (value) => LogicUtil.checkFieldName(value),\n                                    errorType: \"value\"\n                                },\n                                // {\n                                //     checker: (value) => {\n                                //         const list = logicNameList.filter(name => {\n                                //             // 自分自身のロジック名を除外\n                                //             if (wrap.data != null) {\n                                //                 return (wrap.data as LogicUtil.NodeLogicItem).name !== name;\n                                //             }\n                                //             return true;\n                                //         });\n                                //         return !list.includes(value);\n                                //     },\n                                //     errorType: \"relation\"\n                                // }\n                            ]}\n                        />\n                    }\n                />\n                <FormUtil.FormRecord\n                    titleLabel=\"Frame\"\n                    jsx={\n                        <FormUtil.TextField\n                            width={100}\n                            isReadOnly={!isModify}\n                            isNumber\n                            checkable={frame}\n                            setCheckable={setFrame}\n                            validates={[\n                                {\n                                    checker: (value) => ValidateUtil.checkRequired(value),\n                                    errorType: \"required\"\n                                }\n                            ]}\n                        />\n                    }\n                />\n            </>}\n        />\n        <FormUtil.BorderPanel\n            title=\"preview\"\n            isEnable={!isModify}\n            innerJsx={<>\n                {pictureJsxList}\n            </>}\n        />\n        <FormUtil.BorderPanel\n            title=\"operation\"\n            isEnable={!isModify}\n            innerJsx={<>\n                <FormUtil.ButtonRecord\n                    isCenter\n                    buttons={[\n                        {\n                            label: 'Delete',\n                            isEnable: !isModify,\n                            callback: () => {\n                                removeSelf();\n                            }\n                        }\n                    ]}\n                />\n                {/* 並び順入れ替えボタン */}\n                {LogicElementUtil.getSwapButtons(node, invalidate)}\n            </>}\n        />\n    </>);\n}\n\nexport default EditorThumbnailItem;\n\nconst _SampleDiv = styled.div<{}>`\n    display: inline-block;\n    /* width: ${WND_SIZE}px;\n    height: ${WND_SIZE}px; */\n    margin: 0 0 0 5px;\n`;\nconst _SampleName = styled.div<{}>`\n    display: block;\n    color: #09056c;\n    font-size: 14px;\n    font-weight: 600;\n    font-style: italic;\n    background-color: #ffffff5e;\n`;\nconst _CanvasDiv = styled.div<{}>`\n    display: inline-block;\n    width: ${WND_SIZE}px;\n    height: ${WND_SIZE}px;\n    background-color: #020202df;\n    border: solid 2px #ca0000;\n    box-sizing: border-box;\n`;\n\nconst _IMG = styled.img`\n    display: inline-block;\n    position: relative;\n    width: 100%;\n    height: 100%;\n`;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ModifyOperations from \"../common/modifyOperations\";\r\nimport LogicTemplateDialog from \"../../dialog/logicTemplateDialog\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\n\r\nconst EditorSampleItem = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n    const { removeSelf, node, rootData, invalidate, setModify, isModify } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    const [name, setName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [paramForms, setParamForms] = useState<FormUtil.CheckableValue[]>([]);\r\n\r\n    const mappingForm = () => {\r\n        const param = wrap.data as LogicUtil.NodeSampleItem;\r\n        setName({ ...name, value: param.name });\r\n        setParamForms(param.values.map(value => {\r\n            return { value: value.toString(), errors: [] };\r\n        }));\r\n    };\r\n\r\n    /** 既存のサンプル名を取得（重複チェックに使用） */\r\n    // const sampleNameList = useMemo(() => {\r\n    //     const mng = (node.parent?.data as LogicUtil.WrapElement).data;\r\n    //     return LogicElementUtil.getSeedNameList(mng);\r\n    // }, [node]);\r\n\r\n    const argInfoList: LogicUtil.NodeSeedArgItem[] = useMemo(() => {\r\n        const argMng = LogicElementUtil.getInnerWrap((node.parent?.parent as TreeUtil.ElementNode).data, 'interface-mng', 'seedarg-mng');\r\n        if (argMng != null) {\r\n            return (argMng.data as LogicUtil.NodeSeedArgManager).\r\n                args.map(arg => {\r\n                    return arg.data as LogicUtil.NodeSeedArgItem;\r\n                });\r\n        } else throw new Error('argMng is undefined.');\r\n    }, [node]);\r\n\r\n    useEffect(() => {\r\n        if (wrap.data == null) {\r\n            setParamForms(argInfoList.map(arg => {\r\n                let defval = '';\r\n                if (arg.defval != undefined) defval = arg.defval.toString();\r\n                return { value: defval, errors: [] };\r\n            }));\r\n            setModify(true);\r\n        } else {\r\n            mappingForm();\r\n        }\r\n    }, [node]);\r\n\r\n    const formList = useMemo(() => {\r\n        return paramForms.map((paramForm, i) => {\r\n            const arg = argInfoList[i];\r\n            return <FormUtil.FormRecord key={i}\r\n                titleLabel={arg.name}\r\n                jsx={\r\n                    <FormUtil.TextField\r\n                        width={150}\r\n                        isReadOnly={!isModify}\r\n                        checkable={paramForm}\r\n                        setCheckable={(checkable) => {\r\n                            paramForms[i] = checkable;\r\n                            setParamForms(paramForms.slice());\r\n                        }}\r\n                        isNumber\r\n                        step={arg.step}\r\n                        validates={[\r\n                            {\r\n                                checker: (value) => ValidateUtil.checkRequired(value),\r\n                                errorType: \"required\"\r\n                            },\r\n                            {\r\n                                checker: (value) => ValidateUtil.checkNumberRange(value, arg.min, arg.max),\r\n                                errorType: \"value\"\r\n                            },\r\n                        ]}\r\n                    />\r\n                }\r\n            />\r\n\r\n        });\r\n    }, [paramForms, isModify]);\r\n\r\n    return (<>\r\n        <ModifyOperations.Component\r\n            mappingForm={mappingForm}\r\n            checkableFields={[name].concat(paramForms)}\r\n            firstRegist={() => {\r\n                const element: LogicUtil.NodeSampleItem = {\r\n                    name: name.value,\r\n                    values: []\r\n                };\r\n                paramForms.forEach((form, i) => {\r\n                    element.values[i] = Number(form.value);\r\n                });\r\n                wrap.data = element;\r\n\r\n                invalidate();\r\n                setStore({ ...store });\r\n            }}\r\n            modifyRegist={() => {\r\n                const param = wrap.data as LogicUtil.NodeSampleItem;\r\n                param.name = name.value;\r\n                paramForms.forEach((form, i) => {\r\n                    param.values[i] = Number(form.value);\r\n                });\r\n                wrap.data = param;\r\n            }}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"param\"\r\n            innerJsx={<>\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Name\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={250}\r\n                            isReadOnly={!isModify}\r\n                            checkable={name}\r\n                            setCheckable={setName}\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkStringLength(value, 1, 16),\r\n                                    errorType: \"length\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => LogicUtil.checkFieldName(value),\r\n                                    errorType: \"value\"\r\n                                },\r\n                                // {\r\n                                //     checker: (value) => {\r\n                                //         const list = sampleNameList.filter(name => {\r\n                                //             // 自分自身のロジック名を除外\r\n                                //             if (wrap.data != null) {\r\n                                //                 return (wrap.data as LogicUtil.NodeLogicItem).name !== name;\r\n                                //             }\r\n                                //             return true;\r\n                                //         });\r\n                                //         return !list.includes(value);\r\n                                //     },\r\n                                //     errorType: \"relation\"\r\n                                // }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n                {formList}\r\n            </>}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Delete',\r\n                            callback: () => {\r\n                                removeSelf();\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                {/* 並び順入れ替えボタン */}\r\n                {LogicElementUtil.getSwapButtons(node, invalidate)}\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorSampleItem;","import { useContext } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorSampleMng = () => {\r\n    const {node, setFocusNode} = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Add Sample',\r\n                        callback: () => {\r\n                            const itemWrap: LogicUtil.WrapElement = {\r\n                                type: 'sample-item',\r\n                                data: null\r\n                            };\r\n                            (wrap.data as LogicUtil.NodeSampleManager).samples.push(itemWrap);\r\n                            const newNode = TreeUtil.createNode(itemWrap, node);\r\n                            node.children.push(newNode);\r\n                            setFocusNode(newNode);\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorSampleMng;","import { useContext, useMemo } from \"react\";\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\nimport TreeUtil from \"../../../../../utils/treeUtil\";\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\nimport LogicTemplateDialog from \"../../dialog/logicTemplateDialog\";\nimport SendTemplateDialog from \"../../dialog/sendTemplateDialog\";\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\nimport LogicElementUtil from \"../../util/logicElementUtil\";\nimport LogicUtil from \"../../util/logicUtil\";\n\nconst EditorInterfaceManager = () => {\n    const { store, setStore } = useContext(GlobalContext);\n    const { rootData, node, setFocusNode, invalidate } = useContext(FactoryTreeContext);\n    const wrap = node.data as LogicUtil.WrapElement;\n\n    return (<>\n        <FormUtil.BorderPanel\n            title=\"operation\"\n            innerJsx={<FormUtil.ButtonRecord\n                isCenter\n                buttons={[\n                    {\n                        label: 'Initialize Params',\n                        callback: () => {\n                            invalidate();\n                        }\n                    }\n                ]}\n            />}\n        />\n    </>);\n}\n\nexport default EditorInterfaceManager;","import { useContext } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorSeedArgMng = () => {\r\n    const {node, setFocusNode} = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Add Argument',\r\n                        callback: () => {\r\n                            const itemWrap: LogicUtil.WrapElement = {\r\n                                type: 'seedarg-item',\r\n                                data: null\r\n                            };\r\n                            (wrap.data as LogicUtil.NodeSeedArgManager).args.push(itemWrap);\r\n                            const newNode = TreeUtil.createNode(itemWrap, node);\r\n                            node.children.push(newNode);\r\n                            setFocusNode(newNode);\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorSeedArgMng;","import { useContext, useEffect, useMemo, useState } from \"react\";\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\nimport TreeUtil from \"../../../../../utils/treeUtil\";\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\nimport LogicElementUtil from \"../../util/logicElementUtil\";\nimport LogicUtil from \"../../util/logicUtil\";\nimport ModifyOperations from \"../common/modifyOperations\";\n\nconst EditorSeedArgItem = () => {\n    const { node, removeSelf, setModify, isModify, invalidate } = useContext(FactoryTreeContext);\n    const wrap = node.data as LogicUtil.WrapElement;\n\n    const [name, setName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    const [min, setMin] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    const [max, setMax] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    const [step, setStep] = useState<FormUtil.CheckableValue>({ value: '1', errors: [] });\n    const [defval, setDefval] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    // const [argType, setArgType] = useState<FormUtil.CheckableValue>({ value: 'number', errors: [] });\n\n    /** 既存のパラメータ名を取得（重複チェックに使用） */\n    const reservedList = useMemo(() => {\n        const owner = (node.parent?.parent?.data as LogicUtil.WrapElement).data;\n        return LogicElementUtil.getParamNameList(owner);\n    }, [node]);\n\n    const mappingForm = () => {\n        const param = wrap.data as LogicUtil.NodeSeedArgItem;\n        setName({ ...name, value: param.name });\n        setMin({ ...min, value: param.min.toString() });\n        setMax({ ...max, value: param.max.toString() });\n        setStep({ ...step, value: param.step.toString() });\n        setDefval({ ...defval, value: param.defval == undefined ? '' : param.defval.toString() });\n        // setArgType({ ...argType, value: param.valueType });\n    };\n\n    useEffect(() => {\n        if (wrap.data == null) {\n            setModify(true);\n        } else {\n            mappingForm();\n        }\n    }, [node]);\n\n    return (<>\n        <ModifyOperations.Component\n            mappingForm={mappingForm}\n            checkableFields={[name, min, max, step, defval]}\n            firstRegist={() => {\n                const param: LogicUtil.NodeSeedArgItem = {\n                    name: name.value,\n                    min: Number(min.value),\n                    max: Number(max.value),\n                    step: Number(step.value),\n                    defval: Number(defval.value === '' ? undefined : defval.value),\n                    // valueType: argType.value as LogicUtil.ArgumentType\n                };\n                wrap.data = param;\n                // LogicElementUtil.syncArgumentAdd(node.parent?.parent as TreeUtil.ElementNode, name.value);\n            }}\n            modifyRegist={() => {\n                const param = wrap.data as LogicUtil.NodeSeedArgItem;\n                const prevName = param.name;\n                param.name = name.value;\n                param.min = Number(min.value);\n                param.max = Number(max.value);\n                param.step = Number(step.value);\n                param.defval = Number(defval.value === '' ? undefined : defval.value);\n                // param.valueType = argType.value as LogicUtil.ArgumentType;\n                wrap.data = param;\n\n                if (prevName !== name.value) {\n                    // LogicElementUtil.syncArgumentName(node.parent?.parent as TreeUtil.ElementNode, prevName, name.value);\n                }\n            }}\n        />\n        <FormUtil.BorderPanel\n            title=\"param\"\n            innerJsx={<>\n                <FormUtil.FormRecord\n                    titleLabel=\"Name\"\n                    jsx={\n                        <FormUtil.TextField\n                            width={200}\n                            isReadOnly={!isModify}\n                            checkable={name}\n                            setCheckable={setName}\n                            validates={[\n                                {\n                                    checker: (value) => ValidateUtil.checkRequired(value),\n                                    errorType: \"required\"\n                                },\n                                {\n                                    checker: (value) => ValidateUtil.checkStringLength(value, 1, 16),\n                                    errorType: \"length\"\n                                },\n                                {\n                                    checker: (value) => LogicUtil.checkFieldName(value),\n                                    errorType: \"value\"\n                                },\n                                // {\n                                //     checker: (value) => {\n                                //         const list = reservedList.filter(name => {\n                                //             // 自分自身のパラメータ名を除外\n                                //             if (wrap.data != null) {\n                                //                 return (wrap.data as LogicUtil.NodeArgumentItem).name !== name;\n                                //             }\n                                //             return true;\n                                //         });\n                                //         return !list.includes(value);\n                                //     },\n                                //     errorType: \"relation\"\n                                // }\n                            ]}\n                        />\n                    }\n                />\n                <FormUtil.FormRecord\n                    titleLabel=\"Min\"\n                    jsx={\n                        <FormUtil.TextField\n                            width={100}\n                            isReadOnly={!isModify}\n                            checkable={min}\n                            setCheckable={setMin}\n                            isNumber\n                            dependency={[max]}\n                            validates={[\n                                {\n                                    checker: (value) => ValidateUtil.checkRequired(value),\n                                    errorType: \"required\"\n                                },\n                                {\n                                    checker: (value) => Number(value) < Number(max.value),\n                                    errorType: \"relation\"\n                                }\n                            ]}\n                        />\n                    }\n                />\n                <FormUtil.FormRecord\n                    titleLabel=\"Max\"\n                    jsx={\n                        <FormUtil.TextField\n                            width={100}\n                            isReadOnly={!isModify}\n                            checkable={max}\n                            setCheckable={setMax}\n                            isNumber\n                            dependency={[min]}\n                            validates={[\n                                {\n                                    checker: (value) => ValidateUtil.checkRequired(value),\n                                    errorType: \"required\"\n                                },\n                                {\n                                    checker: (value) => Number(value) > Number(min.value),\n                                    errorType: \"relation\"\n                                }\n                            ]}\n                        />\n                    }\n                />\n                <FormUtil.FormRecord\n                    titleLabel=\"Step\"\n                    jsx={\n                        <FormUtil.TextField\n                            width={100}\n                            isReadOnly={!isModify}\n                            checkable={step}\n                            setCheckable={setStep}\n                            isNumber\n                            validates={[\n                                {\n                                    checker: (value) => ValidateUtil.checkRequired(value),\n                                    errorType: \"required\"\n                                }\n                            ]}\n                        />\n                    }\n                />\n                <FormUtil.FormRecord\n                    titleLabel=\"Default\"\n                    jsx={\n                        <FormUtil.TextField\n                            width={100}\n                            isReadOnly={!isModify}\n                            checkable={defval}\n                            setCheckable={setDefval}\n                            isNumber\n                        />\n                    }\n                />\n                {/* <FormUtil.FormRecord\n                    titleLabel=\"Type\"\n                    jsx={\n                        <FormUtil.Combobox\n                            checkable={argType}\n                            setCheckable={setArgType}\n                            list={LogicUtil.ArgTypes.map(type => {\n                                return { value: type, labelText: type, isDisabled: type === 'color' }\n                            })}\n                            headBlank\n                            width={200}\n                            isReadOnly={!isModify}\n                            validates={\n                                [\n                                    {\n                                        checker: (value) => ValidateUtil.checkRequired(value),\n                                        errorType: \"required\"\n                                    }\n                                ]\n                            }\n                        />\n                    }\n                /> */}\n            </>}\n        />\n        <FormUtil.BorderPanel\n            title=\"operation\"\n            isEnable={!isModify}\n            innerJsx={<>\n                <FormUtil.ButtonRecord\n                    isCenter\n                    buttons={[\n                        {\n                            label: 'Delete',\n                            isEnable: !isModify,\n                            callback: () => {\n                                // LogicElementUtil.syncArgumentDel(node.parent?.parent as TreeUtil.ElementNode, name.value);\n                                removeSelf();\n                            }\n                        }\n                    ]}\n                />\n                {/* 並び順入れ替えボタン */}\n                {LogicElementUtil.getSwapButtons(node, invalidate)}\n            </>}\n        />\n    </>);\n}\n\nexport default EditorSeedArgItem;","import { useContext, useMemo } from \"react\";\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\nimport TreeUtil from \"../../../../../utils/treeUtil\";\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\nimport LogicTemplateDialog from \"../../dialog/logicTemplateDialog\";\nimport SendTemplateDialog from \"../../dialog/sendTemplateDialog\";\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\nimport LogicElementUtil from \"../../util/logicElementUtil\";\nimport LogicUtil from \"../../util/logicUtil\";\n\nconst EditorSeedSendMng = () => {\n    const { store, setStore } = useContext(GlobalContext);\n    const { rootData, node, setFocusNode, invalidate } = useContext(FactoryTreeContext);\n    const wrap = node.data as LogicUtil.WrapElement;\n\n    // const getSendParamList = (): string[] => {\n    //     const connector = (node.parent?.data as LogicUtil.WrapElement).data as LogicUtil.NodeInheritConnector;\n    //     const isCreate = connector.method === 'create';\n    //     let targetWrap: LogicUtil.WrapElement | null = null;\n    //     if (!isCreate) {\n    //         const rootNode = rootData.data as LogicUtil.NodeRoot;\n    //         const inheritMng = rootNode.logicMng.data as LogicUtil.NodeLogicManager;\n    //         const dependItem = inheritMng.defs.find(wrap => {\n    //             return (wrap.data as LogicUtil.NodeLogicItem).name === connector.depend;\n    //         });\n    //         if (dependItem != undefined) targetWrap = dependItem;\n    //     } else {\n    //         targetWrap = (node.parent?.children[node.parent?.children.length - 1].data as LogicUtil.WrapElement)\n    //     }\n    //     if (targetWrap != null) {\n    //         const argWrap = (targetWrap.data as LogicUtil.NodeLogicItem).mngs[0];\n    //         if (argWrap.type === 'argument-mng') {\n    //             return (argWrap.data as LogicUtil.NodeArgumentManager).args.map(arg => {\n    //                 return (arg.data as LogicUtil.NodeArgumentItem).name;\n    //             });\n    //         }\n    //     }\n    //     return [];\n    // }\n\n    // const update = () => {\n    //     const sendParamList = getSendParamList();\n    //     const curSize = node.children.length;\n    //     const params = (wrap.data as LogicUtil.NodeParamManager).params;\n    //     // 不要なパラメータを削除\n    //     for (let i = curSize - 1; i >= 0; i--) {\n    //         const name = (params[i].data as LogicUtil.NodeParamItem).name;\n    //         if (!sendParamList.includes(name)) {\n    //             node.children.splice(i, 1);\n    //             params.splice(i, 1);\n    //         }\n    //     }\n    //     // 必要な存在しないパラメータを追加\n    //     const curParamList = params.map(param => {\n    //         return (param.data as LogicUtil.NodeParamItem).name;\n    //     });\n    //     sendParamList.forEach(param => {\n    //         if (!curParamList.includes(param)) {\n    //             const paramWrap = LogicElementUtil.createParamWrap('send-item',\n    //                 { name: param, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] }\n    //             );\n    //             params.push(paramWrap);\n    //             node.children.push(TreeUtil.createNode(paramWrap, node));\n    //         }\n    //     });\n    // }\n\n    return (<>\n    </>);\n}\n\nexport default EditorSeedSendMng;","import styled, { css } from \"styled-components\";\nimport Styles from \"../../../../base/design/styles\";\nimport TreeUtil from \"../../../../utils/treeUtil\";\nimport FactDetArgumentMng from \"../detail/logic/editorArgumentMng\";\nimport EditorArgumentItem from \"../detail/logic/editorArgumentItem\";\nimport FactDetSeedMng from \"../detail/seed/editorSeedMng\";\nimport EditorLogicMng from \"../detail/logic/editorLogicMng\";\nimport EditorLogicItem from \"../detail/logic/editorLogicItem\";\nimport EditorParamItem from \"../detail/logic/editorParamItem\";\nimport FactDetBehiviorMng from \"../detail/logic/editorBehiviorMng\";\nimport EditorVisualMng from \"../detail/logic/editorVisualMng\";\nimport ValidateUtil from \"../../../../utils/form/validateUtil\";\nimport EditorInheritConnMng from \"../detail/logic/editorInheritConnMng\";\nimport EditorInheritConnector from \"../detail/logic/editorInheritConnector\";\nimport EditorSendManager from \"../detail/logic/editorSendManager\";\nimport EditorFieldMng from \"../detail/logic/editorFieldMng\";\nimport EditorExtendMng from \"../detail/logic/editorExtendMng\";\nimport EditorSeedItem from \"../detail/seed/editorSeedItem\";\nimport FormUtil from \"../../../../utils/form/formUtiil\";\nimport LogicElementUtil from \"./logicElementUtil\";\nimport EditorThumbnailMng from \"../detail/seed/editorThumbnailMng\";\nimport EditorThumbnailItem from \"../detail/seed/editorThumbnailItem\";\nimport EditorSampleItem from \"../detail/seed/editorSampleItem\";\nimport EditorSampleMng from \"../detail/seed/editorSampleMng\";\nimport EditorInterfaceManager from \"../detail/seed/editorInterfaceManager\";\nimport EditorSeedArgMng from \"../detail/seed/editorSeedArgMng\";\nimport EditorSeedArgItem from \"../detail/seed/editorSeedArgItem\";\nimport EditorSeedSendMng from \"../detail/seed/editorSeedSendMng\";\n\nnamespace LogicUtil {\n\n    export type DetailArgs = {\n        rootData: LogicUtil.WrapElement;\n        node: TreeUtil.ElementNode;\n        setFocusNode: (node: TreeUtil.ElementNode) => void;\n        invalidate: () => void;\n        isModify: boolean;\n        setModify: (isModify: boolean) => void;\n        setRootData: React.Dispatch<React.SetStateAction<WrapElement>>;\n        removeSelf: () => void;\n    }\n\n    /**\n     * 変数名チェック\n     * @param str 検証する文字列\n     * @returns 判定結果\n     */\n    export const checkFieldName = (str: string) => {\n        // 1文字目が数値でないこと\n        const isNoHeadNumber = !['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].\n            includes(str.substring(0, 1));\n        const list = '0123456789abcdefghijklmnopqrstuvwxyz_';\n        return isNoHeadNumber && ValidateUtil.checkIncludesChars(str, list);\n    }\n\n    export type NodeType =\n        'root' |\n        'seed-mng' |\n        'logic-mng' |\n        'seed-item' |\n        'logic-item' |\n        'argument-mng' |\n        'argument-item' |\n        'field-mng' |\n        'field-item' |\n        'visual-mng' |\n        'behavior-mng' |\n        'inhfld-mng' |\n        'extend-mng' |\n        'inherit-mng' |\n        'connector' |\n        'inherit-logic' |\n        'send-mng' |\n        'send-item' |\n        'param-item' |\n        'condition-item' |\n        'interface-mng' |\n        'sample-mng' |\n        'sample-item' |\n        'thumbnail-mng' |\n        'thumbnail-mng' |\n        'thumbnail-item' |\n        'seedarg-mng' |\n        'seedsend-mng' |\n        'seedarg-item' |\n        'seedsend-item'\n        ;\n\n    export const ArgTypes = ['number', 'color'] as const;\n    export type ArgumentType = typeof ArgTypes[number];\n\n\n    export const ParamInputTypes = ['direct', 'constant', 'argument', 'self', 'field'] as const;\n    export type ParamInputType = typeof ParamInputTypes[number];\n\n    export type ParamProps = {\n        type: ParamInputType;\n        value: string;\n    }\n\n    export type WrapElement = {\n        type: NodeType;\n        data: any;\n    }\n\n    export type NodeRoot = {\n        seedMng: WrapElement;\n        logicMng: WrapElement;\n    }\n    export type NodeSeedManager = {\n        defs: WrapElement[];\n    }\n    export type NodeLogicManager = {\n        defs: WrapElement[];\n    }\n    export type NodeLogicItem = {\n        name: string;\n        mngs: WrapElement[];\n    }\n    export type NodeInterfaceMng = {\n        mngs: WrapElement[];\n    }\n    export type NodeInheritItem = {\n        mngs: WrapElement[];\n    }\n    export type NodeParamManager = {\n        params: WrapElement[];\n    }\n    export type NodeParamItem = {\n        name: string;\n        formulaItems: string[];\n        values: ParamProps[];\n    }\n\n    export type NodeArgumentItem = {\n        name: string;\n        valueType: ArgumentType;\n    }\n    export type NodeThumbnailItem = {\n        name: string;\n        frame: number;\n    }\n    export type NodeArgumentManager = {\n        args: WrapElement[];\n    }\n    export type NodeFieldManager = {\n        fields: WrapElement[];\n    }\n    export type NodeSampleManager = {\n        samples: WrapElement[];\n    }\n    export type NodeSampleItem = {\n        name: string;\n        values: number[];\n    }\n\n    // export type NodeExtendManager = {\n    //     mngs: WrapElement[];\n    // }\n    export type NodeConnectManager = {\n        inherits: WrapElement[];\n    }\n    export type NodeInheritConnector = {\n        method: InheritMethod;\n        depend: string;\n        id: string;\n        disable?: boolean;\n        mngs: WrapElement[];\n    }\n\n    export type NodeSeedItem = {\n        name: string;\n        entry: string;\n        mngs: WrapElement[];\n    }\n    export type NodeThumnailManager = {\n        items: WrapElement[];\n    }\n    export type NodeSeedArgManager = {\n        args: WrapElement[];\n    }\n    export type NodeSeedSendManager = {\n        params: WrapElement[];\n    }\n    export type NodeSeedArgItem = {\n        name: string;\n        min: number;\n        max: number;\n        step: number;\n        defval: number | undefined;\n    }\n\n    const COLOR_ROOT = '#a1a1a1';\n    const COLOR_METHOD = '#cca67b';\n    const COLOR_MNG = '#37a2bd';\n    const COLOR_LIST = '#b85f5f';\n    const COLOR_ITEM = '#ae628c';\n    const COLOR_DISABLE = '#685b79';\n    const COLOR_PARAM = '#8dae62';\n    const COLOR_FIELD = '#cec256';\n    const COLOR_THUMBNAIL = '#8283be';\n    const COLOR_CONDITION = '#56ce7e';\n\n    export const getNodeDisplayJsx = (node: TreeUtil.ElementNode, isFocus: boolean) => {\n        const wrap = node.data as WrapElement;\n        switch (wrap.type) {\n            case 'root': {\n                return <_Category backgroundColor={COLOR_ROOT}>Library</_Category>;\n            }\n            case 'seed-mng': {\n                return <_Category backgroundColor={COLOR_METHOD}>Seed Manager</_Category>;\n            }\n            case 'logic-mng': {\n                return <_Category backgroundColor={COLOR_METHOD}>Logic Manager</_Category>;\n            }\n            case 'visual-mng': {\n                return <_Category backgroundColor={COLOR_MNG}>Visual</_Category>;\n            }\n            case 'extend-mng': {\n                return <_Category backgroundColor={COLOR_MNG}>Extend</_Category>;\n            }\n            case 'seed-item': {\n                let name = '...';\n                if (wrap.data != null) {\n                    const data = wrap.data as NodeLogicItem;\n                    name = data.name;\n                }\n                return <>\n                    <_Category backgroundColor={COLOR_ITEM}>Seed</_Category>\n                    <_EditableValue>{name}</_EditableValue>\n                </>;\n            }\n            case 'logic-item': {\n                let name = '...';\n                if (wrap.data != null) {\n                    const data = wrap.data as NodeLogicItem;\n                    name = data.name;\n                }\n                return <>\n                    <_Category backgroundColor={COLOR_ITEM}>Logic</_Category>\n                    <_EditableValue>{name}</_EditableValue>\n                </>;\n            }\n            case 'inherit-logic': {\n                return <_Category backgroundColor={COLOR_MNG}>Logic</_Category>;\n            }\n            case 'argument-mng': {\n                return <_Category backgroundColor={COLOR_LIST}>Argument Manager</_Category>;\n            }\n            case 'inhfld-mng':\n            case 'field-mng': {\n                return <_Category backgroundColor={COLOR_LIST}>Field Manager</_Category>;\n            }\n            case 'behavior-mng': {\n                return <_Category backgroundColor={COLOR_MNG}>Behavior</_Category>;\n            }\n            case 'inherit-mng': {\n                return <_Category backgroundColor={COLOR_LIST}>Inherit Manager</_Category>;\n            }\n            case 'connector': {\n                let detailJsx = <span>...</span>;\n                let color = COLOR_ITEM;\n                let isDisable = false;\n                if (wrap.data != null) {\n                    const data = wrap.data as NodeInheritConnector;\n                    detailJsx = <span>{data.id}&nbsp;<_Span color=\"#ffe89ba6\">{data.method}</_Span></span>;\n                    if (data.method === 'depend') {\n                        detailJsx = <span>{data.id}&nbsp;<_Span color=\"#ffe89ba6\">{data.method}:&nbsp;</_Span><_Field>{data.depend}</_Field></span>;\n                    }\n                    if (data.disable ?? false) {\n                        color = COLOR_DISABLE;\n                        isDisable = true;\n                    }\n                }\n                return (<>\n                    <_Category backgroundColor={color} isDisable={isDisable}>Inherit</_Category>\n                    {detailJsx == undefined ? <></> : <_EditableValue>{detailJsx}</_EditableValue>}\n                </>);\n            }\n            // パラメータ要素\n            case 'param-item':\n            case 'seedsend-item':\n            case 'send-item': {\n                const data = wrap.data as NodeParamItem;\n                let result: JSX.Element[] = [];\n                let varCnt = 0;\n                data.formulaItems.forEach((formula, i) => {\n                    let str = <_Signature key={i}>{formula}</_Signature>;\n                    if (formula === 'var') {\n                        const v = data.values[varCnt];\n                        if (v.type !== 'direct') str = <_Field key={i}>{`$\\{${v.value}}`}</_Field>;\n                        else str = <span key={i}>{v.value}</span>;\n                        varCnt++;\n                    }\n                    result.push(str);\n                });\n                return <>\n                    <_Category backgroundColor={COLOR_PARAM}>Param<_Detail>&nbsp;[{data.name}]</_Detail></_Category>\n                    <_EditableValue>{result}</_EditableValue>\n                </>;\n            }\n            // 条件要素\n            case 'condition-item': {\n                const data = wrap.data as NodeParamItem;\n                let result: JSX.Element[] = [];\n                let varCnt = 0;\n                data.formulaItems.forEach((formula, i) => {\n                    let str = <_Signature key={i}>{formula}</_Signature>;\n                    if (formula === 'var') {\n                        const v = data.values[varCnt];\n                        if (v.type !== 'direct') str = <_Field key={i}>{`$\\{${v.value}}`}</_Field>;\n                        else str = <span key={i}>{v.value}</span>;\n                        varCnt++;\n                    }\n                    result.push(str);\n                });\n                return <>\n                    <_Category backgroundColor={COLOR_CONDITION}>Condition<_Detail>&nbsp;[{data.name}]</_Detail></_Category>\n                    <_EditableValue>{result}</_EditableValue>\n                </>;\n            }\n            // 変数要素\n            case 'field-item': {\n                let nameJsx = <span>...</span>;\n                let detailJsx = <span>...</span>;\n                if (wrap.data != null) {\n                    const data = wrap.data as NodeParamItem;\n                    nameJsx = <_Detail>&nbsp;[{data.name}]</_Detail>;\n                    let result: JSX.Element[] = [];\n                    let varCnt = 0;\n                    data.formulaItems.forEach((formula, i) => {\n                        let str = <_Signature key={i}>{formula}</_Signature>;\n                        if (formula === 'var') {\n                            const v = data.values[varCnt];\n                            if (v.type !== 'direct') str = <_Field key={i}>{`$\\{${v.value}}`}</_Field>;\n                            else str = <span key={i}>{v.value}</span>;\n                            varCnt++;\n                        }\n                        result.push(str);\n                    });\n                    detailJsx = <>{result}</>;\n                }\n                return <>\n                    <_Category backgroundColor={COLOR_FIELD}>Field{nameJsx}</_Category>\n                    <_EditableValue>{detailJsx}</_EditableValue>\n                </>;\n            }\n            case 'argument-item': {\n                let detailJsx = <span>...</span>;\n                if (wrap.data != null) {\n                    const data = wrap.data as NodeArgumentItem;\n                    detailJsx = <span>{data.name}<_ValueType>&nbsp;({data.valueType})</_ValueType></span>\n                }\n                return <>\n                    <_Category backgroundColor={COLOR_FIELD}>Argument<_Detail></_Detail></_Category>\n                    <_EditableValue>{detailJsx}</_EditableValue>\n                </>;\n            }\n            case 'send-mng': {\n                return <_Category backgroundColor={COLOR_MNG}>Send</_Category>;\n            }\n            case 'thumbnail-mng': {\n                return <_Category backgroundColor={COLOR_LIST}>Thumnail Manager</_Category>;\n            }\n            case 'thumbnail-item': {\n                let detailJsx = <span>...</span>;\n                if (wrap.data != null) {\n                    const data = wrap.data as NodeThumbnailItem;\n                    detailJsx = <span>{data.name}<_ValueType>&nbsp;({data.frame})</_ValueType></span>\n                }\n                return <>\n                    <_Category backgroundColor={COLOR_THUMBNAIL}>Thumbnail</_Category>\n                    <_EditableValue>{detailJsx}</_EditableValue>\n                </>;\n            }\n            case 'sample-mng': {\n                return <_Category backgroundColor={COLOR_LIST}>Sample Manager</_Category>;\n            }\n            case 'sample-item': {\n                let name = '...';\n                if (wrap.data != null) {\n                    const data = wrap.data as NodeSampleItem;\n                    name = data.name;\n                }\n                return <>\n                    <_Category backgroundColor={COLOR_ITEM}>Sample</_Category>\n                    <_EditableValue>{name}</_EditableValue>\n                </>;\n            }\n            case 'interface-mng': {\n                return <_Category backgroundColor={COLOR_MNG}>Interface</_Category>;\n            }\n            case 'seedarg-mng': {\n                return <_Category backgroundColor={COLOR_LIST}>Argument Manager</_Category>;\n            }\n            case 'seedarg-item': {\n                let detailJsx = <span>...</span>;\n                if (wrap.data != null) {\n                    const data = wrap.data as NodeSeedArgItem;\n                    detailJsx = <span>{data.name}<_ValueType>&nbsp;({data.min}～{data.max})</_ValueType></span>\n                }\n                return <>\n                    <_Category backgroundColor={COLOR_FIELD}>Argument<_Detail></_Detail></_Category>\n                    <_EditableValue>{detailJsx}</_EditableValue>\n                </>;\n            }\n            case 'seedsend-mng': {\n                return <_Category backgroundColor={COLOR_MNG}>Send</_Category>;\n            }\n        }\n        return <_Category backgroundColor={'#ffffff'}>XXXXX</_Category>;\n    }\n\n    export const getTypeName = (node: TreeUtil.ElementNode | null) => {\n        if (node == null) return '';\n        const type = (node.data as WrapElement).type;\n        switch (type) {\n            case 'root': return 'Root';\n            case 'seed-mng': return 'Seed Manager';\n            case 'logic-mng': return 'Logic Manager';\n            case 'seed-item': return 'Seed Item';\n            case 'logic-item': return 'Logic Item';\n            case 'argument-mng': return 'Argument Manager';\n            case 'inhfld-mng':\n            case 'field-mng': return 'Field Manager';\n            case 'field-item': return 'Field Item';\n            case 'visual-mng': return 'Visual Manager';\n            case 'argument-item': return 'Argument Item';\n            case 'extend-mng': return 'Extend Manager';\n            case 'behavior-mng': return 'Behavior Manager';\n            case 'inherit-mng': return 'Inherit Manager';\n            case 'connector': return 'Inherit Connector';\n            case 'inherit-logic': return 'Inherit Logic';\n            case 'send-mng': return 'Send Manager';\n            case 'send-item': return 'Send Item';\n            case 'param-item': return 'Param Item';\n            case 'condition-item': return 'Condition Item';\n            case 'interface-mng': return 'Interface Manager';\n            case 'thumbnail-mng': return 'Thumbnail Manager';\n            case 'thumbnail-item': return 'Thumbnail Item';\n            case 'sample-mng': return 'Sample Manager';\n            case 'sample-item': return 'Sample Item';\n            case 'seedarg-mng': return 'Argument Manager';\n            case 'seedsend-mng': return 'Send';\n        }\n    }\n\n    export const getDetailComponent = (node: TreeUtil.ElementNode | null) => {\n        if (node == null) return <></>;\n        const type = (node.data as WrapElement).type;\n        switch (type) {\n            case 'root': return <></>;\n            case 'seed-mng': return <FactDetSeedMng />;\n            case 'logic-mng': return <EditorLogicMng />;\n            case 'seed-item': return <EditorSeedItem />;\n            case 'logic-item': return <EditorLogicItem />;\n            case 'argument-mng': return <FactDetArgumentMng />;\n            case 'argument-item': return <EditorArgumentItem />;\n            case 'inhfld-mng':\n            case 'field-mng': return <EditorFieldMng />;\n            case 'visual-mng': return <EditorVisualMng />;\n            case 'extend-mng': return <EditorExtendMng />;\n            case 'behavior-mng': return <FactDetBehiviorMng />;\n            case 'inherit-mng': return <EditorInheritConnMng />;\n            case 'connector': return <EditorInheritConnector />;\n            case 'inherit-logic': return <EditorLogicItem />;\n            case 'send-mng': return <EditorSendManager />;\n            case 'field-item':\n            case 'param-item':\n            case 'condition-item':\n            case 'seedsend-item':\n            case 'send-item': return <EditorParamItem />;\n            case 'interface-mng': return <EditorInterfaceManager />;\n            case 'sample-mng': return <EditorSampleMng />;\n            case 'sample-item': return <EditorSampleItem />;\n            case 'thumbnail-mng': return <EditorThumbnailMng />;\n            case 'thumbnail-item': return <EditorThumbnailItem />;\n            case 'seedarg-mng': return <EditorSeedArgMng />;\n            case 'seedarg-item': return <EditorSeedArgItem />;\n            case 'seedsend-mng': return <EditorSeedSendMng />;\n        }\n    }\n\n    export const ConnectTypes = ['create', 'depend'] as const;\n    export type InheritMethod = typeof ConnectTypes[number];\n\n    export const getChildrenElementNode = (node: TreeUtil.ElementNode): TreeUtil.ElementNode[] => {\n        const wrapNode = node.data as WrapElement;\n        const get = (listName: string) => {\n            return ((wrapNode.data)[listName] as LogicUtil.WrapElement[]).map(wrap => {\n                const elementNode = TreeUtil.createNode(wrap, node);\n                elementNode.children = getChildrenElementNode(elementNode);\n                return elementNode;\n            });\n        }\n        switch (wrapNode.type) {\n            case 'seed-mng':\n            case 'logic-mng': return get('defs');\n            case 'seed-item':\n            case 'connector':\n            case 'inherit-logic':\n            case 'interface-mng':\n            case 'logic-item': return get('mngs');\n            case 'send-mng':\n            case 'behavior-mng':\n            case 'visual-mng':\n            case 'extend-mng':\n            case 'seedsend-mng':\n            case 'visual-mng': return get('params');\n            case 'inherit-mng': return get('inherits');\n            case 'seedarg-mng':\n            case 'argument-mng': return get('args');\n            case 'sample-mng': return get('samples');\n            case 'inhfld-mng':\n            case 'field-mng': return get('fields');\n            case 'thumbnail-mng': return get('items');\n        }\n        return [];\n    };\n\n    export const getChildrenDataNode = (wrapNode: LogicUtil.WrapElement): TreeUtil.DataNode[] => {\n        const get = (listName: string) => {\n\n            return ((wrapNode.data)[listName] as LogicUtil.WrapElement[]).map(wrap => {\n                const treeNode: TreeUtil.DataNode = {\n                    data: wrap,\n                    children: getChildrenDataNode(wrap)\n                };\n                return treeNode;\n            });\n        }\n        switch (wrapNode.type) {\n            case 'root': {\n                const node = wrapNode.data as LogicUtil.NodeRoot;\n                return [\n                    { data: node.seedMng, children: getChildrenDataNode(node.seedMng) },\n                    { data: node.logicMng, children: getChildrenDataNode(node.logicMng) }\n                ];\n            }\n            case 'seed-mng':\n            case 'logic-mng': return get('defs');\n            case 'seed-item':\n            case 'connector':\n            case 'inherit-logic':\n            case 'interface-mng':\n            case 'logic-item': return get('mngs');\n            case 'send-mng':\n            case 'behavior-mng':\n            case 'visual-mng':\n            case 'extend-mng':\n            case 'seedsend-mng':\n            case 'visual-mng': return get('params');\n            case 'inherit-mng': return get('inherits');\n            case 'seedarg-mng':\n            case 'argument-mng': return get('args');\n            case 'sample-mng': return get('samples');\n            case 'inhfld-mng':\n            case 'field-mng': return get('fields');\n            case 'thumbnail-mng': return get('items');\n        }\n        return [];\n    };\n}\n\nexport default LogicUtil;\n\nconst _Category = styled.div<{\n    backgroundColor: string;\n    isDisable?: boolean;\n}>`\n    ${Styles.CSS_LABEL_MIDIUM}\n    display: inline-block;\n    position: relative;\n    background-color: ${props => props.backgroundColor};\n    /* width: 100%; */\n    ${props => !(props.isDisable ?? false) ? '' : css`\n        text-decoration: line-through;\n        color: #00054dac;\n    `}\n    border-radius: 4px 0 0 4px;\n    margin: 5px 0 0 0;\n    padding: 0 10px;\n    border: solid 1px #000000d2;\n`;\nconst _Detail = styled.span`\n    color: #000b69bd;\n`;\n\nconst _EditableValue = styled.div`\n    ${Styles.CSS_LABEL_MIDIUM}\n    display: inline-block;\n    position: relative;\n    background-color: #0c0c0c;\n    color: #ebebeb;\n    border-radius: 0 4px 4px 0;\n    /* width: 100%; */\n    margin: 5px 0 0 0;\n    padding: 0 10px;\n`;\nconst _Span = styled.span<{\n    color: string;\n}>`\n    color: ${props => props.color};\n`;\nconst _ValueType = styled.span`\n    color: #fff9d6b9;\n`;\nconst _Signature = styled.span`\n    color: #ffffff78;\n`;\nconst _Field = styled.span`\n    color: #ff2d2d;\n`;","import { type } from \"os\";\nimport { createContext, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport Styles from \"../../../base/design/styles\";\nimport DataUtil from \"../../../utils/dataUtil\";\nimport FormUtil from \"../../../utils/form/formUtiil\";\nimport TreeUtil from \"../../../utils/treeUtil\";\nimport ConfirmDialog from \"../../dialog/confirmDialog\";\nimport { GlobalContext } from \"../../entry/systemEntry\";\nimport Common from \"../common\";\nimport LogicPreviewFrame from \"../preview/logicPreviewFrame\";\nimport LogicElementUtil from \"./util/logicElementUtil\";\nimport LogicUtil from \"./util/logicUtil\";\n\nexport const FactoryTreeContext = createContext({} as LogicUtil.DetailArgs);\n\nconst LogicMainteTab = () => {\n    const { store, setStore } = useContext(GlobalContext);\n\n    const [rootData, setRootData] = useState(LogicElementUtil.getInitialData());\n    const [focusNode, setFocusNode] = useState<TreeUtil.ElementNode | null>(null);\n    // const [treeDisable, setTreeDisable] = useState(false);\n    const [isModify, setModify] = useState<boolean>(false);\n    const [invalidate, setInvalidate] = useState<any>(null);\n\n    const [fileHandle, setFileHandle] = useState<FileSystemFileHandle | null>(null);\n\n    const rootDataNode: TreeUtil.DataNode = useMemo(() => {\n        return {\n            data: rootData,\n            children: LogicUtil.getChildrenDataNode(rootData)\n        }\n    }, [rootData]);\n\n\n    const loadFile = () => {\n        (async () => {\n            const [fileHandle] = await window.showOpenFilePicker();\n            const file = await fileHandle.getFile();\n            const fileContents = await file.text();\n            setFileHandle(fileHandle);\n            const text = DataUtil.unZip(fileContents);\n            console.log(text);\n            setRootData(JSON.parse(text));\n            store.system.dialog = <ConfirmDialog.Component message=\"Successfully file loaded!\" />;\n            setStore({ ...store });\n        })();\n    }\n\n    const saveFile = () => {\n        const options = {\n            types: [\n                {\n                    accept: {\n                        'text/plain': ['.plgc'],\n                    },\n                },\n            ],\n        };\n\n        const plainData = JSON.stringify(rootData);\n        if (fileHandle != null) {\n            (async () => {\n                //ファイルへ書き込むための FileSystemWritableFileStream を作成\n                const writable = await fileHandle.createWritable();\n                //テキストデータの書き込み\n                const text = DataUtil.gZip(plainData);\n                await writable.write(text);\n                //ファイルを閉じる\n                await writable.close();\n                setFileHandle(fileHandle);\n                // this.score.setScoreState({ ...state });\n                const file = await fileHandle.getFile();\n                store.system.dialog = <ConfirmDialog.Component message=\"successfully overwritten!\" />;\n                setStore({ ...store });\n            })();\n        } else {\n            window.showSaveFilePicker(options).then((handle) => {\n                (async () => {\n                    //ファイルへ書き込むための FileSystemWritableFileStream を作成\n                    const writable = await handle.createWritable();\n                    //テキストデータの書き込み\n                    const text = DataUtil.gZip(plainData);\n                    await writable.write(text);\n                    //ファイルを閉じる\n                    await writable.close();\n                    setFileHandle(handle);\n                    store.system.dialog = <ConfirmDialog.Component message=\"Successfully written to file!\" />;\n                    setStore({ ...store });\n                })();\n            }).catch(() => {\n                console.log('キャンセルされました');\n            });\n        }\n    }\n\n    const masterNode =  useMemo(() => {\n        let cur: TreeUtil.ElementNode | null = focusNode;\n        while (cur != null) {\n            const type = (cur.data as LogicUtil.WrapElement).type;\n            if (['logic-item', 'seed-item'].includes(type)) return cur;\n            cur = cur.parent;\n        };\n        return null;\n    }, [focusNode]);\n\n    /**\n     * プレビューダイアログを表示する\n     */\n    const openPreviewDialog = () => {\n        if(masterNode == null) return;\n        store.system.dialog = (\n            <LogicPreviewFrame.Component\n                node={masterNode}\n                rootData={rootData}\n            />\n        );\n        setStore({ ...store });\n    }\n\n    return (\n        <_Wrap\n            tabIndex={0}\n            onKeyDown={(e) => {\n                // console.log(e.key);\n                if (isModify || focusNode == null) return;\n                switch (e.key) {\n                    case 'ArrowRight': {\n                        if (focusNode.children.length > 0) {\n                            if (!focusNode.isOpen) focusNode.isOpen = true;\n                            else setFocusNode(focusNode.children[0]);\n                            setInvalidate({});\n                        }\n                    } break;\n                    case 'ArrowLeft': {\n                        if (focusNode.isOpen) focusNode.isOpen = false;\n                        else {\n                            if (focusNode.parent != null) setFocusNode(focusNode.parent);\n                        }\n                        setInvalidate({});\n                    } break;\n                    case 'ArrowUp': {\n                        if (focusNode.parent != null) {\n                            const list = focusNode.parent.children;\n                            list.forEach((n, i) => {\n                                if (focusNode == n) {\n                                    if (i === 0) {\n                                        setFocusNode(focusNode.parent);\n                                        setInvalidate({});\n                                    } else {\n                                        setFocusNode(list[i - 1]);\n                                        setInvalidate({});\n                                    }\n                                    return 1;\n                                }\n                            });\n                        }\n                    } break;\n                    case 'ArrowDown': {\n                        if (focusNode.parent != null) {\n                            const list = focusNode.parent.children;\n                            list.forEach((n, i) => {\n                                if (focusNode == n && i < list.length - 1) {\n                                    setFocusNode(list[i + 1]);\n                                    setInvalidate({});\n                                    return 1;\n                                }\n                            });\n                        }\n                    } break;\n                    case ' ': {\n                        if (masterNode != null) openPreviewDialog();\n                    } break;\n                }\n            }}\n        >\n            <_TreeDiv>\n                <_TreeHead>\n                    <_TreeHeadHalf>\n                        <FormUtil.ButtonRecord\n                            isCenter\n                            buttons={[\n                                {\n                                    label: 'Preview',\n                                    isEnable: masterNode != null,\n                                    callback: openPreviewDialog\n                                }\n                            ]}\n                        />\n                    </_TreeHeadHalf>\n                    <_TreeHeadHalf>\n                        <FormUtil.ButtonRecord\n                            isCenter\n                            buttons={[\n                                {\n                                    label: 'Save',\n                                    callback: saveFile\n                                },\n                                {\n                                    label: 'Load',\n                                    callback: loadFile\n                                }\n                            ]}\n                        />\n                    </_TreeHeadHalf>\n                </_TreeHead>\n                <_TreeBody>\n                    <TreeUtil.Frame\n                        rootDataNode={rootDataNode}\n                        clickEvent={(node: TreeUtil.ElementNode) => {\n                            setFocusNode(node);\n                        }}\n                        getLabelJsx={(node: TreeUtil.ElementNode) => {\n                            // console.log(focusNode);\n                            // console.log(node);\n                            // const isActive = focusNode == node || (focusNode?.depth===0 && focusNode.data == rootDataNode.data)\n                            return LogicUtil.getNodeDisplayJsx(node, focusNode?.data == node.data)\n                        }}\n                        invalidate={invalidate}\n                        focusNode={focusNode}\n                        isDisable={isModify}\n                    />\n                </_TreeBody>\n            </_TreeDiv>\n            <_PropsDiv>\n                <_DetailDiv>\n                    <_DetailHeader>\n                        <_DetailHeaderLabel>{LogicUtil.getTypeName(focusNode)}</_DetailHeaderLabel>\n                    </_DetailHeader>\n                    <FactoryTreeContext.Provider value={{\n                        rootData,\n                        node: focusNode as TreeUtil.ElementNode,\n                        setFocusNode: setFocusNode,\n                        invalidate: () => { setInvalidate({}) },\n                        isModify,\n                        setModify,\n                        // treeDisable,\n                        setRootData,\n                        removeSelf: () => {\n                            const node = focusNode as TreeUtil.ElementNode;\n                            let index = -1;\n                            node.parent?.children.forEach((n, i) => {\n                                if (n == node) index = i;\n                            });\n                            node.parent?.children.splice(index, 1);\n                            const parentWrap = node.parent?.data as LogicUtil.WrapElement;\n                            const listName = LogicElementUtil.getListParamName(parentWrap.type);\n                            if (listName == null) return;\n                            const list = parentWrap.data[listName] as LogicUtil.WrapElement[];\n                            list.splice(index, 1);\n                            setFocusNode(node.parent as TreeUtil.ElementNode);\n                            setInvalidate({});\n                        }\n                    }}>\n                        <_DetailMainDiv>{LogicUtil.getDetailComponent(focusNode)}</_DetailMainDiv>\n                    </FactoryTreeContext.Provider>\n                </_DetailDiv>\n            </_PropsDiv>\n        </_Wrap >\n    );\n}\n\nexport default LogicMainteTab;\n\nconst PROPS_DIV_WIDTH = 460;\n\nconst _Wrap = styled.div`\n    display: inline-block;\n    position: relative;\n    background-color: #6c8186;\n    width: 100%;\n    height: 100%;\n`;\n\nconst _TreeDiv = styled.div`\n    display: inline-block;\n    position: relative;\n    background-color: #d5d4d87b;\n    width: calc(100% - ${PROPS_DIV_WIDTH}px);\n    height: 100%;\n    vertical-align: top;\n`;\n\nconst _TreeHead = styled.div`\n    display: inline-block;\n    position: relative;\n    /* background-color: #d5d4d8; */\n    width: 100%;\n    height: 40px;\n`;\nconst _TreeHeadHalf = styled.div`\n    display: inline-block;\n    width: 50%;\n`;\n\nconst _TreeBody = styled.div`\n    display: inline-block;\n    position: relative;\n    width: 100%;\n    background-color: #7fbdb47a;\n    height: calc(100% - 40px);\n`;\n\nconst _PropsDiv = styled.div`\n    display: inline-block;\n    /* position: relative; */\n    background-color: #9fa9b6;\n    width: ${PROPS_DIV_WIDTH}px;\n    height: 100%;\n    vertical-align: top;\n    box-sizing: border-box;\n`;\n\nconst _DetailDiv = styled.div`\n    display: inline-block;\n    /* position: relative; */\n    background-color: #c0c9c4;\n    width: calc(100% - 4px);\n    height: calc(100% - 4px);\n    margin: 2px 0 0 2px;\n`;\nconst _DetailHeader = styled.div`\n    display: inline-block;\n    /* position: relative; */\n    /* background-color: #b4b29e; */\n    width: 100%;\n    height: 40px;\n`;\nconst _DetailHeaderLabel = styled.div`\n    ${Styles.CSS_LABEL_MIDIUM}\n    color: #a10000;\n    /* background-color: #bbd0d3; */\n    border: solid 1px #a10000;\n    box-sizing: border-box;\n    width: calc(100% - 20px);\n    margin: 5px 0 0 10px;\n    border-radius: 4px;\n`;\n\nconst _DetailMainDiv = styled.div`\n    width: calc(100% - 8px);\n    height: calc(100% - 44px);\n    margin: 0 0 0 4px;\n    background-color: #cfd3cc;\n    border: solid 1px #0026a1;\n    box-sizing: border-box;\n    border-radius: 4px;\n`;\n\nconst _Blind = styled.div<{\n    isVisible: boolean;\n}>`\n    display: inline-block;\n    ${props => props.isVisible ? '' : css`\n        display: none;\n    `}\n    position: absolute;\n    left: 0;\n    top: 0;\n    z-index: 10;\n    background-color: #0012616c;\n    width: 100%;\n    height: 100%;\n`;","\nconst ManageTab = () => {\n\n    return (<></>);\n}\n\nexport default ManageTab;","import { type } from \"os\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport TreeUtil from \"../../../utils/treeUtil\";\nimport Common from \"../common\";\nimport TimelineUtil from \"./timelineUtil\";\n\nconst LauncherTab = () => {\n\n    return (\n        <_Wrap\n            tabIndex={0}\n        >\n            <_TreeDiv>\n                <_TreeHead>\n                    {/* <HierarchyNavi cur={focusNode}/> */}\n                </_TreeHead>\n                <_TreeBody>\n                </_TreeBody>\n            </_TreeDiv>\n            <_PropsDiv>\n            </_PropsDiv>\n            {/* <_Blind isVisible={isBackingWnd}>\n                    <_Contents>{!isBackingWnd ? <></> : <BackingEditorFrame />}</_Contents>\n                </_Blind> */}\n        </_Wrap >\n    );\n}\n\nexport default LauncherTab;\n\n\nconst PROPS_DIV_WIDTH = 460;\n\nconst _Wrap = styled.div`\n    display: inline-block;\n    position: relative;\n    background-color: #c3d8dd;\n    width: 100%;\n    height: 100%;\n`;\n\nconst _TreeDiv = styled.div`\n    display: inline-block;\n    position: relative;\n    /* background-color: #d5d4d8; */\n    width: calc(100% - ${PROPS_DIV_WIDTH}px);\n    height: 100%;\n    vertical-align: top;\n`;\n\nconst _TreeHead = styled.div`\n    display: inline-block;\n    position: relative;\n    /* background-color: #d5d4d8; */\n    width: 100%;\n    height: 40px;\n`;\n\nconst _TreeBody = styled.div`\n    display: inline-block;\n    position: relative;\n    width: 100%;\n    height: calc(100% - 40px);\n`;\n\nconst _PropsDiv = styled.div`\n    display: inline-block;\n    /* position: relative; */\n    /* background-color: #532fc0; */\n    width: ${PROPS_DIV_WIDTH}px;\n    height: 100%;\n    vertical-align: top;\n    box-sizing: border-box;\n    padding: 6px 6px 6px 0;\n`;\n\nconst _TabContWrap = styled.div`\n    display: inline-block;\n    /* position: relative; */\n    background-color: #c0c9c4;\n    width: calc(100% - 4px);\n    height: calc(100% - 4px);\n    margin: 2px 0 0 2px;\n`;\n\nconst _Blind = styled.div<{\n    isVisible: boolean;\n}>`\n    display: inline-block;\n    ${props => props.isVisible ? '' : css`\n        display: none;\n    `}\n    position: absolute;\n    left: 0;\n    top: 0;\n    z-index: 10;\n    background-color: #0012616c;\n    width: 100%;\n    height: 100%;\n`;\n\nconst _Contents = styled.div<{\n}>`\n    display: inline-block;\n    width: 630px;\n    /* height: 400px; */\n    background-color: #a3a3a3;\n    /* opacity: 0.9; */\n    overflow: hidden;\n`;","import { useContext, useEffect, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { TabbedPane } from \"../../base/components/tab/tabbedPane\";\nimport Styles, { _CSS_LABEL_MIDIUM } from \"../../base/design/styles\";\nimport { SCORE_TAB_MARGIN } from \"../../utils/systemConst\";\nimport { GlobalContext } from \"../entry/systemEntry\";\nimport LogicMainteTab from \"./factory/logicMainteTab\";\nimport ManageTab from \"./manage/manageTab\";\nimport PreviewTab from \"./manage/manageTab\";\nimport LauncherTab from \"./launcher/launcherTab\";\nimport Timeline from \"./launcher/launcherTab\";\n\n\nconst CreateChannel = () => {\n\n    const { store, setStore } = useContext(GlobalContext);\n\n    return (\n        <_Wrap>\n            <TabbedPane\n                tabElements={[\n                    { name: 'Manage', enable: false, cont: <ManageTab /> },\n                    { name: 'Launcher', enable: true, cont: <LauncherTab /> },\n                    { name: 'Library', enable: true, cont: <LogicMainteTab /> }\n                ]}\n                activeNo={2}\n            // selectTabIndex={(index: number) => dispatcher.score.setScoreTabIndex(index)}\n            />\n        </_Wrap>\n    );\n}\nexport default CreateChannel;\n\nconst _Wrap = styled.div`\n    display: inline-block;\n    position: relative;\n    margin: ${SCORE_TAB_MARGIN}px 0 0 ${SCORE_TAB_MARGIN}px;\n    width: calc(100% - ${SCORE_TAB_MARGIN * 2}px);\n    height: calc(100% - ${SCORE_TAB_MARGIN * 2}px);\n    background-color: transparent;\n    /* background-color: #c3d8dd6f; */\n    /* border: solid 1px black;\n    border-radius: 5px; */\n    /* box-shadow: 0 2px 14px 4px #000b3a48; */\n`;\n\n","import { Redirect } from \"react-router-dom\";\nimport DataUtil from \"../../utils/dataUtil\";\nimport { useContext, useEffect } from \"react\";\nimport { GlobalContext } from \"./systemEntry\";\n\nconst DirectView = (props: {\n    hashKey: string;\n}) => {\n\n    const { store, setStore } = useContext(GlobalContext);\n    const conteseq = DataUtil.getDecryptionedScoreSeq(props.hashKey);\n\n    // const setScoreData = (owner: string, dispnam: string, data: ScoreData) => {\n    //     store.scoreState.focusIndex = 2;\n    //     store.scoreState.distIndex = store.scoreState.focusIndex;\n    //     dispatcher.score.setScoreState({ ...store.scoreState });\n    //     // dispatcher.score.setScoreTabIndex(1);\n    //     dispatcher.score.setScoreData(data);\n    //     // キャッシュの更新\n    //     store.scoreData = data;\n    //     CacheUtil.updateHarmonizeCache(store, dispatcher);\n    //     store.systemState.mainChannelIndex = 5;\n    //     store.systemState.scoreTabIndex = 0;\n    //     store.systemState.directScore = {\n    //         owner, name: dispnam\n    //     };\n    //     dispatcher.system.setState(store.systemState);\n    // };\n\n    useEffect(() => {\n        // DataUtil.findScore(conteseq).then(resList => {\n        //     if (resList.length > 0) {\n        //         const source = resList[0]['data'];\n        //         const owner = resList[0]['owner'];\n        //         const dispnam = resList[0]['dispnam'];\n        //         const text = DataUtil.unZip(source);\n        //         setScoreData(owner, dispnam, JSON.parse(text));\n        //     }\n        // });\n    }, []);\n    // if (store.systemState.directScore == null) {\n    //     return <></>;\n    // } else {\n    //     return <Redirect to=\"/\" />;\n    //     // return <MainFrame />;\n    // }\n    return <Redirect to=\"/\" />;\n}\n\nexport default DirectView;","import { Redirect } from \"react-router-dom\";\nimport DataUtil from \"../../utils/dataUtil\";\nimport { useContext, useEffect } from \"react\";\nimport { GlobalContext } from \"./systemEntry\";\n\nconst DirectLogin = (props: {\n    hashKey: string;\n}) => {\n\n    const { store, setStore } = useContext(GlobalContext);\n\n    useEffect(() => {\n        const seq = DataUtil.getDecryptionedUserSeq(props.hashKey);\n        console.log(seq);\n        DataUtil.findUserInfoFromSeq(seq).then(resList => {\n            console.log(resList);\n            if (resList.length > 0) {\n                const loginProps = resList[0];\n                // store.userEnv.login = loginProps;\n                // dispatcher.system.setUserEnv(store.userEnv);\n            }\n        });\n    }, []);\n    // if (store.userEnv.login == null) {\n    //     return <></>;\n    // } else {\n    //     return <Redirect to=\"/\" />;\n    //     // return <MainFrame />;\n    // }\n    return <Redirect to=\"/\" />;\n}\n\nexport default DirectLogin;","\nimport { useContext, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Styles from \"../../base/design/styles\";\nimport DataUtil from \"../../utils/dataUtil\";\nimport { HOME_USER_DIV_HEIGHT } from \"../../utils/systemConst\";\nimport { GlobalContext } from \"../entry/systemEntry\";\n\n\ntype NotePorp = {\n    version: string;\n    date: string;\n    note: string;\n}\n\nconst ReleaseNote = () => {\n    const { store } = useContext(GlobalContext);\n\n    const [jsx, setJsx] = useState<JSX.Element[]>([]);\n    useEffect(() => {\n        fetch('assets/release_note.json')\n            .then(response => response.json()) // (2) レスポンスデータを取得\n            .then(json => { // (3)レスポンスデータを処理\n                const list = json as NotePorp[];\n\n                setJsx(list.map((item, i) => {\n                    const record = item.note.split('\\n').map((r, i) => <span key={i}>{r}<br /></span>);\n                    return (\n                        <_Item key={i}>\n                            <_Header>v{item.version} ({item.date})</_Header>\n                            <_Detail>{record}</_Detail>\n                        </_Item>\n                    );\n                }));\n            });\n    }, []);\n\n    return (<_ListFrame>{jsx}</_ListFrame>);\n}\n\nexport default ReleaseNote;\n\nconst _ListFrame = styled.div<{\n}>`\n    display: inline-block;\n    width: calc(100% - 8px);\n    /* height: calc(100% - ${HOME_USER_DIV_HEIGHT + 90}px); */\n    height: calc(100% - 48px);\n    margin: 4px 0 0 4px;\n    background-color: #d3d3c5;\n    border: 1px solid #e60000;\n    border-radius: 4px;\n    box-sizing: border-box;\n    overflow-y: auto;\n`;\n\nconst _Item = styled.div`\n    display: inline-block;\n    width: calc(100% - 8px);\n    margin: 4px 0 0 4px;\n    background-color: #bfcace;\n    border: 1px solid #9b9b9b;\n    border-radius: 6px;\n`;\n\nconst _Header = styled.div`\n    display: inline-block;\n    width: calc(100% - 8px);\n    height: 20px;\n    font-size: ${Styles.FONT_SMALL}px;\n    margin: 2px 0 0 4px;\n    font-weight: 600;\n    /* background-color: #8bdbf8; */\n    color: #494975;\n`;\n\nconst _Detail = styled.div`\n    display: inline-block;\n    width: calc(100% - 8px);\n    font-size: ${Styles.FONT_SMALL}px;\n    margin: 2px 0 0 4px;\n    /* background-color: #dafce4; */\n    color: #754949;\n`;","import { useContext, useEffect, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport Styles, { _CSS_LABEL_MIDIUM } from \"../../base/design/styles\";\nimport DataUtil from \"../../utils/dataUtil\";\nimport { HOME_USER_DIV_HEIGHT } from \"../../utils/systemConst\";\nimport { GlobalContext } from \"../entry/systemEntry\";\nimport ReleaseNote from \"./releaseNote\";\n\ntype scoreProps = {\n    dispnam: string;\n    seq: number;\n    owner: string;\n    lastmod: string;\n}\n\nconst HomeChannel = () => {\n\n    const { store, setStore } = useContext(GlobalContext);\n\n    const [userCount, setUserCount] = useState(0);\n\n\n    useEffect(() => {\n    }, []);\n\n\n    return (<_Wrap>\n        <_Left>\n            <_MessageRecord>{userCount} users have created accounts.</_MessageRecord>\n            <ReleaseNote />\n        </_Left>\n        <_Right>\n            <_MessageRecord>{0} arts have been published.</_MessageRecord>\n        </_Right>\n    </_Wrap>);\n}\n\nexport default HomeChannel;\n\nexport const countUsers = async () => {\n    const response = await DataUtil.sendQueryRequestToAPI('select', `SELECT count(*) cnt FROM user_tbl`);\n    const results = await response.json();\n    return (results as any[])[0]['cnt'] as number;\n};\n\nexport const findAllScore = async () => {\n    const response = await DataUtil.sendQueryRequestToAPI('select', `\n        SELECT seq, (select id from user_tbl where seq = score.user_seq) as owner, dispnam, lastmod\n        FROM scoretbl score\n        WHERE share <> 'url'\n        ORDER BY lastmod desc\n    `);\n    const results = await response.json();\n    return results as any[];\n};\n\nconst _Wrap = styled.div`\n    display: inline-block;\n    width: calc(100% - 8px);\n    height: calc(100% - 8px);\n    margin: 4px 0 0 4px;\n    background-color: #ccc;\n`;\n\nconst _Left = styled.div`\n    display: inline-block;\n    width: 50%;\n    height: 100%;\n    background-color: #bbcac7;\n`;\n\n\nconst _MessageRecord = styled.div`\n    display: inline-block;\n    width: 100%;\n    height: 40px;\n    font-size: 22px;\n    font-weight: 600;\n    color: #cd0202;\n    background-color: #ffffff3d;\n    padding: 0 0 0 10px;\n    box-sizing: border-box;\n`;\n\nconst _ListInfoDiv = styled.div<{\n    isEnable: boolean;\n}>`\n    display: inline-block;\n    width: calc(100% - 8px);\n    height: ${HOME_USER_DIV_HEIGHT}px;\n    margin: 4px 0 4px 4px;\n    background-color: #acacac;\n    border: solid 1px #1b00b3;\n    ${props => props.isEnable ? '' : css`\n        opacity: 0.3;\n        pointer-events: none;\n    `}\n    border-radius: 4px;\n    box-sizing: border-box;\n    color: #060053;\n`;\n\nconst _TitleLabel = styled.div`\n    display: inline-block;\n    height: 40px;\n    font-size: 30px;\n    font-weight: 600;\n    color: #1c2c95;\n    /* background-color: #3f80cf57; */\n    padding: 0 10px;\n`;\nconst _Recored = styled.div`\n    display: inline-block;\n    width: 100%;\n    height: 35px;\n    /* background-color: #3fcf7b56; */\n    padding: 4px 0 0 10px;\n`;\n\nconst _ItemnLabel = styled.div`\n    display: inline-block;\n    height: calc(100% - 4px);\n    width: 140px;\n    font-size: 24px;\n    line-height: 24px;\n    font-weight: 600;\n    color: #08106e;\n    border: solid 1px #1b00b3;\n    box-sizing: border-box;\n    /* background-color: #85a2c5; */\n    background: linear-gradient(to bottom, #8a98a7, #a3bbd2, #8a98a7);\n    border-radius: 4px;\n    text-align: center;\n`;\n\nconst _ItemnValue = styled.div`\n    display: inline-block;\n    height: calc(100% - 4px);\n    width: calc(100% - 170px);\n    margin-left: 10px;\n    font-size: 24px;\n    line-height: 30px;\n    user-select: text;\n    /* font-weight: 600; */\n    color: #ffffff;\n    padding: 0 5px;\n    box-sizing: border-box;\n    background-color: #808080;\n    text-align: left;\n`;\n\nconst _ItemnForm = styled.input`\n    display: inline-block;\n    height: calc(100% - 4px);\n    width: calc(100% - 170px);\n    margin-left: 10px;\n    font-size: 24px;\n    line-height: 24px;\n    /* font-weight: 600; */\n    color: #1a1a1a;\n    padding: 0 5px;\n    box-sizing: border-box;\n    background-color: #e9e9e9;\n    text-align: left;\n`;\n\nconst _ButtonsDiv = styled.div`\n    display: inline-block;\n    width: 100%;\n    height: 40px;\n    /* background-color: #888888; */\n    box-sizing: border-box;\n    text-align: left;\n`;\n\nconst _Button = styled.div<{\n    isEnable: boolean;\n}>`\n    ${_CSS_LABEL_MIDIUM}\n    /* width: 160px; */\n    padding: 0 40px;\n    /* line-height: 25px; */\n    box-sizing: border-box;\n    background-color: #a8a8a8;\n    background: linear-gradient(to bottom, #787878, #b4b4b4, #787878);\n    border: 1px solid #1a2b3f;\n    color: #1a2b3f;\n    border-radius: 4px;\n    margin: 5px 0 0 4px;\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\n    &:hover {\n        /* background-color: #98bfc2; */\n    background: linear-gradient(to bottom, #989898, #b4b4b4, #989898);\n    }\n`;\n\n\n\nconst _Right = styled.div`\n    display: inline-block;\n    width: 50%;\n    height: 100%;\n    background-color: #bbbfca;\n    vertical-align: top;\n`;\nconst _ListFrame = styled.div<{\n}>`\n    display: inline-block;\n    width: calc(100% - 8px);\n    height: calc(100% - 42px);\n    margin: 4px 0 0 4px;\n    background-color: #d3d3c5;\n    border: 1px solid #e60000;\n    border-radius: 4px;\n    box-sizing: border-box;\n    overflow-y: auto;\n`;\nconst _CloudItem = styled.div<{\n}>`\n    display: inline-block;\n    position: relative;\n    width: 100%;\n    /* height: 60px; */\n    border-bottom: 1px solid #888888;\n    /* background-color: white; */\n    background: linear-gradient(to bottom, transparent, #b6b6b684);\n    margin: 2px 0 0 0;\n    padding: 0 0 0 4px;\n    box-sizing: border-box;\n    /* padding-left: 4px; */\n    &:hover {\n        background: linear-gradient(to bottom, transparent, #ffffff5c);\n    }\n`;\n\nconst _Owner = styled.div<{\n}>`\n    display: inline-block;\n    width: 100%;\n    height: 20px;\n    line-height: 21px;\n    font-size: 18px;\n    font-weight: 600;\n    color: #c9494f;\n    overflow: hidden;\n    white-space: nowrap;\n`;\nconst _CName = styled.div<{\n}>`\n    display: inline-block;\n    width: calc(100% - 250px);\n    height: 35px;\n    font-size: 24px;\n    line-height: 36px;\n    font-weight: 600;\n    color: #47417c;\n    /* background-color: #f8f8e8; */\n    overflow: hidden;\n    white-space: nowrap;\n`;\nconst _CDate = styled.div<{\n}>`\n    display: inline-block;\n    width: 250px;\n    height: 35px;\n    font-size: 24px;\n    line-height: 36px;\n    font-weight: 600;\n    color: #417c49;\n    /* background-color: #f8f8e8; */\n    overflow: hidden;\n    white-space: nowrap;\n`;","import { useContext, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { ChannelPane } from \"../../base/components/tab/channelPane\";\nimport { TabbedPane } from \"../../base/components/tab/tabbedPane\";\nimport { MAIN_FRAME_MARGIN } from \"../../utils/systemConst\";\nimport { GlobalContext } from \"./systemEntry\";\nimport { AiFillHome } from 'react-icons/ai';\nimport { CgOptions, CgPiano } from 'react-icons/cg';\nimport { VscGitPullRequestCreate } from 'react-icons/vsc';\nimport { HashRouter, Redirect, Route, Switch, useLocation } from \"react-router-dom\";\nimport CreateChannel from \"../create/createChannel\";\nimport DirectView from \"./directView\";\nimport DirectLogin from \"./directLogin\";\nimport HomeChannel from \"../home/homeChannel\";\n\nconst MainFrame = () => {\n\n    const { store, setStore } = useContext(GlobalContext);\n\n    return (\n        <HashRouter basename={process.env.PUBLIC_URL}>\n            <RouterManage />\n        </HashRouter>\n    );\n}\n\nexport default MainFrame;\n\nconst RouterManage = () => {\n\n    const { store, setStore } = useContext(GlobalContext);\n\n    const query = new URLSearchParams(useLocation().search);\n    const str = query.get('v') as string;\n\n    return (\n        <Switch>\n            <Route path=\"/\" exact>\n                <_Wrap>\n                    <ChannelPane\n                        tabElements={[\n                            { name: 'Home', icon: <AiFillHome />, isEnable: true, cont: <HomeChannel /> },\n                            { name: 'Create', icon: <VscGitPullRequestCreate />, isEnable: true, cont: <CreateChannel/> },\n                        ]}\n                        activeNo={0}\n                    // selectTabIndex={(index: number) => dispatcher.system.setMainTabIndex(index)}\n                    />\n                </_Wrap>\n            </Route>\n            <Route path=\"/test\" exact >\n                <_Wrap>\n                </_Wrap>\n            </Route>\n            <Route path=\"/preview\" exact >\n                <DirectView hashKey={str} />\n            </Route>\n            <Route path=\"/user\" exact >\n                <DirectLogin hashKey={str} />\n            </Route>\n        </Switch>\n    );\n}\n\n\n\nconst _Wrap = styled.div`\n    display: inline-block;\n    position: relative;\n    margin: ${MAIN_FRAME_MARGIN}px 0 0 ${MAIN_FRAME_MARGIN}px;\n    width: calc(100% - ${MAIN_FRAME_MARGIN * 2}px);\n    height: calc(100% - ${MAIN_FRAME_MARGIN * 2}px);\n    background-color: transparent;\n    /* background-color: #c3d8dd6f; */\n    /* border: solid 1px black;\n    border-radius: 5px; */\n    /* box-shadow: 0 2px 14px 4px #000b3a48; */\n`;","\nimport { useEffect, useState } from 'react';\nimport styled, { css, keyframes } from 'styled-components';\n\nconst Splash = (props: {\n    remove: () => void\n}) => {\n    const [isSwitch, setSwitch] = useState<boolean>(false);\n    const [timerId, setTimerId] = useState<NodeJS.Timeout>();\n\n    useEffect(() => {\n        setTimerId(setTimeout(() => {\n            setSwitch(true);\n        }, 3000));\n    }, []);\n    useEffect(() => {\n        if (isSwitch) {\n            setTimeout(() => {\n                props.remove();\n            }, 500);\n        }\n    }, [isSwitch]);\n\n    return (\n\n        <_Blind isSwitch={isSwitch} onClick={(e) => {\n            clearTimeout(timerId as NodeJS.Timeout);\n            setSwitch(true);\n        }}>\n            <_Frame>\n                <_Title>\n                    <span>L</span>iCreSia\n                </_Title>\n                <_NowLoading>Now Loading...</_NowLoading>\n                <_Copylight>Copyright © 2022 Licresia All Rights Reserved.</_Copylight>\n            </_Frame>\n        </_Blind>\n    );\n}\n\nexport default Splash;\n\nconst _Blind = styled.div<{\n    isSwitch: boolean;\n}>`\n    display: inline-block;\n    position: absolute;\n    left: 0;\n    top: 0;\n    z-index: 10;\n    width: 100%;\n    height: 100%;\n    background-color: #000f3a86;\n    opacity: ${props => props.isSwitch ? '0' : '1'};\n    transition: opacity 500ms;\n`;\nconst _Frame = styled.div<{\n}>`\n    display: inline-block;\n    position: relative;\n    left: calc(50% - 450px);\n    top: calc(50% - 300px);\n    z-index: 11;\n    width: 900px;\n    height: 600px;\n    background: radial-gradient(#868686, #ffffff);\n    border-radius: 8px;\n    border: solid 2px #cfcfcf;\n    box-sizing: border-box;\n    transition: opacity 500ms;\n`;\n\n\nconst fadeIn = keyframes`\n  0%, 100% {\n    opacity: 0.4;\n  }\n  50% {\n    opacity: 1;\n  }\n`;\n\nconst _Title = styled.div`\n    display: inline-block;\n    position: relative;\n    margin-top: 10%;\n    width: 100%;\n    /* height: 400px; */\n    /* background-color: #0003b69e; */\n    background: linear-gradient(to bottom, #99999913, #ffffff13,#ffffff13,#ffffff13, #99999913);\n    color: white;\n    font-size: 130px;\n    font-weight: 600;\n    text-align: center;\n    text-shadow: 1px 2px 22px #0000003d;\n    /* line-height: 350px; */\n    animation: ${fadeIn} 3s linear infinite;\n    /* -webkit-box-reflect:below 1px; */\n    -webkit-box-reflect: below 1px -webkit-gradient(\n      linear,left top,left bottom,\n      from(transparent),\n      color-stop(0.6, transparent),\n      to(#f80000));\n    & span {\n        color: red;\n        font-size: 160px;\n    }\n`;\n\nconst _NowLoading = styled.div`\n    display: inline-block;\n    position: absolute;\n    bottom: 80px;\n    width: 100%;\n    left: 20px;\n    color: #ffffff;\n    font-size: 42px;\n    font-weight: 600;\n    text-align: center;\n`;\n\nconst _Copylight = styled.div`\n    display: inline-block;\n    position: absolute;\n    bottom: 5px;\n    left: 20px;\n    color: #636363;\n    font-size: 22px;\n    font-weight: 600;\n    text-align: left;\n`;","import { useContext, useEffect, useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport CanvasUtil from \"../../../utils/canvasUtil\";\nimport DataUtil from \"../../../utils/dataUtil\";\nimport FormUtil from \"../../../utils/form/formUtiil\";\nimport ValidateUtil from \"../../../utils/form/validateUtil\";\nimport { GlobalContext } from \"../../entry/systemEntry\";\nimport AccountFrame from \"../accountFrame\";\nimport ConfirmDialog from \"../confirmDialog\";\n\nconst LoginCreateAccount = () => {\n    const { store, setStore } = useContext(GlobalContext);\n\n    const [isRegist, setRegist] = useState(false);\n\n    const [userId, setUserId] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    const [password, setPassword] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    const [passwordConfirm, setPasswordConfirm] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    const [messageList, setMessageList] = useState<string[]>([]);\n\n    const [userIdList, setUserIdList] = useState<string[]>([]);\n\n    const createAuthText = () => {\n        // const list = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        // const list = '0123456789abcdefghijklmnopqrstuvwxyz';\n        const list = '0123456789';\n        let text = '';\n        for (let i = 0; i < 6; i++) {\n            text += list.charAt(Math.random() * list.length);\n        }\n        return text;\n    };\n\n    /** 既存のユーザIDリストを格納 */\n    useEffect(() => {\n        DataUtil.findUserIdList().then(list => {\n            setUserIdList(list);\n        });\n\n        // fetch('https://api.ipify.org/?format=json').then(res => {\n        //     res.json().then(data => {\n        //         alert(data['ip']);\n        //     });\n        // });\n    }, []);\n\n    const [authCollation, setAuthCollation] = useState<string>(createAuthText());\n    const [authInput, setAuthInput] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n\n    /** キャッシュした認証画像 */\n    const authPicture = useMemo(() => {\n        return CanvasUtil.getAuthTextURL(authCollation);\n\n    }, [authCollation]);\n\n    useEffect(() => {\n        const list: string[] = [];\n        if (userId.errors.length > 0) {\n            switch (userId.errors[0]) {\n                case 'required': list.push('[user id] is required.'); break;\n                case 'length': list.push('[user id] set a value between 4 and 20.'); break;\n                case 'value': list.push('[user id] accepts only half-width alphanumeric characters.'); break;\n                case 'relation': list.push('[user id] already in use.'); break;\n            }\n        }\n        if (password.errors.length > 0) {\n            switch (password.errors[0]) {\n                case 'required': list.push('[password] is required.'); break;\n                case 'length': list.push('[password] set a value between 4 and 20.'); break;\n                case 'relation': list.push('[password] does not match confirm.'); break;\n            }\n        }\n        if (passwordConfirm.errors.length > 0) {\n            switch (passwordConfirm.errors[0]) {\n                case 'length': list.push('[password *] set a value between 4 and 20.'); break;\n            }\n        }\n        setMessageList(list);\n    }, [userId, password]);\n\n    const registAction = () => {\n\n        (async () => {\n            let response = await DataUtil.sendQueryRequestToAPI('select', `SELECT count(*) as cnt FROM user_tbl where id = '${userId}'`);\n            let results = await response.json();\n            console.log(JSON.stringify(results[0].cnt));\n            const isExist = results[0].cnt > 0;\n            if (isExist) {\n                setMessageList(['That user id has already been recorded.']);\n            } else {\n                const nextSeq = await DataUtil.getNextUserSeq();\n                console.log(nextSeq);\n                await DataUtil.sendQueryRequestToAPI('update', `INSERT INTO user_tbl(seq, id, password) VALUES(${nextSeq}, '${userId.value}', '${password.value}')`)\n                store.system.dialog = (<ConfirmDialog.Component\n                    message='You have successfully created an account!'\n                    buttons={[\n                        {\n                            label: 'OK',\n                            callback: () => {\n                                // store.userEnv.login = {\n                                //     seq: nextSeq,\n                                //     id: userId.value,\n                                //     password: password.value,\n                                //     email: '',\n                                // };\n                                // dispatcher.system.setUserEnv(store.userEnv);\n                                // dispatcher.system.setDialog(<AccountFrame />);\n                            }\n                        }\n                    ]}\n                />);\n            }\n        })();\n    }\n\n    const isLoginInfoOK = () => {\n        return userId.errors.length === 0 && password.errors.length === 0 && passwordConfirm.errors.length === 0;\n    }\n    const isAuthOK = () => {\n        return authInput.errors.length === 0 && authCollation === authInput.value;\n    }\n\n    return (<>\n\n        <_Frame isVisible={!isRegist}>\n            <FormUtil.BorderPanel\n                title=\"Login information\"\n                innerJsx={<>\n                    <FormUtil.Message\n                        message={'Please, enter User ID/Pass (Confirm).'}\n                    />\n                    <FormUtil.InputTextFormBak\n                        placeholder={'user id'}\n                        checkable={userId}\n                        setCheckable={setUserId}\n                        validates={[\n                            {\n                                checker: (value) => ValidateUtil.checkRequired(value),\n                                errorType: \"required\"\n                            },\n                            {\n                                checker: (value) => ValidateUtil.checkStringLength(value, 4, 20),\n                                errorType: \"length\"\n                            },\n                            {\n                                checker: (value) => ValidateUtil.checkAsciiChars(value),\n                                errorType: \"value\"\n                            },\n                            {\n                                checker: (value) => !userIdList.includes(value),\n                                errorType: \"relation\"\n                            },\n                        ]}\n                        width={300}\n                        isCenter\n                    />\n                    <FormUtil.InputTextFormBak\n                        placeholder={'password'}\n                        isPassword\n                        checkable={password}\n                        setCheckable={setPassword}\n                        validates={[\n                            {\n                                checker: (value) => ValidateUtil.checkRequired(value),\n                                errorType: \"required\"\n                            },\n                            {\n                                checker: (value) => ValidateUtil.checkStringLength(value, 4, 20),\n                                errorType: \"length\"\n                            },\n                            {\n                                checker: (value) => value === passwordConfirm.value,\n                                errorType: \"relation\"\n                            }\n                        ]}\n                        dependency={[passwordConfirm]}\n                        width={300}\n                        isCenter\n                    />\n                    <FormUtil.InputTextFormBak\n                        placeholder={'password*'}\n                        isPassword\n                        checkable={passwordConfirm}\n                        setCheckable={setPasswordConfirm}\n                        validates={[\n                            {\n                                checker: (value) => ValidateUtil.checkRequired(value),\n                                errorType: \"required\"\n                            },\n                            {\n                                checker: (value) => ValidateUtil.checkStringLength(value, 4, 20),\n                                errorType: \"length\"\n                            },\n                            {\n                                checker: (value) => value === password.value,\n                                errorType: \"relation\"\n                            }\n                        ]}\n                        dependency={[password]}\n                        width={300}\n                        isCenter\n                    />\n                    <FormUtil.InfoFrame textRecords={messageList} />\n                    <FormUtil.ButtonRecord\n                        buttons={[\n                            {\n                                label: 'Enter', isEnable: isLoginInfoOK(), callback: () => {\n                                    setRegist(true);\n                                }\n                            },\n                        ]}\n                    />\n                </>}\n            />\n        </_Frame>\n        <_Frame isVisible={isRegist}>\n            <FormUtil.BorderPanel\n                title=\"Proof not a robot\"\n                innerJsx={<>\n                    <FormUtil.Message\n                        message={'Please, input the same 6 number as the picture.'}\n                    />\n                    <_AuthText src={authPicture} />\n                    <FormUtil.ButtonRecord\n                        buttons={[\n                            {\n                                label: 'Change', callback: () => {\n                                    setAuthCollation(createAuthText());\n                                    setAuthInput({ value: '', errors: [] });\n                                }\n                            },\n                        ]}\n                    />\n                    {/* 照合する文字列 */}\n                    <FormUtil.InputTextFormBak\n                        placeholder={'6 numbers'}\n                        checkable={authInput}\n                        setCheckable={setAuthInput}\n                        width={300}\n                        isCenter\n                    />\n                    <FormUtil.ButtonRecord\n                        buttons={[\n                            { label: 'Regist', isEnable: isAuthOK(), callback: registAction },\n                        ]}\n                    />\n                </>}\n            />\n            <FormUtil.MessageLink\n                message=\"Return to login information.\"\n                clickAction={() => {\n                    setRegist(false);\n                }}\n            />\n        </_Frame>\n    </>);\n};\n\nexport default LoginCreateAccount;\n\nconst _Frame = styled.div<{\n    isVisible: boolean;\n}>`\n    display: ${props => props.isVisible ? 'block' : 'none'};\n`;\n\nconst _AuthText = styled.img<{\n}>`\n    display: block;\n    text-align: center;\n    margin: 4px auto;\n    background-color: #f7f0f0;\n    border: 1px solid #888888;\n    box-sizing: border-box;\n`;","import { useContext, useEffect, useMemo, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport Styles from \"../../../base/design/styles\";\nimport DataUtil from \"../../../utils/dataUtil\";\nimport FormUtil from \"../../../utils/form/formUtiil\";\nimport ValidateUtil from \"../../../utils/form/validateUtil\";\nimport { GlobalContext } from \"../../entry/systemEntry\";\nimport ConfirmDialog from \"../confirmDialog\";\n\nconst LoginLogin = () => {\n    const { store, setStore } = useContext(GlobalContext);\n\n    const [isForget, setForget] = useState(false);\n\n    const [userId, setUserId] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    const [password, setPassword] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    const [email, setEmail] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    const [messageList, setMessageList] = useState<string[]>([]);\n\n    useEffect(() => {\n        const list: string[] = [];\n        if (userId.errors.length > 0) {\n            switch (userId.errors[0]) {\n                case 'required': list.push('[user id] is required.'); break;\n                case 'length': list.push('[user id] set a value between 4 and 20.'); break;\n                case 'value': list.push('[user id] accepts only half-width alphanumeric characters.'); break;\n                case 'relation': list.push('[user id] already in use.'); break;\n            }\n        }\n        if (password.errors.length > 0) {\n            switch (password.errors[0]) {\n                case 'required': list.push('[password] is required.'); break;\n                case 'length': list.push('[password] set a value between 4 and 20.'); break;\n            }\n        }\n        setMessageList(list);\n    }, [userId, password]);\n\n    /**\n     * Enterボタン押下時の処理\n     */\n    const enterAction = () => {\n        // alert(`Confirmation passwords don't match.`);\n        (async () => {\n            const results = await DataUtil.findUserInfoLogin(userId.value, password.value);\n            console.log(JSON.stringify(results));\n            if (results.length > 0) {\n                store.system.user = {\n                    seq: results[0].seq,\n                    id: results[0].id,\n                    password: results[0].password,\n                    email: results[0].email,\n                };\n                store.system.dialog = <ConfirmDialog.Component\n                    message=\"Login successful!\"\n                />;\n                setStore({...store});\n            } else {\n                setMessageList(['Incorrect user id or password.']);\n                // setPassword({ ...password, value: '' });\n            }\n        })();\n    }\n\n    const isLoginInfoOK = () => {\n        return userId.errors.length === 0 && password.errors.length === 0;\n    }\n\n    return (<>\n        <_Frame isVisible={!isForget}>\n            <FormUtil.BorderPanel\n                title=\"Login information\"\n                innerJsx={<>\n                    <FormUtil.Message\n                        message={'Please, enter User ID/Pass.'}\n                    />\n                    <FormUtil.InputTextFormBak\n                        placeholder={'user id'}\n                        checkable={userId}\n                        setCheckable={setUserId}\n                        validates={[\n                            {\n                                checker: (value) => ValidateUtil.checkRequired(value),\n                                errorType: \"required\"\n                            },\n                            {\n                                checker: (value) => ValidateUtil.checkStringLength(value, 4, 20),\n                                errorType: \"length\"\n                            },\n                            {\n                                checker: (value) => ValidateUtil.checkAsciiChars(value),\n                                errorType: \"value\"\n                            }\n                        ]}\n                        width={300}\n                        isCenter\n                    />\n                    <FormUtil.InputTextFormBak\n                        placeholder={'password'}\n                        isPassword\n                        checkable={password}\n                        setCheckable={setPassword}\n                        validates={[\n                            {\n                                checker: (value) => ValidateUtil.checkRequired(value),\n                                errorType: \"required\"\n                            },\n                            {\n                                checker: (value) => ValidateUtil.checkStringLength(value, 4, 20),\n                                errorType: \"length\"\n                            }\n                        ]}\n                        width={300}\n                        isCenter\n                    />\n                    <FormUtil.InfoFrame textRecords={messageList} />\n                    <FormUtil.ButtonRecord\n                        buttons={[\n                            { label: 'Enter', isEnable: isLoginInfoOK(), callback: enterAction },\n                        ]}\n                    />\n                </>}\n            />\n            <FormUtil.MessageLink\n                message=\"Forgot your login information?\"\n                clickAction={() => {\n                    setForget(true);\n                }}\n            />\n        </_Frame>\n        <_Frame isVisible={isForget}>\n            <FormUtil.BorderPanel\n                title=\"Email\"\n                innerJsx={<>\n                    <FormUtil.Message\n                        message={'Submit login information to account address.'}\n                    />\n                    <FormUtil.InputTextFormBak\n                        placeholder={'email'}\n                        checkable={email}\n                        setCheckable={setEmail}\n                        validates={[\n                            {\n                                checker: (value) => ValidateUtil.checkRequired(value),\n                                errorType: \"required\"\n                            },\n                            {\n                                checker: (value) => ValidateUtil.checkStringLength(value, 4, 40),\n                                errorType: \"length\"\n                            },\n                            {\n                                checker: (value) => {\n                                    return value.length === 0 || value.split('@').length === 2;\n                                },\n                                errorType: \"value\"\n                            }\n                        ]}\n                        width={500}\n                        isCenter\n                    />\n                    <FormUtil.ButtonRecord\n                        buttons={[\n                            {\n                                label: 'Send', isEnable: email.errors.length === 0, callback: () => {\n                                    DataUtil.findUserInfoFromEmail(email.value).then((list) => {\n                                        if (list.length > 0) {\n                                            const info = list[0];\n                                            const hash = DataUtil.getHashedFromUserSeq(info.seq);\n                                            const url = `https://demo-app.licresia.com/#/user?v=${hash}`;\n                                            DataUtil.sendQueryRequestToMailAPI({\n                                                from: 'info@licresia.com',\n                                                to: email.value,\n                                                subject: '【LiCreSia】support',\n                                                text: `Your login information is as follows.\\n\\nURL: ${url}\\nUSR ID: ${info.id}`\n                                            });\n                                            // dispatcher.system.setDialog(<ConfirmDialog.Component message=\"Your login information has been sent!\" />);\n                                        } else {\n                                            // dispatcher.system.setDialog(<ConfirmDialog.Component message=\"This email address is not registered.\" />);\n                                        }\n                                    });\n                                }\n                            }\n                        ]}\n                    />\n                </>}\n            />\n            <FormUtil.MessageLink\n                message=\"Return to login information.\"\n                clickAction={() => {\n                    setForget(false);\n                }}\n            />\n        </_Frame>\n    </>);\n};\n\nexport default LoginLogin;\n\n\nconst _Frame = styled.div<{\n    isVisible: boolean;\n}>`\n    display: ${props => props.isVisible ? 'block' : 'none'};\n`;\n","import { useContext, useEffect, useMemo, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport Styles from \"../../../base/design/styles\";\nimport CanvasUtil from \"../../../utils/canvasUtil\";\nimport FormUtil from \"../../../utils/form/formUtiil\";\nimport ValidateUtil from \"../../../utils/form/validateUtil\";\nimport { GlobalContext } from \"../../entry/systemEntry\";\nimport LoginCreateAccount from \"./loginCreateAccount\";\nimport LoginLogin from \"./loginLogin\";\n\nconst WIDTH = 600;\nconst HEIGHT = 500;\n\n/**\n * ログインフレームのコンポーネント\n * @returns \n */\nconst LoginFrame = () => {\n    const { store, setStore } = useContext(GlobalContext);\n\n    const [isCreate, setCreate] = useState(false);\n\n    const logo = useMemo(() => {\n        return CanvasUtil.getLogoURL();\n    }, []);\n\n    return (\n        <_Frame\n            width={WIDTH} height={HEIGHT}\n        >\n            <_LogoDiv>\n                <img src={logo} />\n            </_LogoDiv>\n            <_Header>\n                <_TypeSwitch isActive={!isCreate} onClick={() => {\n                    setCreate(false);\n                }}>Login</_TypeSwitch>\n                <_TypeSwitch isActive={isCreate} onClick={() => {\n                    setCreate(true);\n                }}>Create Account</_TypeSwitch>\n            </_Header>\n            {!isCreate ? <LoginLogin /> : <LoginCreateAccount />}\n            {/* <_Footer>\n                <FormUtil.ButtonRecord\n                    buttons={[\n                        { name: 'Close', callback: closeAction },\n                        { name: 'Enter', callback: enterAction },\n                    ]}\n                />\n            </_Footer> */}\n        </_Frame>\n    );\n}\n\nexport default LoginFrame;\n\nconst _Frame = styled.div<{\n    width: number;\n    height: number;\n}>`\n    display: inline-block;\n    position: absolute;\n    z-index: 11;\n    top: calc(50% - ${props => props.height / 2}px);\n    left: calc(50% - ${props => props.width / 2}px);\n    width: ${props => props.width}px;\n    height: ${props => props.height}px;\n    background-color: #e7e7e7e2;\n    border: 1px solid #9e9e9e;\n    border-radius: 4px;\n`;\n\nconst _LogoDiv = styled.div<{\n}>`\n    display: inline-block;\n    width: 100%;\n    height: 80px;\n    background-color: #eeeaea;\n    text-align: center;\n`;\nconst _Header = styled.div<{\n}>`\n    display: inline-block;\n    width: 100%;\n    height: 50px;\n    /* background-color: #d1d1d1; */\n    text-align: center;\n`;\n\nconst _TypeSwitch = styled.div<{\n    isActive: boolean;\n}>`\n    ${Styles.CSS_LABEL_MIDIUM};\n    background-color: #bf808075;\n    ${props => !props.isActive ? '' : css`\n        background-color: #c7a73e;\n    `}\n    color: white;\n    width: 250px;\n    margin: 10px 10px;\n    text-align: center;\n    &:hover {\n    background-color: #bf8080a2;\n        ${props => !props.isActive ? '' : css`\n            background-color: #c7a73e;\n        `}\n    }\n`;\nconst _Record = styled.div<{\n}>`\n    display: inline-block;\n    margin: 2px 0 0 0;\n    width: 100%;\n    height: 50px;\n    /* background-color: #e6e3c1; */\n    text-align: left;\n`;\n\nconst _Label = styled.div<{\n}>`\n    ${Styles.CSS_LABEL_MIDIUM};\n    /* background-color: #80e45832; */\n    color: #bd2d2d;\n    width: 150px;\n    margin: 10px 0 0 5px;\n    text-align: center;\n`;\n\nconst _TextField = styled.input<{\n}>`\n    ${Styles.CSS_LABEL_MIDIUM};\n    background-color: #f7f09787;\n    width: 300px;\n    margin: 10px 0 0 15px;\n    text-align: center;\n    border: solid 1px #5e5e5e;\n    text-align: left;\n    box-sizing: border-box;\n    border-radius: 4px;\n`;\n\nconst _Footer = styled.div<{\n}>`\n    display: inline-block;\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    padding: 6px 4px 0 0;\n    box-sizing: border-box;\n    width: 100%;\n    height: 50px;\n    background-color: #d1d1d1;\n    text-align: right;\n`;\n\nconst _ExecutableButton = styled.div<{\n    isEnable: boolean;\n}>`\n    ${Styles.CSS_LABEL_MIDIUM};\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE};\n    background-color: #5c9253;\n    width: 150px;\n    margin: 10px 5px 0 0;\n    text-align: center;\n    &:hover {\n        background-color: #7eaf75;\n    }\n`;","import { useContext, useEffect, useMemo, useState } from \"react\";\nimport { GiTurret } from \"react-icons/gi\";\nimport styled, { css } from \"styled-components\";\nimport { TabbedPane } from \"../../base/components/tab/tabbedPane\";\nimport Styles from \"../../base/design/styles\";\nimport StoreSystem from \"../../redux/store/storeSystem\";\nimport CanvasUtil from \"../../utils/canvasUtil\";\nimport DataUtil from \"../../utils/dataUtil\";\nimport FormUtil from \"../../utils/form/formUtiil\";\nimport ValidateUtil from \"../../utils/form/validateUtil\";\nimport ConfirmDialog from \"../dialog/confirmDialog\";\nimport { GlobalContext } from \"../entry/systemEntry\";\n\nconst WIDTH = 750;\nconst HEIGHT = 600;\n/**\n * アカウントフレームのコンポーネント\n * @returns \n */\nconst AccountFrame = () => {\n    const { store, setStore } = useContext(GlobalContext);\n\n    const [tabIndex, setTabIndex] = useState(0);\n\n    const [userId, setUserId] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    const [oldPass, setOldPass] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    const [newPass, setNewPass] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    const [newPassConfirm, setNewPassConfirm] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n    const [email, setEmail] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\n\n\n    const [userIdList, setUserIdList] = useState<string[]>([]);\n    const [emailList, setEmailList] = useState<string[]>([]);\n\n    const [isModify, setModify] = useState(false);\n    const loginProps = store.system.user as StoreSystem.User;\n\n    const reloadInfo = () => {\n        setUserId({ ...userId, value: loginProps.id });\n        setNewPass({ ...newPass, value: '' });\n        setNewPassConfirm({ ...newPassConfirm, value: '' });\n        setEmail({ ...email, value: loginProps.email });\n        setOldPass({ ...oldPass, value: loginProps.password });\n    }\n\n    useEffect(() => {\n        DataUtil.findUserInfoList().then(list => {\n\n            const userIdList: string[] = [];\n            const emailList: string[] = [];\n            list.forEach(info => {\n                if (info.id !== loginProps.id) userIdList.push(info.id);\n                if (info.email !== '') emailList.push(info.email);\n            });\n            setUserIdList(userIdList);\n            setEmailList(emailList);\n        });\n\n        const hash = DataUtil.getHashedFromUserSeq(loginProps.seq);\n\n        // ユーザページのURLに変更する。\n        window.history.replaceState('', '', `/#/user?v=${hash}`);\n\n        reloadInfo();\n\n        // 閉じる際にURLを元に戻す\n        return () => {\n            // alert('destroy');\n            window.history.replaceState('', '', `/#/`);\n        }\n    }, []);\n\n    const userTabJsx: JSX.Element = (\n        <_Wrap>\n\n            <FormUtil.InputTextFormBak\n                titleLabel={'user id'}\n                checkable={userId}\n                setCheckable={setUserId}\n                validates={[\n                    {\n                        checker: (value) => ValidateUtil.checkStringLength(value, 4, 20),\n                        errorType: \"length\"\n                    },\n                    {\n                        checker: (value) => ValidateUtil.checkAsciiChars(value),\n                        errorType: \"value\"\n                    },\n                    {\n                        checker: (value) => !userIdList.includes(value),\n                        errorType: \"relation\"\n                    },\n                ]}\n                width={300}\n                marginTop={5}\n                isReadOnly={!isModify}\n            />\n            <FormUtil.InputTextFormBak\n                titleLabel={'new pass'}\n                isPassword\n                checkable={newPass}\n                setCheckable={setNewPass}\n                validates={[\n                    {\n                        checker: (value) => ValidateUtil.checkStringLength(value, 4, 20),\n                        errorType: \"length\"\n                    },\n                    {\n                        checker: (value) => value === newPassConfirm.value,\n                        errorType: \"relation\"\n                    }\n                ]}\n                dependency={[newPassConfirm]}\n                width={300}\n                marginTop={5}\n                isReadOnly={!isModify}\n            />\n            <FormUtil.InputTextFormBak\n                titleLabel={'new pass*'}\n                isPassword\n                checkable={newPassConfirm}\n                setCheckable={setNewPassConfirm}\n                validates={[\n                    {\n                        checker: (value) => ValidateUtil.checkStringLength(value, 4, 20),\n                        errorType: \"length\"\n                    },\n                    {\n                        checker: (value) => value === newPass.value,\n                        errorType: \"relation\"\n                    }\n                ]}\n                dependency={[newPass]}\n                width={300}\n                marginTop={5}\n                isReadOnly={!isModify}\n            />\n            <FormUtil.InputTextFormBak\n                titleLabel={'email'}\n                checkable={email}\n                setCheckable={setEmail}\n                validates={[\n                    {\n                        checker: (value) => ValidateUtil.checkStringLength(value, 4, 40),\n                        errorType: \"length\"\n                    },\n                    {\n                        checker: (value) => {\n                            return value.length === 0 || value.split('@').length === 2;\n                        },\n                        errorType: \"value\"\n                    },\n                    {\n                        checker: (value) => !emailList.includes(value),\n                        errorType: \"relation\"\n                    },\n                ]}\n                // width={500}\n                marginTop={5}\n                isReadOnly={!isModify}\n            />\n            <FormUtil.InputTextFormBak\n                titleLabel={'old pass'}\n                isPassword\n                checkable={oldPass}\n                setCheckable={setOldPass}\n                validates={[\n                    {\n                        checker: (value) => value === loginProps.password,\n                        errorType: \"relation\"\n                    }\n                ]}\n                // dependency={[passwordConfirm]}\n                width={300}\n                marginTop={55}\n                isReadOnly={!isModify}\n            />\n        </_Wrap>\n    );\n\n    // 登録ボタンの活性状態\n    const permitRegist = (\n        userId.errors.length === 0\n        && newPass.errors.length === 0\n        && newPassConfirm.errors.length === 0\n        && email.errors.length === 0\n        && oldPass.errors.length === 0\n    );\n\n    const updateUserInfo = () => {\n        const passwordStr = newPass.value.length === 0 ? '' : `,password = '${newPass.value}'`;\n        DataUtil.sendQueryRequestToAPI('update',\n            `UPDATE user_tbl SET id = '${userId.value}', email = '${email.value}'${passwordStr}\n            WHERE seq = ${loginProps?.seq}`\n        ).then(() => {\n            loginProps.id = userId.value;\n            if (newPass.value.length > 0) {\n                loginProps.password = newPass.value;\n            }\n            loginProps.email = email.value;\n            // dispatcher.system.setUserEnv({ ...store.userEnv, login: { ...loginProps } });\n            // dispatcher.system.setDialog(<ConfirmDialog.Component message=\"Modify successful!\" />);\n        });\n    }\n\n    return (\n        <_Frame\n            width={WIDTH} height={HEIGHT}\n        >\n            <_Header>\n                <FormUtil.Message\n                    message=\"If you bookmark this page, you can easily login by URL.\"\n                />\n            </_Header>\n            <_Body>\n                <TabbedPane\n                    tabElements={[\n                        { name: 'User', enable: false, cont: userTabJsx },\n                        { name: 'Security', enable: false, cont: <></> },\n                    ]}\n                    activeNo={tabIndex}\n                    selectTabIndex={(index: number) => setTabIndex(index)}\n                />\n            </_Body>\n            <_Footer>\n                <FormUtil.ButtonRecord\n                    buttons={[\n                        {\n                            label: 'Close',\n                            callback: () => {\n                                // dispatcher.system.closeDialog();\n                            }\n                        },\n                        {\n                            label: 'Cancel',\n                            isEnable: isModify,\n                            callback: () => {\n                                setModify(false);\n                                reloadInfo();\n                            }\n                        },\n                        {\n                            label: !isModify ? 'Modify' : 'Regist',\n                            isEnable: !isModify || permitRegist,\n                            callback: () => {\n                                if (!isModify) {\n                                    setModify(true);\n                                    setOldPass({ ...oldPass, value: '' });\n                                }\n                                else {\n                                    updateUserInfo();\n                                }\n                            }\n                        }\n                    ]}\n                />\n            </_Footer>\n        </_Frame>\n    );\n}\n\n\nexport default AccountFrame;\n\nconst _Frame = styled.div<{\n    width: number;\n    height: number;\n}>`\n    display: inline-block;\n    position: absolute;\n    z-index: 11;\n    top: calc(50% - ${props => props.height / 2}px);\n    left: calc(50% - ${props => props.width / 2}px);\n    width: ${props => props.width}px;\n    height: ${props => props.height}px;\n    background-color: #e7e7e7eb;\n    border: 1px solid #9e9e9e;\n    border-radius: 4px;\n`;\n\nconst _LogoDiv = styled.div<{\n}>`\n    display: inline-block;\n    width: 100%;\n    height: 80px;\n    background-color: #eeeaea;\n    text-align: center;\n`;\nconst _Header = styled.div<{\n}>`\n    display: inline-block;\n    width: 100%;\n    height: 50px;\n    /* background-color: #d1d1d1; */\n    /* text-align: center; */\n`;\nconst _Body = styled.div<{\n}>`\n    display: inline-block;\n    width: 100%;\n    height: calc(100% - 100px);\n    padding: 4px;\n    box-sizing: border-box;\n    /* background-color: #d1d1d1; */\n    text-align: center;\n`;\n\n\nconst _Footer = styled.div<{\n}>`\n    display: inline-block;\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    padding: 6px 4px 0 0;\n    box-sizing: border-box;\n    width: 100%;\n    height: 50px;\n    background-color: #d1d1d1;\n    text-align: right;\n`;\n\n\nconst _Wrap = styled.div<{\n}>`\n    display: inline-block;\n    width: 100%;\n    height: 100%;\n    background-color: #cecece;\n`;","import styled, { css } from \"styled-components\";\nimport { TOTAL_HEADER_WIDTH } from \"../../utils/systemConst\";\nimport { ImUser } from 'react-icons/im'\nimport { MdOutlineLanguage } from 'react-icons/md'\nimport { useContext, useEffect, useState } from \"react\";\nimport { GlobalContext } from \"./systemEntry\";\nimport DataUtil from \"../../utils/dataUtil\";\nimport ConfirmDialog from \"../dialog/confirmDialog\";\nimport LoginFrame from \"../dialog/login/loginFrame\";\nimport AccountFrame from \"../dialog/accountFrame\";\n\nconst TotalHeader = () => {\n\n    const { store, setStore } = useContext(GlobalContext);\n\n    const user = store.system.user;\n\n    const [userId, setUserId] = useState('');\n\n    useEffect(() => {\n        if (user != null) {\n            setUserId('@' + user.id);\n        }\n    }, [user]);\n\n    const authButtonJsx = user == null ? (\n        <_LoginButton onClick={() => {\n            store.system.dialog = <LoginFrame />;\n            setStore({ ...store });\n            console.log(window.location.origin);\n        }}>\n            <div><ImUser /></div>\n            Login / Sign up\n        </_LoginButton>\n    ) : (<>\n        <_UserName\n            isEntry={user != null}\n            onClick={() => {\n                store.system.dialog = <AccountFrame />;\n                setStore({ ...store });\n            }}\n        >{userId}</_UserName>\n        <_LoginButton onClick={() => {\n            store.system.user = null;\n\n            store.system.dialog = <ConfirmDialog.Component\n                message={'Logout.\\nSee you next time!'}\n            />;\n            setStore({ ...store });\n        }}>\n            <div><ImUser /></div>\n            Logout\n        </_LoginButton>\n    </>);\n    return (\n        <_Wrap>\n            <_Label>\n                <_ACCENT>Partice</_ACCENT>&nbsp;<_NORMAL>Simulator</_NORMAL>\n            </_Label>\n            <_Menu>\n                {authButtonJsx}\n                <_Language>\n                    <div><MdOutlineLanguage /></div>\n                </_Language>\n            </_Menu>\n        </_Wrap>\n    );\n}\n\nexport default TotalHeader;\n\nconst _Wrap = styled.div`\n    display: inline-block;\n    position: relative;\n    width: 100%;\n    height: ${TOTAL_HEADER_WIDTH}px;\n    background: linear-gradient(to bottom, #192f7e, #000540, #192f7e);\n    /* background-color: #c2c2c2; */\n    box-shadow: 0 0 8px 0 #000b3a48;\n`;\n\nconst _Label = styled.div`\n    display: inline-block;\n    margin: 2px 0 0 10px;\n    width: 200px;\n    height: calc(100% - 4px);\n    /* background-color: #00000013; */\n    font-size: 34px;\n    font-weight: 600;\n    line-height: 36px;\n    font-style: italic;\n    text-shadow: 1px 2px 3px #dbdbdb6a;\n`;\n\nconst _NORMAL = styled.span`\n    color: #9fc2d1;\n`;\nconst _ACCENT = styled.span`\n    font-size: 34px;\n    color: #ececec;\n`;\n\n\n\nconst _Menu = styled.div`\n    display: inline-block;\n    /* width: 300px; */\n    height: 100%;\n    position: absolute;\n    right: 30px;\n    /* background-color: #ff00002b; */\n`\n\nconst _MenuItem = styled.div`\n    background-color: #c9c7c7;\n    &:hover {\n        background-color: #cf9bae;\n    }\n    transition: background-color 800ms;\n`\n\nconst _LoginButton = styled(_MenuItem)`\n    display: inline-block;\n    /* width: 240px; */\n    padding: 0 30px;\n    margin: 5px 10px 0 0;\n    height: calc(100% - 10px);\n    border-radius: 20px;\n    /* background: linear-gradient(to bottom, #e9baba, #d39d9d, #e9baba); */\n    /* background-color: #adadad; */\n    /* border: 1px solid #7e7e7e; */\n    /* box-shadow: 0 0 8px 0 #000b3a48; */\n    /* text-shadow: 1px 2px 3px #808080ba; */\n    text-align: center;\n    font-size: 22px;\n    font-weight: 600;\n    line-height: 28px;\n    color: #ffffff;\n    vertical-align: top;\n\n    & div {\n        display: inline-block;\n        /* background-color: #0000007d; */\n        margin: 2px 5px 0 0;\n        vertical-align: top;\n    }\n`;\n\nconst _UserName = styled.div<{\n    isEntry: boolean;\n}>`\n    display: inline-block;\n    /* width: 240px; */\n    margin: 5px 20px 0 0;\n    height: calc(100% - 10px);\n    text-align: center;\n    font-size: 22px;\n    font-weight: 600;\n    line-height: 28px;\n    color: #9afff292;\n    ${props => props.isEntry ? '' : css`\n        color: #ff393983;\n    `}\n    vertical-align: top;\n`;\n\nconst _Language = styled(_MenuItem)`\n    display: inline-block;\n    width: ${TOTAL_HEADER_WIDTH - 6}px;\n    height: ${TOTAL_HEADER_WIDTH - 6}px;\n    margin: 3px 0 0 0;\n    border-radius: 50%;\n    /* background: linear-gradient(to bottom, #e9baba, #d39d9d, #e9baba); */\n    /* background-color: #48aa9d; */\n    /* border: 1px solid #7e7e7e; */\n    /* box-shadow: 0 0 8px 0 #000b3a48; */\n    /* text-shadow: 1px 2px 3px #808080ba; */\n    /* text-align: center; */\n    font-size: 28px;\n    font-weight: 600;\n    color: #ffffff;\n    & div {\n        display: inline-block;\n        margin: 2px 0 0 5px;\n        /* background-color: #0000007d; */\n        vertical-align: top;\n    }\n`;","import { createContext, useCallback, useEffect, useReducer, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { initialStore, Store } from '../../redux/store/store';\nimport { MAIN_FRAME_MARGIN, TOTAL_HEADER_WIDTH } from '../../utils/systemConst';\nimport GloballDialog from '../dialog/globalDialog';\nimport MainFrame from './mainFrame';\nimport Splash from './splash';\nimport TotalHeader from './totalHeader';\n\n\ntype GlobalContextType = {\n    store: Store;\n    setStore: React.Dispatch<React.SetStateAction<Store>>;\n}\n\nexport const GlobalContext = createContext({} as GlobalContextType);\n\nconst SystemEntry = () => {\n\n    const [store, setStore] = useState(initialStore);\n    return (\n        <GlobalContext.Provider value={{ store, setStore }}>\n            <>\n                {!store.system.isSplash ? <></> :\n                    <Splash\n                        remove={() => {\n                            setStore({...store, system: {\n                                ...store.system, isSplash: false\n                            }});\n                        }}\n                    />}\n                <_Wrap>\n                    <GloballDialog />\n                    <TotalHeader />\n                    <_MainDiv>\n                        <MainFrame />\n                    </_MainDiv>\n                </_Wrap>\n            </>\n        </GlobalContext.Provider>\n    );\n}\n\nexport default SystemEntry;\n\nconst _Wrap = styled.div`\n    display: inline-block;\n    position: relative;\n    width: 100%;\n    height: 100%;\n    background-color: #364887;\n`;\n\nconst _MainDiv = styled.div`\n    display: inline-block;\n    width: 100%;\n    height: calc(100% - ${TOTAL_HEADER_WIDTH}px);\n    /* background-color: #c2c2c2; */\n`;","import React, { useEffect } from 'react';\nimport SystemEntry from './system/contents/entry/systemEntry';\n\nfunction App() {\n\n  useEffect(() => {\n    // 右クリック無効\n    document.oncontextmenu = function () { return false; }\n\n    // window.addEventListener(\"keydown\", function (e) {\n    //   // space and arrow keys\n    //   if ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {\n    //     e.preventDefault();\n    //   }\n    // }, false);\n\n    document.onkeydown = (e) => {\n      // if (!['F5'].includes(e.key)) {\n      //   return false;\n      // }\n      if (e.ctrlKey && ['f', 's'].includes(e.key)) {\n        return false;\n      }\n    }\n\n  }, []);\n  return (\n    <SystemEntry />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst REACT_APP_AUTH0_DOMAIN = 'dev-a0p0m4lr.us.auth0.com';\nconst REACT_APP_AUTH0_CLIENT_ID = 'ABaWpYVBZwTr3tkyxhq1kWh2YwT4epew';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}