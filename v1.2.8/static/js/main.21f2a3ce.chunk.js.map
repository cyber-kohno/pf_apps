{"version":3,"sources":["system/utils/dataUtil.tsx","system/redux/store/store.tsx","system/utils/systemConst.tsx","system/contents/dialog/globalDialog.tsx","system/base/design/styles.tsx","system/base/components/tab/channelPane.tsx","system/base/components/tab/tabbedPane.tsx","system/utils/form/formUtiil.tsx","system/utils/treeUtil.tsx","system/contents/dialog/confirmDialog.tsx","system/utils/form/validateUtil.tsx","system/utils/canvasUtil.tsx","system/contents/graphic/particle.tsx","system/contents/graphic/drawUtil.tsx","system/contents/graphic/vectorUtil.tsx","system/contents/create/factory/util/paramUtil.tsx","system/contents/create/preview/modulateBuilder.tsx","system/contents/create/preview/previewUtil.tsx","system/contents/create/preview/logicPreviewFrame.tsx","system/contents/create/factory/util/logicElementUtil.tsx","system/contents/create/factory/detail/logic/editorArgumentMng.tsx","system/contents/create/factory/detail/common/modifyOperations.tsx","system/contents/create/factory/detail/logic/editorParamItem.tsx","system/contents/create/factory/detail/logic/editorArgumentItem.tsx","system/contents/create/factory/detail/seed/editorSeedMng.tsx","system/contents/create/factory/detail/logic/editorLogicMng.tsx","system/contents/create/factory/detail/logic/editorLogicItem.tsx","system/contents/create/factory/detail/logic/editorBehiviorMng.tsx","system/contents/create/factory/detail/logic/editorVisualMng.tsx","system/contents/create/factory/detail/logic/editorInheritConnMng.tsx","system/contents/create/factory/detail/logic/editorInheritConnector.tsx","system/contents/create/factory/dialog/sendTemplateDialog.tsx","system/contents/create/factory/detail/logic/editorSendManager.tsx","system/contents/create/factory/detail/logic/editorFieldMng.tsx","system/contents/create/factory/detail/logic/editorExtendMng.tsx","system/contents/create/factory/detail/seed/editorSeedItem.tsx","system/contents/create/factory/detail/seed/editorThumbnailMng.tsx","system/contents/create/factory/detail/seed/editorThumbnailItem.tsx","system/contents/create/factory/detail/seed/editorSampleItem.tsx","system/contents/create/factory/detail/seed/editorSampleMng.tsx","system/contents/create/factory/detail/seed/editorInterfaceManager.tsx","system/contents/create/factory/detail/seed/editorSeedArgMng.tsx","system/contents/create/factory/detail/seed/editorSeedArgItem.tsx","system/contents/create/factory/detail/seed/editorSeedSendMng.tsx","system/contents/create/factory/util/logicUtil.tsx","system/contents/create/factory/logicMainteTab.tsx","system/contents/create/manage/manageTab.tsx","system/contents/create/launcher/launcherTab.tsx","system/contents/create/createChannel.tsx","system/contents/entry/directView.tsx","system/contents/entry/directLogin.tsx","system/contents/home/releaseNote.tsx","system/contents/home/homeChannel.tsx","system/contents/entry/mainFrame.tsx","system/contents/entry/splash.tsx","system/contents/dialog/login/loginCreateAccount.tsx","system/contents/dialog/login/loginLogin.tsx","system/contents/dialog/login/loginFrame.tsx","system/contents/dialog/accountFrame.tsx","system/contents/entry/totalHeader.tsx","system/contents/entry/systemEntry.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DB_SERVER_DOMAIN","APP_SERVER_DOMAIN","getUserHashBuilder","Hashids","getScoreHashBuilder","seq","hash","encode","Base64","hashedSeq","hashids","Number","decode","getHashedFromScoreSeq","sendQueryRequestToAPI","scoreSeq","hashedKey","json","fetch","mode","method","headers","Accept","body","JSON","stringify","createSendMailRequestInit","queryType","sql","databaseName","createQueryRequestInit","findUserInfoList","a","response","results","map","res","id","email","password","nextSeq","DataUtil","userSeq","val","content","encodeURIComponent","zlib","gzipSync","toString","buffer","Buffer","from","result","unzipSync","decodeURIComponent","date","year_str","getFullYear","month_str","getMonth","day_str","getDate","hour_str","getHours","minute_str","getMinutes","second_str","getSeconds","format_str","replace","initialStore","system","isSplash","user","dialog","SystemConst","GloballDialog","useContext","GlobalContext","store","setStore","_Blind","onClick","styled","div","FONT_SMALL","FONT_MIDIUM","CSS_LABEL","css","Styles","_CSS_LABEL_MIDIUM","ChannelPane","props","useState","activeNo","setActiveNo","useEffect","_LabelList","tabElements","tab","index","name","icon","isActive","isEnable","selectTab","undefined","selectTabIndex","_ContList","cont","ChannelLabel","_Item","_Icon","_Label","ChannelContents","_Contents","CSS_BUTTON_DISABLE","TabbedPane","tabRecordNum","enable","TabLabel","_TabLabel","TabContents","FormUtil","checkables","forEach","checkable","errors","length","type","isPassword","validaters","validates","dependency","dep","value","getErrors","validater","checker","push","errorType","setCheckable","isVisible","textAlign","isCenter","marginTop","titleLabel","_ItemnLabel","_ItemnInputBak","hasTitle","width","placeholder","onChange","e","target","readOnly","isReadOnly","jsx","labelWidth","isNaN","setNaN","isNumber","concat","step","_ItemnInput","valueAsNumber","onBlur","marginLeft","headBlank","list","slice","unshift","labelText","_ItemCombobox","item","i","_Option","disabled","isDisabled","buttons","button","_Button","callback","label","_Message","message","isLink","clickAction","_BorderText","title","_BorderPanel","innerJsx","height","_InfoDiv","color","textRecords","text","isRelation","isUse","_Switch","find","_Record","CSS_LABEL_MIDIUM","input","select","option","CSS_LABEL_SMALL","TreeUtil","data","parent","depth","isOpen","children","node","parentNode","isDisable","focusNode","ref","useRef","buildElementNodeFromData","build","dataNode","child","rootDataNode","rootElementNode","setRootElementNode","jsxList","useMemo","buildJsxRecords","element","spaceList","isCurrent","current","scrollWidth","tempNode","isRelationNode","space","lines","_LineFull","_LineTop","_LineRight","_Space","_Branch","_Jsx","clickEvent","onDoubleClick","getLabelJsx","invalidate","_Wrap","ConfirmDialog","_Frame","_Main","_Inner","split","msg","Message","ButtonRecord","str","min","max","checkIncludesChars","ch","charAt","indexOf","num","conditions","ValidateUtil","createURL","draw","canvas","document","createElement","ctx","getContext","toDataURL","CanvasUtil","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","font","fillStyle","fillText","adjust","measureText","save","WIDTH","AUTH_TEXT_WIDTH","SIZE","AUTH_TEXT_HEIGHT","rotate","Math","PI","char","fontRand","random","alphaRand","Particle","owner","pos","prevPos","vec","frame","limit","isLive","drawer","extend","update","x","xy","y","this","param","radiusBase","radius","self","shrinkStartRate","start","floor","g","createRadialGradient","grads","rgba","convertRgbaFromColorCode","r","b","offset","convertColorCodeFromRgba","grad","addColorStop","globalAlpha","disappearStartRate","beginPath","arc","fill","code","parseInt","substring","rate","DrawUtil","VectorUtil","rad","len","syncFromXY","sqrt","atan2","syncFromRad","cos","sin","VisualParamType","BehaviorParamType","Object","values","SelfParamType","ExtendParamType","EffectParamType","ModulateParamType","ConstantType","ParamUtil","ModulateBuilder","extendList","decayRate","decayLimit","gravity","gravityLimit","SCREEN_WIDTH","SCREEN_HEIGHT","searchElement","origin","rootData","sends","createParticleRec","cur","valueMapList","ConstantValueMap","fieldMng","mngs","fields","field","paramItem","convertFormulaToValue","visualParams","params","behaviorParams","getVisualParam","convertParamsToValue","getBehaviorParam","LIMIT","POS_X","POS_Y","Vector","VEC_X","VEC_Y","VEC_RAD","VEC_LEN","connectMng","inherits","connect","connector","disable","logicItem","wrap","logicMng","defs","def","searchDependLogic","depend","addValueMap","FRAME","itrfldValueMap","loopCnt","extendParams","loopCntVal","LOOP_COUNT","convertParamsToBoolean","INVOKE","iterateValueMap","LOOP_ITERATE","sendValueMapList","Instance","DECAY_LIMIT","DECAY_RATE","GRAVITY_VAL","GRAVITY_LIMIT","RADIUS","colorR","COLOR_R","colorG","COLOR_G","colorB","COLOR_B","colorA","COLOR_A","disappearStart","DISAPPEAR_START","shrinkStart","SHRINK_START","createGradDrawer","warpList","formula","v","valueMap","m","formulaStr","varCnt","formulaItems","Function","convertFormulaToBoolean","RADIAN_ROUND","PreviewUtil","LogicPreviewFrame","formList","setFormList","sceens","setSceens","frameCnt","setFrameCnt","tabIndex","setTabIndex","setCur","isBuild","setBuild","isPlay","setPlay","setTimeout","argMapList","argWrap","args","arg","key","getMapList","formListJsx","form","FormRecord","TextField","checkRequired","buildLogicProps","par","splice","isInputOK","buildTabJsx","_FormDiv","previewTabJsx","_CanvasDiv","_IMG","src","_ProgressDiv","clickX","pageX","clientRect","getBoundingClientRect","left","window","pageXOffset","_ProgressVal","onKeyDown","_CloseButton","img","typeList","some","listName","getListName","wrapElement","insertChild","listPos","newNode","createNode","swapOrder","size","ownerChildren","ownDataChildren","curNo","it","swapNode","swapData","LogicElementUtil","isHead","isTail","getNamableProps","syncTreeElementFromWrap","childWrap","createParamWrapList","paramDataList","createVisualParams","createBehaviorParams","seedMng","mng","nameList","seed","logic","idList","inherit","curLogicOwner","VisualParams","BehaviorParams","SelfParams","ExtendParams","EffectParams","ModulateParams","Constants","argMng","prefix","console","log","logicMngNode","prevName","newName","runRec","inhMng","inh","conn","mngType","getLogicItem","visualMng","behaviorMng","inhfld","getInnerWrap","EditorArgumentMng","FactoryTreeContext","setFocusNode","BorderPanel","addChild","ModifyOperations","isModify","setModify","removeSelf","isComplete","isCompleteCheck","checkableFields","mappingForm","firstRegist","modifyRegist","Level","EditorArgumentItem","setName","argType","setArgType","reservedList","getParamNameList","valueType","Component","syncArgumentAdd","syncArgumentName","checkStringLength","LogicUtil","checkFieldName","filter","includes","Combobox","ArgTypes","refers","getArgumentRefers","syncArgumentDel","getSwapButtons","argName","searchVariableReferInFormula","varItem","logicNode","syncFormula","syncParamName","inhLogic","sendMng","connWrap","syncArgumentCallback","inhMngNode","getInnerNode","sendNode","newArgName","paramWrap","createParamWrap","delArgName","delIndex","EditorSeedMng","itemWrap","EditorLogicMng","EditorLogicItem","el","isConnect","hasArgNode","hasFieldNode","hasConnectNode","logicNameList","getLogicNameList","toggleElement","hasNode","removeChild","getDefaultLogicMngs","syncLogicName","Record","Switch","argumentNode","hasArgument","fieldNode","hasField","inheritNode","hasInherit","rootNode","clone","parse","defaultName","getNumberingOnPrefixName","newWrap","getChildrenElementNode","EditorParamItem","setFormulaItems","varFormList","setVarFormList","isField","isCondition","inputType","level","FIELD","INITIAL","INHERIT_FIELD","INHERIT_EXTEND","INHERIT_SEND","argumentList","fieldKeys","parentType","getLogicNode","fieldName","Error","inhfldNode","fieldKeyList","paramNameList","addNum","delNum","parenthesisBalance","formJsxList","ParamInputTypes","getValueForm","isLastVar","isFormulaOK","hasFormError","varForm","getFormulaItem","syncFieldName","_Formula","isInvalid","_Var","_Sig","getFormulaJsx","getFieldRefers","mngNode","inheritWrap","span","EditorBehiviorMng","isVector","hasDecayParam","hasGravityParam","exchangeVectorMethod","flag","trueParamElements","falseParamElements","exchangeElements","toggleElements","paramElements","EditorVisualMng","drawMethod","THICKNESS","hasDisappearParam","hasShrinkParam","EditorInheritConnMng","EditorInheritConnector","identify","setIdentify","setMethod","setDepend","isCreate","logicList","getInheritIdList","initConnectorNode","initSendParams","sendParamList","dependItem","getSendParamList","curParamList","isChange","ConnectTypes","dependLogic","COMPONENT_WIDTH","xName","setXName","yName","setYName","checkItems","argNode","behaviorNode","setParamValue","prpName","targetParam","paramList","xParam","yParam","SendTemplateDialog","EditorSendManager","isDepend","ConnectParentPosition","SetParentPosition","EditorFieldMng","EditorExtendMng","hasLoopParam","hasInvokeParam","EditorSeedItem","setOrigin","entry","seedNameList","getSeedNameList","items","samples","EditorThumbnailMng","LogicTreeContext","WND_SIZE","EditorThumbnailItem","seedWrap","setFrame","urls","setUrls","sample","getThumbnailURL","getSeedValueMap","sampleNo","argMap","sendParams","send","targetFrame","pictureJsxList","imgJsx","_SampleDiv","_SampleName","EditorSampleItem","paramForms","setParamForms","argInfoList","defval","paramForm","checkNumberRange","EditorSampleMng","EditorInterfaceManager","EditorSeedArgMng","EditorSeedArgItem","setMin","setMax","setStep","setDefval","EditorSeedSendMng","COLOR_METHOD","COLOR_MNG","COLOR_LIST","COLOR_ITEM","COLOR_FIELD","isFocus","_Category","backgroundColor","_EditableValue","detailJsx","_Span","_Field","_Signature","_Detail","nameJsx","_ValueType","wrapNode","get","elementNode","getChildrenDataNode","createContext","LogicMainteTab","getInitialData","setRootData","setInvalidate","fileHandle","setFileHandle","masterNode","openPreviewDialog","n","_TreeDiv","_TreeHead","_TreeHeadHalf","plainData","createWritable","writable","gZip","write","close","getFile","showSaveFilePicker","types","accept","then","handle","catch","showOpenFilePicker","file","fileContents","unZip","_TreeBody","Frame","getNodeDisplayJsx","_PropsDiv","_DetailDiv","_DetailHeader","_DetailHeaderLabel","getTypeName","Provider","parentWrap","_DetailMainDiv","getDetailComponent","ManageTab","LauncherTab","CreateChannel","SCORE_TAB_MARGIN","DirectView","getDecryptionedScoreSeq","hashKey","to","DirectLogin","getDecryptionedUserSeq","findUserInfoFromSeq","resList","ReleaseNote","setJsx","record","note","_Header","version","_ListFrame","HOME_USER_DIV_HEIGHT","HomeChannel","userCount","_Left","_MessageRecord","_Right","MainFrame","basename","process","RouterManage","URLSearchParams","useLocation","search","path","exact","MAIN_FRAME_MARGIN","Splash","isSwitch","setSwitch","timerId","setTimerId","remove","clearTimeout","_Title","_NowLoading","_Copylight","fadeIn","keyframes","LoginCreateAccount","isRegist","setRegist","userId","setUserId","setPassword","passwordConfirm","setPasswordConfirm","messageList","setMessageList","userIdList","setUserIdList","createAuthText","findUserIdList","authCollation","setAuthCollation","authInput","setAuthInput","authPicture","getAuthTextURL","InputTextFormBak","checkAsciiChars","InfoFrame","_AuthText","cnt","getNextUserSeq","MessageLink","LoginLogin","isForget","setForget","setEmail","findUserInfoLogin","findUserInfoFromEmail","info","getHashedFromUserSeq","url","sendQueryRequestToMailAPI","subject","LoginFrame","setCreate","logo","getLogoURL","_LogoDiv","_TypeSwitch","AccountFrame","oldPass","setOldPass","newPass","setNewPass","newPassConfirm","setNewPassConfirm","emailList","setEmailList","loginProps","reloadInfo","history","replaceState","userTabJsx","permitRegist","_Body","passwordStr","updateUserInfo","_Footer","TotalHeader","authButtonJsx","_LoginButton","location","_UserName","isEntry","_ACCENT","_NORMAL","_Menu","_Language","_MenuItem","TOTAL_HEADER_WIDTH","SystemEntry","_MainDiv","App","oncontextmenu","onkeydown","ctrlKey","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.21f2a3ce.chunk.js","sourcesContent":["import zlib from \"zlib\";\r\n// import { createClient } from \"@supabase/supabase-js\";\r\nimport { Base64 } from \"js-base64\";\r\nimport Hashids from 'hashids';\r\n\r\n// const SUPABASE_URL = \"https://rxjdrbdnfvfdbjvaljsp.supabase.co\";\r\n// const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ4amRyYmRuZnZmZGJqdmFsanNwIiwicm9sZSI6ImFub24iLCJpYXQiOjE2NTQxNTQwMTgsImV4cCI6MTk2OTczMDAxOH0.Iq-ilL7ayVatIsG--Lq4WpdL_o1h-6RpR4KjWBdr24M';\r\n\r\n// const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);\r\n\r\nnamespace DataUtil {\r\n\r\n    export const DB_SERVER_DOMAIN = 'http://localhost:5001';\r\n    // export const DB_SERVER_DOMAIN = 'https://licresia-demo01-server.glitch.me';\r\n    // export const DB_SERVER_DOMAIN = 'https://licresia-server.glitch.me';\r\n\r\n    export const APP_SERVER_DOMAIN = 'http://localhost:4333';\r\n    // export const APP_SERVER_DOMAIN = 'https://cyber-kohno.github.io/licresia_demo_app';\r\n    // export const APP_SERVER_DOMAIN = 'https://demo-app.licresia.com';\r\n\r\n    const getUserHashBuilder = () => {\r\n        return new Hashids('pa-user', 8);\r\n    }\r\n\r\n    export const getHashedFromUserSeq = (seq: number) => {\r\n        const hashids = getUserHashBuilder();\r\n        const hash = hashids.encode(seq);\r\n        const hashedKey = Base64.encode(hash, true);\r\n        return hashedKey;\r\n    }\r\n\r\n    export const getDecryptionedUserSeq = (hashedSeq: string) => {\r\n        const hashids = getUserHashBuilder();\r\n        const decryptioned = Number(hashids.decode(Base64.decode(hashedSeq)));\r\n        return decryptioned;\r\n    }\r\n\r\n    const getScoreHashBuilder = () => {\r\n        return new Hashids('pa', 8);\r\n    }\r\n\r\n    export const getHashedFromScoreSeq = (seq: number) => {\r\n        const hashids = getScoreHashBuilder();\r\n        const hash = hashids.encode(seq);\r\n        const hashedKey = Base64.encode(hash, true);\r\n        return hashedKey;\r\n    }\r\n\r\n    export const getDecryptionedScoreSeq = (hashedSeq: string) => {\r\n        const hashids = getScoreHashBuilder();\r\n        const decryptioned = Number(hashids.decode(Base64.decode(hashedSeq)));\r\n        return decryptioned;\r\n    }\r\n\r\n    export const getPreviewURL = (scoreSeq: number) => {\r\n        const hashedKey = getHashedFromScoreSeq(scoreSeq);\r\n        const url = `${APP_SERVER_DOMAIN}/#/preview?v=${hashedKey}`;\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * クエリリクエストを生成する\r\n     * @param sql \r\n     * @returns \r\n     */\r\n    const createQueryRequestInit = (sql: string): RequestInit => {\r\n        return {\r\n            mode: 'cors',\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ sql, databaseName: 'pa' })\r\n        }\r\n    }\r\n\r\n    export type SendMailParam = {\r\n        from: string,\r\n        to: string,\r\n        subject: string,\r\n        text: string\r\n    }\r\n\r\n    const createSendMailRequestInit = (json: SendMailParam): RequestInit => {\r\n        return {\r\n            mode: 'cors',\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(json)\r\n        }\r\n    }\r\n\r\n    export const sendQueryRequestToMailAPI = (json: SendMailParam): Promise<Response> => {\r\n        return fetch(DB_SERVER_DOMAIN + '/mail',\r\n            createSendMailRequestInit(json)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * select/updateを指定してSQLを実行する。<br>\r\n     * selectの場合、結果をjsonで返す。\r\n     * @param queryType\r\n     * @param sql \r\n     * @returns \r\n     */\r\n    export const sendQueryRequestToAPI = (queryType: 'select' | 'update', sql: string): Promise<Response> => {\r\n        return fetch(DB_SERVER_DOMAIN + '/' + queryType,\r\n            createQueryRequestInit(sql)\r\n        );\r\n    }\r\n\r\n    export const findUserInfoList = async () => {\r\n        const response = await sendQueryRequestToAPI('select', `SELECT id, email FROM user_tbl`);\r\n        const results = await response.json();\r\n        return results as { id: string, email: string}[];\r\n    };\r\n\r\n    export const findUserIdList = async () => {\r\n        const results = await findUserInfoList();\r\n        return (results as { id: string}[]).map(res => res.id);\r\n    };\r\n\r\n    export const findUserInfoFromEmail = async (email: string) => {\r\n        const response = await sendQueryRequestToAPI('select', `SELECT seq, id FROM user_tbl WHERE email = '${email}'`);\r\n        const results = await response.json();\r\n        return results as { seq: number, id: string }[];\r\n    };\r\n\r\n    export const findUserInfoFromSeq = async (seq: number) => {\r\n        const response = await sendQueryRequestToAPI('select', `SELECT seq, id, password, email FROM user_tbl WHERE seq = ${seq}`);\r\n        const results = await response.json();\r\n        return results as { seq: number, id: string, password: string, email: string }[];\r\n    };\r\n\r\n    export const findUserInfoLogin = async (id: string, password: string) => {\r\n        const response = await sendQueryRequestToAPI('select', `SELECT seq, id, password, email FROM user_tbl WHERE id = '${id}' and password = '${password}'`);\r\n        const results = await response.json();\r\n        return results as { seq: number, id: string, password: string, email: string }[];\r\n    };\r\n\r\n    export const getNextUserSeq = async () => {\r\n        const response = await sendQueryRequestToAPI('select', `SELECT seq FROM sqlite_sequence WHERE name = 'user_tbl'`);\r\n        const results = await response.json();\r\n        const nextSeq = (results[0]['seq'] as number) + 1;\r\n        DataUtil.sendQueryRequestToAPI('update', `update sqlite_sequence set seq = seq + 1 where name='user_tbl'`);\r\n\r\n        return nextSeq;\r\n    };\r\n\r\n    export const findUserScoreList = async (userSeq: number) => {\r\n        const response = await DataUtil.sendQueryRequestToAPI('select', `SELECT seq, dispnam, share FROM scoretbl WHERE user_seq = ${userSeq}`);\r\n        const results = await response.json();\r\n        return results as any[];\r\n    };\r\n\r\n    export const findScore = async (scoreSeq: number) => {\r\n        const response = await DataUtil.sendQueryRequestToAPI('select', `SELECT (select id from user_tbl where seq = score.user_seq) as owner, dispnam, data FROM scoretbl score WHERE seq = ${scoreSeq}`);\r\n        const results = await response.json();\r\n        return results as any[];\r\n    };\r\n\r\n    /**\r\n     * 文字列を圧縮する\r\n     * @param val 圧縮前の文字列\r\n     * @returns 圧縮後の文字列\r\n     */\r\n    export const gZip = (val: string) => {\r\n        // エンコード\r\n        const content = encodeURIComponent(val);\r\n        // 圧縮\r\n        const result = zlib.gzipSync(content);\r\n        // Buffer => base64変換\r\n        const value = result.toString('base64');\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * 圧縮された文字列を複号する\r\n     * @param val 圧縮された文字列\r\n     * @returns 複号後の文字列\r\n     */\r\n    export const unZip = (val: string) => {\r\n        // base64 => Bufferに変換\r\n        const buffer = Buffer.from(val, 'base64')\r\n        // 復号化\r\n        const result = zlib.unzipSync(buffer)\r\n        // デコード\r\n        const str = decodeURIComponent(result.toString())\r\n        return str;\r\n    }\r\n\r\n    /**\r\n     * Date型の日時を文字列に変換する\r\n     * @param date Date型の日時\r\n     * @returns 文字列の日時\r\n     */\r\n    export const getStringFromDate = (date: Date) => {\r\n\r\n        const year_str = date.getFullYear().toString();\r\n        //月だけ+1すること\r\n        const month_str = (1 + date.getMonth()).toString();\r\n        const day_str = date.getDate().toString();\r\n        const hour_str = date.getHours().toString();\r\n        const minute_str = date.getMinutes().toString();\r\n        const second_str = date.getSeconds().toString();\r\n\r\n        let format_str = 'YYYY-MM-DD hh:mm:ss';\r\n        format_str = format_str.replace(/YYYY/g, year_str);\r\n        format_str = format_str.replace(/MM/g, month_str);\r\n        format_str = format_str.replace(/DD/g, day_str);\r\n        format_str = format_str.replace(/hh/g, hour_str);\r\n        format_str = format_str.replace(/mm/g, minute_str);\r\n        format_str = format_str.replace(/ss/g, second_str);\r\n\r\n        return format_str;\r\n    };\r\n}\r\n\r\nexport default DataUtil;","import StoreSystem from \"./storeSystem\";\r\n\r\n/**\r\n * システムで使用するステート群\r\n */\r\nexport type Store = {\r\n    system: StoreSystem.Param;\r\n}\r\n\r\nexport const initialStore: Store = {\r\n    system: {\r\n        isSplash: false,\r\n        user: null,\r\n        dialog: null,\r\n    },\r\n}","\r\nnamespace SystemConst {\r\n    export const AUTH_TEXT_WIDTH = 350;\r\n    export const AUTH_TEXT_HEIGHT = 70;\r\n}\r\n\r\nexport default SystemConst;\r\n\r\nexport const APP_MIN_WIDTH = 800;\r\nexport const APP_MIN_HEIGHT = 600;\r\n\r\nexport const TOTAL_HEADER_WIDTH = 44;\r\n\r\nexport const MAIN_FRAME_MARGIN = 15;\r\nexport const SCORE_TAB_MARGIN = 8;\r\n\r\nexport const BUTTON_SMALL_HEIGHT = 18;\r\nexport const BUTTON_MIDIUM_HEIGHT = 28;\r\nexport const BUTTON_LARGE_HEIGHT = 34;\r\n\r\n\r\n// ホームチャンネル\r\nexport const HOME_USER_DIV_HEIGHT = 400;\r\n\r\n// ハーモナイズタブ\r\n\r\nexport const FIRST_CHORD_INDEX = 3;\r\n\r\nexport const HARMONIZE_RIGHT_WIDTH = 220;\r\nexport const HARMONIZE_HEAD_WIDTH = 35;\r\nexport const HARMONIZE_FOOT_WIDTH = 80;\r\nexport const HARMONIZE_STRUCT_WIDTH = 380;\r\nexport const HARMONIZE_SECTIONS_WIDTH = 110;\r\n\r\nexport const ELEMENT_HEIGHT = 134;\r\nexport const ELEMENT_HEAD_WIDTH = 15;\r\nexport const ELEMENT_FOOT_WIDTH = 60;\r\nexport const ELEMENT_SIDE_PADDING = 8;\r\nexport const ELEMENT_NOTE_PADDING_LEN = 10;\r\nexport const ELEMENT_NOTE_PADDING_SID = 30;\r\nexport const ELEMENT_POS_INFO_WIDTH = 50;\r\nexport const ELEMENT_OPERATIONS_WIDTH = 20;\r\n\r\nexport const TIMELINE_BEAT_WIDTH = 80;\r\n\r\n\r\nexport const TUNE_HEADER_WIDTH = 80;\r\nexport const TUNE_TIMELINE_WIDTH = 70;\r\nexport const TUNE_PITCH_WIDTH = 100;\r\nexport const TUNE_PITCH_HEIGHT = 30;\r\n\r\n\r\n\r\nexport const PATTERN_OPERATION_HEIGHT = 30;\r\nexport const PATTERN_HEADER_HEIGHT = 50;\r\nexport const PATTERN_BODY_HEIGHT = 240;\r\nexport const PATTERN_FOOTER_HEIGHT = 50;\r\nexport const PATTERN_FRAME_HEIGHT = PATTERN_OPERATION_HEIGHT + PATTERN_HEADER_HEIGHT + PATTERN_BODY_HEIGHT + PATTERN_FOOTER_HEIGHT;\r\n\r\n\r\nexport const NOTES_1BAR_WIDTH = 480;","import { useContext, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { GlobalContext } from \"../entry/systemEntry\";\r\n\r\n\r\nconst GloballDialog = () => {\r\n\r\n    const { store, setStore } = useContext(GlobalContext);\r\n\r\n    const dialog = store.system.dialog;\r\n\r\n    if (dialog == null) return <></>;\r\n    return (<>\r\n        <_Blind onClick={() => {\r\n            store.system.dialog = null;\r\n            setStore({...store});\r\n        }} />\r\n        {dialog}\r\n    </>);\r\n}\r\n\r\nexport default GloballDialog;\r\n\r\nconst _Blind = styled.div<{\r\n}>`\r\n    display: block;\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #000329a2;\r\n    z-index: 10;\r\n    text-align: center;\r\n`;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nnamespace Styles {\r\n\r\n    export const FONT_SMALL = 16;\r\n    export const FONT_MIDIUM = 22;\r\n    export const FONT_LARGE = 32;\r\n\r\n    export const CSS_LABEL = css`\r\n        display: inline-block;\r\n        font-weight: 600;\r\n        text-align: center;\r\n        color: black;\r\n        box-sizing: border-box;\r\n    `;\r\n\r\n    export const CSS_LABEL_SMALL = css`\r\n        ${CSS_LABEL}\r\n        height: 22px;\r\n        font-size: ${FONT_SMALL}px;\r\n        line-height: 18px;\r\n    `;\r\n\r\n    export const CSS_LABEL_MIDIUM = css`\r\n        ${CSS_LABEL}\r\n        height: 30px;\r\n        font-size: ${FONT_MIDIUM}px;\r\n        line-height: 26px;\r\n    `;\r\n\r\n    export const CSS_BUTTON_DISABLE = css`\r\n        pointer-events: none;\r\n        opacity: 0.5;\r\n    `;\r\n}\r\nexport default Styles;\r\n\r\nexport const _WrapperFrame = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 100%;\r\n`;\r\n\r\nexport const _Object = styled.div`\r\n    display: inline-block;\r\n`;\r\n\r\nexport const _Record = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n`;\r\n\r\nexport const _CSS_LABEL_SMALL = css`\r\n    display: inline-block;\r\n    height: 22px;\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n    color: black;\r\n    line-height: 18px;\r\n`;\r\n\r\n\r\nexport const _CSS_LABEL_MIDIUM = css`\r\n    display: inline-block;\r\n    height: 30px;\r\n    font-size: ${Styles.FONT_MIDIUM}px;\r\n    font-weight: 600;\r\n    text-align: center;\r\n    color: black;\r\n    line-height: 24px;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nexport const _CSS_DISABLE = css`\r\n    opacity: 0.6;\r\n    pointer-events: none;\r\n`;\r\n\r\n","import { useEffect, useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport Styles from \"../../design/styles\";\r\n\r\ntype ChannelPaneProps = {\r\n    activeNo: number;\r\n    tabElements: ChannelElements[];\r\n    selectTabIndex?: Function;\r\n}\r\n\r\ntype ChannelElements = {\r\n    name: string;\r\n    icon: JSX.Element;\r\n    isEnable: boolean;\r\n    cont: JSX.Element;\r\n}\r\n\r\nexport const ChannelPane = (props: ChannelPaneProps) => {\r\n    const [activeNo, setActiveNo] = useState(props.activeNo);\r\n\r\n    // タブ押下時の処理\r\n    const selectTabIndex = (index: number) => {\r\n        if (props.selectTabIndex != undefined) {\r\n            props.selectTabIndex(index);\r\n        } else {\r\n            setActiveNo(index);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setActiveNo(props.activeNo);\r\n    }, [props.activeNo]);\r\n\r\n    return (\r\n        <>\r\n            <_LabelList>\r\n                {\r\n                    props.tabElements.map((tab, index) => {\r\n                        return <ChannelLabel\r\n                            key={index} name={tab.name} icon={tab.icon} isActive={index == activeNo} isEnable={tab.isEnable}\r\n                            selectTab={() => selectTabIndex(index)}\r\n                        />\r\n                    })\r\n                }\r\n            </_LabelList>\r\n            <_ContList>\r\n                {\r\n                    props.tabElements.map((tab, index) => {\r\n                        return <ChannelContents key={index} cont={tab.cont} isActive={index === activeNo} />\r\n                    })\r\n                }\r\n            </_ContList>\r\n        </>\r\n    );\r\n}\r\n\r\nconst ChannelLabel = (props: {\r\n    name: string;\r\n    icon: JSX.Element;\r\n    isEnable: boolean;\r\n    isActive: boolean;\r\n    selectTab: Function;\r\n}) => {\r\n    return (\r\n        <_Item\r\n            isEnable={props.isEnable}\r\n            isActive={props.isActive}\r\n            onClick={() => props.selectTab()}\r\n        >\r\n            <_Icon>{props.icon}</_Icon>\r\n            <_Label>{props.name}</_Label>\r\n        </_Item>\r\n    );\r\n}\r\n\r\nconst ChannelContents = (props: {\r\n    isActive: boolean;\r\n    cont: JSX.Element;\r\n}) => {\r\n    return (\r\n        <_Contents isActive={props.isActive}>\r\n            {props.cont}\r\n        </_Contents>\r\n    );\r\n}\r\n\r\nconst _LabelList = styled.div`\r\n    display: inline-block;\r\n    width: 100px;\r\n    margin-right: 5px;\r\n    height: 100%;\r\n    background-color: #b9b9b9;\r\n    border: 1px solid #707070;\r\n    box-sizing: border-box;\r\n    border-radius: 10px 0 0 10px;\r\n    vertical-align: top;\r\n    box-shadow: 1px 2px 12px #aaaaaa;\r\n`;\r\nconst _ContList = styled.div`\r\n    display: inline-block;\r\n    background-color: #b9b9b9;\r\n    border: 1px solid #707070;\r\n    box-sizing: border-box;\r\n    width: calc(100% - 105px);\r\n    height: 100%;\r\n    border-radius: 0 6px 6px 0;\r\n    box-shadow: 1px 2px 12px #aaaaaa;\r\n`;\r\n\r\nconst _Contents = styled.div<{\r\n    isActive: boolean;\r\n}>`\r\n    /* margin: 3px 0 0 3px;\r\n    width: calc(100% - 6px);\r\n    height: calc(100% - 6px); */\r\n    width: 100%;\r\n    height: 100%;\r\n    /* background-color: #ece6e6; */\r\n    ${props => !props.isActive ? css`display: none;` : css`display: inline-block;`}\r\n`;\r\n\r\nconst _Item = styled.div<{\r\n    isEnable: boolean;\r\n    isActive: boolean;\r\n}>`\r\n    display: inline-block;\r\n    width: 90px;\r\n    height: 90px;\r\n    margin: 5px 0 0 5px;\r\n    border-radius: 10px;\r\n    ${props => {\r\n        if (props.isActive) {\r\n            return css`\r\n                background-color: #e4e3e1;\r\n                border: 1px solid #949494\r\n            `;\r\n        } else {\r\n            return css`\r\n                background-color: #d1d1d1;\r\n                opacity: 0.8;\r\n            `;\r\n        }\r\n    }}\r\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\r\n    transition: background-color 500ms;\r\n    & *{\r\n        transition: color 150ms;\r\n    }\r\n    // アクティブじゃない時だけhover要素を付加\r\n    ${props => props.isActive ? '' : css`\r\n        &:hover {\r\n            & *{\r\n                transition: color 150ms;\r\n                /* background-color: #e2d6d6; */\r\n                text-shadow: 1px 2px 22px #f7f7f7ea;\r\n                color: #a7a7a7;\r\n            }\r\n        }\r\n    `}\r\n`;\r\n\r\nconst IconHover = css`\r\n    text-shadow: 1px 2px 22px #f7f7f7cf;\r\n    color: #a3a3a3;\r\n`;\r\n\r\nconst _Icon = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 60px;\r\n    /* background-color: #df828221; */\r\n    font-size: 50px;\r\n    color: #757575;\r\n    text-align: center;\r\n    padding-top: 5px;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nconst _Label = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 30px;\r\n    /* background-color: #8482df20; */\r\n    font-size: 20px;\r\n    font-weight: 600;\r\n    color: #757575;\r\n    text-align: center;\r\n`;","import { useEffect, useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\ntype TabbedPaneProps = {\r\n    activeNo: number;\r\n    tabElements: TabElements[];\r\n    selectTabIndex?: Function;\r\n    tabRecordNum?: number;\r\n}\r\n\r\ntype TabElements = {\r\n    name: string;\r\n    enable: boolean;\r\n    cont: JSX.Element;\r\n}\r\n\r\nexport const TabbedPane = (props: TabbedPaneProps) => {\r\n    const [activeNo, setActiveNo] = useState(props.activeNo);\r\n\r\n    // タブ押下時の処理\r\n    const selectTabIndex = (index: number) => {\r\n        if (props.selectTabIndex != undefined) {\r\n            props.selectTabIndex(index);\r\n        } else {\r\n            setActiveNo(index);\r\n        }\r\n    };\r\n\r\n    const tabRecordNum = props.tabRecordNum ?? 1;\r\n\r\n    useEffect(() => {\r\n        setActiveNo(props.activeNo);\r\n    }, [props.activeNo]);\r\n\r\n    return (\r\n        <>\r\n            <_LabelList tabRecordNum={tabRecordNum}>\r\n                {/* {tabList} */}\r\n                {\r\n                    props.tabElements.map((tab, index) => {\r\n                        return <TabLabel\r\n                            key={index} name={tab.name} isActive={index == activeNo} isEnable={tab.enable}\r\n                            selectTab={() => selectTabIndex(index)}\r\n                        />\r\n                    })\r\n                }\r\n            </_LabelList>\r\n            <_ContList tabRecordNum={tabRecordNum}>\r\n                {/* {contList} */}\r\n                {\r\n                    props.tabElements.map((tab, index) => {\r\n                        return <TabContents key={index} cont={tab.cont} isActive={index === activeNo} />\r\n                    })\r\n                }\r\n            </_ContList>\r\n        </>\r\n    );\r\n}\r\n\r\nconst TabLabel = (props: {\r\n    name: string;\r\n    isActive: boolean;\r\n    isEnable: boolean;\r\n    selectTab: Function;\r\n}) => {\r\n    return (\r\n        <_TabLabel\r\n            isEnable={props.isEnable}\r\n            isActive={props.isActive}\r\n            onClick={() => props.selectTab()}>\r\n            {props.name}\r\n        </_TabLabel>\r\n    );\r\n}\r\n\r\nconst TabContents = (props: {\r\n    isActive: boolean;\r\n    cont: JSX.Element;\r\n}) => {\r\n    // return props.isActive ?\r\n    //     <div className=\"tab-cont\">{props.cont}</div>\r\n    //     :\r\n    //     <></>\r\n    //     ;\r\n    return (\r\n        <_Contents isActive={props.isActive}>\r\n            {props.cont}\r\n        </_Contents>\r\n    );\r\n}\r\n\r\nconst _LabelList = styled.div<{\r\n    tabRecordNum: number;\r\n}>`\r\n    display: inline-block;\r\n    height: ${props => 35 * props.tabRecordNum}px;\r\n    text-align: left;\r\n    /* background-color: #ac3b3b; */\r\n    width: 100%;\r\n`;\r\nconst _ContList = styled.div<{\r\n    tabRecordNum: number;\r\n}>`\r\n    display: block;\r\n    background-color: #999999;\r\n    height: calc(100% - ${props => props.tabRecordNum * 35}px);\r\n    border-radius: 0 6px 6px 6px;\r\n    box-shadow: 0 2px 0 0 #000b3a48;\r\n    text-align: left;\r\n`;\r\n\r\nconst _Contents = styled.div<{\r\n    isActive: boolean;\r\n}>`\r\n    margin: 3px 0 0 3px;\r\n    width: calc(100% - 6px);\r\n    height: calc(100% - 6px);\r\n    ${props => !props.isActive ? css`display: none;` : css`display: inline-block;`}\r\n`;\r\n\r\nconst _TabLabel = styled.div<{\r\n    isEnable: boolean;\r\n    isActive: boolean;\r\n}>`\r\n    display: inline-block;\r\n    /* width: 100px; */\r\n    padding: 0 10px;\r\n    \r\n    ${props => {\r\n        if (props.isActive) {\r\n            return css`\r\n                color: #ebebeb;\r\n                padding: 0 35px;\r\n                background-color: #999999;\r\n                height: 35px;\r\n                font-size: 24px;\r\n                border-radius: 3px 15px 0 0;\r\n                text-shadow: 1px 2px 3px #00000065;\r\n            `;\r\n        } else {\r\n            return css`\r\n                height: 100%;\r\n                color: #555;\r\n                /* background-color: #90909b; */\r\n                background: linear-gradient(to bottom, #999999, #7a7a7a);\r\n                height: 30px;\r\n                font-size: 18px;\r\n                margin-top: 5px;\r\n                border-radius: 3px 10px 0 0;\r\n                ${props.isEnable ? '' : css`\r\n                    pointer-events: none;\r\n                    opacity: 0.7;\r\n                `}\r\n            `;\r\n        }\r\n    }}\r\n    /* opacity: 0.7; */\r\n    user-select: none;\r\n    margin-right: 6px;\r\n    font-weight: 600;\r\n    box-sizing: border-box;\r\n    line-height: 30px;\r\n    vertical-align: bottom;\r\n    transition: padding 100ms;\r\n`;","import styled, { css } from \"styled-components\";\r\nimport Styles, { _CSS_LABEL_MIDIUM } from \"../../base/design/styles\";\r\nimport ValidateUtil from \"./validateUtil\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nnamespace FormUtil {\r\n\r\n    export type CheckableValue = {\r\n        value: string;\r\n        errors: ValidateUtil.ErrorType[];\r\n    }\r\n\r\n    export const isCompleteCheck = (checkables: CheckableValue[]) => {\r\n        let result = true;\r\n        checkables.forEach(checkable => {\r\n            if (checkable.errors.length > 0) {\r\n                result = false;\r\n                return 1;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    export const InputTextFormBak = (props: {\r\n        titleLabel?: string;\r\n        checkable: CheckableValue;\r\n        setCheckable: (value: CheckableValue) => void;\r\n        isEnable?: boolean;\r\n        placeholder?: string;\r\n        isCenter?: boolean;\r\n        width?: number;\r\n        isPassword?: boolean;\r\n        validates?: ValidateUtil.Validate[];\r\n        dependency?: CheckableValue[];\r\n        marginTop?: number;\r\n        isReadOnly?: boolean;\r\n        marginBottom?: number;\r\n    }) => {\r\n        const type = props.isPassword ?? false ? 'password' : 'text';\r\n\r\n        const validaters = props.validates ?? [];\r\n        const errors = props.checkable.errors;\r\n        const dependency = (props.dependency ?? []).map(dep => dep.value);\r\n\r\n        const getErrors = (value: string) => {\r\n            const errors: ValidateUtil.ErrorType[] = [];\r\n            validaters.forEach(validater => {\r\n                if (!validater.checker(value)) {\r\n                    errors.push(validater.errorType);\r\n                }\r\n            });\r\n            return errors;\r\n        }\r\n        useEffect(() => {\r\n            props.checkable.errors = getErrors(props.checkable.value);\r\n            props.setCheckable({ ...props.checkable });\r\n        }, dependency);\r\n        return (\r\n            <_Record\r\n                isEnable={props.isEnable ?? true}\r\n                isVisible={true}\r\n                textAlign={(props.isCenter ?? false) ? 'center' : 'left'}\r\n                marginTop={props.marginTop ?? 0}\r\n            >\r\n                {props.titleLabel == undefined ? <></> : <_ItemnLabel>{props.titleLabel}</_ItemnLabel>}\r\n                <_ItemnInputBak\r\n                    type={type}\r\n                    value={props.checkable.value}\r\n                    hasTitle={props.titleLabel != undefined}\r\n                    width={props.width}\r\n                    isCenter={props.isCenter ?? false}\r\n                    placeholder={props.placeholder}\r\n                    onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        props.checkable.value = value;\r\n                        props.checkable.errors = getErrors(value);\r\n                        props.setCheckable({ ...props.checkable });\r\n                    }}\r\n                    errorType={errors.length === 0 ? undefined : errors[0]}\r\n                    readOnly={props.isReadOnly}\r\n                />\r\n            </_Record>\r\n        );\r\n    }\r\n\r\n\r\n    export const Record = (props: {\r\n        isEnable?: boolean;\r\n        textAlign?: 'left' | 'center' | 'right';\r\n        marginTop?: number;\r\n        jsx: JSX.Element;\r\n    }) => {\r\n        return (\r\n            <_Record\r\n                isEnable={props.isEnable ?? true}\r\n                isVisible={true}\r\n                textAlign={props.textAlign ?? 'left'}\r\n                marginTop={props.marginTop ?? 0}\r\n            >\r\n                {props.jsx}\r\n            </_Record>\r\n        );\r\n    }\r\n\r\n    export const FormRecord = (props: {\r\n        titleLabel?: string;\r\n        labelWidth?: number;\r\n        isEnable?: boolean;\r\n        isVisible?: boolean;\r\n        textAlign?: 'left' | 'center' | 'right';\r\n        marginTop?: number;\r\n        jsx: JSX.Element;\r\n    }) => {\r\n        return (\r\n            <_Record\r\n                isEnable={props.isEnable ?? true}\r\n                isVisible={props.isVisible ?? true}\r\n                textAlign={props.textAlign ?? 'left'}\r\n                marginTop={props.marginTop ?? 0}\r\n            >\r\n                {props.titleLabel == undefined ? <></> : <_ItemnLabel labelWidth={props.labelWidth}>{props.titleLabel}</_ItemnLabel>}\r\n                {props.jsx}\r\n            </_Record>\r\n        );\r\n    }\r\n\r\n    export const TextField = (props: {\r\n        checkable: CheckableValue;\r\n        setCheckable: (value: CheckableValue) => void;\r\n        isEnable?: boolean;\r\n        placeholder?: string;\r\n        width?: number;\r\n        isPassword?: boolean;\r\n        validates?: ValidateUtil.Validate[];\r\n        dependency?: CheckableValue[];\r\n        isReadOnly?: boolean;\r\n        isNumber?: boolean;\r\n        marginLeft?: number;\r\n        step?: number;\r\n    }) => {\r\n        const [isNaN, setNaN] = useState(false);\r\n\r\n        useEffect(() => {\r\n            if (props.checkable.value === ' ') {\r\n                props.checkable.value = '';\r\n                props.setCheckable({ ...props.checkable });\r\n            }\r\n        }, [props.checkable.value]);\r\n\r\n        let type = props.isPassword ?? false ? 'password' : 'text';\r\n        if (props.isNumber ?? false) {\r\n            type = 'number';\r\n        }\r\n\r\n        const validaters = props.validates ?? [];\r\n        const errors = props.checkable.errors;\r\n        const dependency = (props.dependency ?? []).map(dep => dep.value);\r\n\r\n        const getErrors = (value: string) => {\r\n            const errors: ValidateUtil.ErrorType[] = [];\r\n            validaters.forEach(validater => {\r\n                if (!validater.checker(value)) {\r\n                    errors.push(validater.errorType);\r\n                }\r\n            });\r\n            return errors;\r\n        }\r\n        useEffect(() => {\r\n            props.checkable.errors = getErrors(props.checkable.value);\r\n            props.setCheckable({ ...props.checkable });\r\n        }, dependency.concat(props.checkable.value));\r\n\r\n        const value = props.checkable.value;\r\n        const step = props.step ?? 1;\r\n\r\n        return (\r\n            <_ItemnInput\r\n                type={type}\r\n                value={value}\r\n                width={props.width ?? 100}\r\n                placeholder={props.placeholder}\r\n                step={step}\r\n                onChange={(e) => {\r\n                    // console.log(e.target.valueAsNumber);\r\n                    props.checkable.value = e.target.value;\r\n                    props.setCheckable({ ...props.checkable });\r\n                    if (type === 'number') {\r\n                        setNaN(Number.isNaN(e.target.valueAsNumber));\r\n                    }\r\n                }}\r\n                onBlur={() => {\r\n                    if (type === 'number') {\r\n                        if (isNaN) props.checkable.value = ' ';\r\n                        else props.checkable.value = Number(value).toString();\r\n                        // console.log(`[${props.checkable.value}]`);\r\n                        props.setCheckable({ ...props.checkable });\r\n                    }\r\n                }}\r\n                errorType={errors.length === 0 ? undefined : errors[0]}\r\n                readOnly={props.isReadOnly}\r\n                marginLeft={props.marginLeft}\r\n            />\r\n        );\r\n    }\r\n\r\n    export type ComboboxItemProps = { value: string, labelText: string, isDisabled?: boolean };\r\n    export const Combobox = (props: {\r\n        list: ComboboxItemProps[];\r\n        headBlank?: boolean;\r\n        checkable: CheckableValue;\r\n        setCheckable: (value: CheckableValue) => void;\r\n        isEnabled?: boolean;\r\n        placeholder?: string;\r\n        width?: number;\r\n        validates?: ValidateUtil.Validate[];\r\n        dependency?: CheckableValue[];\r\n        isReadOnly?: boolean;\r\n        marginLeft?: number;\r\n    }) => {\r\n        const validaters = props.validates ?? [];\r\n        const errors = props.checkable.errors;\r\n        const dependency = (props.dependency ?? []).map(dep => dep.value);\r\n        const headBlank = props.headBlank ?? false;\r\n        const list = props.list.slice();\r\n        if (headBlank) list.unshift({ value: '', labelText: '' });\r\n\r\n        const getErrors = (value: string) => {\r\n            const errors: ValidateUtil.ErrorType[] = [];\r\n            validaters.forEach(validater => {\r\n                if (!validater.checker(value)) {\r\n                    errors.push(validater.errorType);\r\n                }\r\n            });\r\n            return errors;\r\n        }\r\n\r\n        useEffect(() => {\r\n            // console.log('value: ' + props.checkable.value);\r\n            props.checkable.errors = getErrors(props.checkable.value);\r\n            props.setCheckable({ ...props.checkable });\r\n        }, dependency.concat(props.checkable.value));\r\n\r\n        return (\r\n            <_ItemCombobox\r\n                value={props.checkable.value}\r\n                width={props.width ?? 100}\r\n                placeholder={props.placeholder}\r\n                onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    props.checkable.value = value;\r\n                    // props.checkable.errors = getErrors(value);\r\n                    props.setCheckable({ ...props.checkable });\r\n\r\n                }}\r\n                errorType={errors.length === 0 ? undefined : errors[0]}\r\n                readOnly={props.isReadOnly}\r\n                marginLeft={props.marginLeft}\r\n            >{list.map((item, i) => {\r\n                return (\r\n                    <_Option key={i}\r\n                        value={item.value}\r\n                        disabled={item.isDisabled ?? false}\r\n                        isDisabled={item.isDisabled ?? false}\r\n                    >{item.labelText}</_Option>\r\n                );\r\n            })}</_ItemCombobox>\r\n        );\r\n    }\r\n\r\n    export type ButtonProps = {\r\n        label: string;\r\n        isEnable?: boolean;\r\n        width?: number;\r\n        callback: () => void;\r\n    }\r\n\r\n    export const ButtonRecord = (props: {\r\n        buttons: ButtonProps[],\r\n        isCenter?: boolean;\r\n        marginTop?: number;\r\n        marginBottom?: number;\r\n    }) => {\r\n        return (\r\n            <_Record\r\n                isEnable={true}\r\n                isVisible={true}\r\n                textAlign={(props.isCenter ?? false) ? 'center' : 'right'}\r\n                marginTop={props.marginTop ?? 0}\r\n            >\r\n                {props.buttons.map((button, i) => {\r\n                    return (\r\n                        <_Button\r\n                            key={i}\r\n                            isCenter={props.isCenter ?? false}\r\n                            isEnable={button.isEnable ?? true}\r\n                            width={button.width}\r\n                            onClick={button.callback}\r\n                        >{button.label}</_Button>\r\n                    );\r\n                })}\r\n            </_Record>\r\n        );\r\n    }\r\n\r\n    export const Message = (props: {\r\n        message: string,\r\n        isCenter?: boolean;\r\n        marginTop?: number;\r\n        marginBottom?: number;\r\n    }) => {\r\n        return (\r\n            <_Record\r\n                isEnable={true}\r\n                isVisible={true}\r\n                textAlign={(props.isCenter ?? false) ? 'center' : 'left'}\r\n                marginTop={props.marginTop ?? 0}\r\n            >\r\n                <_Message\r\n                    isCenter={props.isCenter ?? false}\r\n                >{props.message}</_Message>\r\n            </_Record>\r\n        );\r\n    }\r\n\r\n    export const MessageLink = (props: {\r\n        message: string,\r\n        isCenter?: boolean;\r\n        clickAction: () => void;\r\n        marginTop?: number;\r\n        marginBottom?: number;\r\n    }) => {\r\n        return (\r\n            <_Record\r\n                isEnable={true}\r\n                isVisible={true}\r\n                textAlign={(props.isCenter ?? false) ? 'center' : 'left'}\r\n                marginTop={props.marginTop ?? 0}\r\n            >\r\n                <_Message\r\n                    isLink={true}\r\n                    onClick={props.clickAction}\r\n                    isCenter={props.isCenter ?? false}\r\n                >{props.message}</_Message>\r\n            </_Record>\r\n        );\r\n    }\r\n\r\n    export const BorderPanel = (props: {\r\n        title: string;\r\n        isEnable?: boolean;\r\n        innerJsx: JSX.Element;\r\n    }) => {\r\n        // const title = props.title ?? 'title pl';\r\n        return (<>\r\n            <_BorderText>{props.title}</_BorderText>\r\n            <_BorderPanel isEnable={props.isEnable ?? true}>{props.innerJsx}</_BorderPanel>\r\n        </>);\r\n    }\r\n\r\n    export const InfoFrame = (props: {\r\n        height?: number;\r\n        textRecords: string[];\r\n    }) => {\r\n        const height = props.height ?? 70;\r\n        const color = '#1a9900';\r\n        return (<>\r\n            <_InfoDiv height={height} color={color}>\r\n                {props.textRecords.map((text, i) => {\r\n                    return <span key={i}>{text}<br /></span>;\r\n                })}\r\n            </_InfoDiv>\r\n        </>);\r\n    };\r\n\r\n    export const Switch = (props: {\r\n        label: string;\r\n        isUse: boolean;\r\n        isEnable?: boolean;\r\n        width?: number;\r\n        isRelation?: boolean;\r\n        callback: () => void;\r\n    }) => {\r\n        const isRelation = props.isRelation ?? false;\r\n        const callback = isRelation && props.isUse ? () => { } : props.callback;\r\n        return (\r\n            <_Switch\r\n                isRelation={isRelation}\r\n                isUse={props.isUse}\r\n                isEnable={props.isEnable ?? true}\r\n                width={props.width}\r\n                onClick={callback}\r\n            >{props.label}</_Switch>\r\n        );\r\n    }\r\n\r\n    export const checkItems = (list: CheckableValue[]) => {\r\n        return list.find(item => item.errors.length > 0) == undefined;\r\n    }\r\n}\r\n\r\nexport default FormUtil;\r\n\r\n\r\nconst _Record = styled.div<{\r\n    isEnable: boolean;\r\n    isVisible: boolean;\r\n    textAlign: 'left' | 'center' | 'right';\r\n    marginTop: number;\r\n}>`\r\n    display: inline-block;\r\n    ${props => props.isVisible ? '' : css`\r\n        display: none;\r\n    `}\r\n    width: 100%;\r\n    height: 40px;\r\n    margin-top: ${props => props.marginTop}px;\r\n    /* background-color: #b3b4c4; */\r\n    /* border: 1px solid #000; */\r\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\r\n    text-align: ${props => props.textAlign};\r\n`;\r\n\r\nconst _ItemnLabel = styled.div<{\r\n    labelWidth?: number;\r\n}>`\r\n    display: inline-block;\r\n    height: calc(100% - 4px);\r\n    width: ${props => props.labelWidth ?? 140}px;\r\n    ${Styles.CSS_LABEL_MIDIUM}\r\n    color: #585858;\r\n    border: solid 1px #7a7a7abf;\r\n    box-sizing: border-box;\r\n    /* background-color: #85a2c5; */\r\n    background: linear-gradient(to bottom, #c3c3c3fc, #d8d8d8, #c3c3c3fc);\r\n    border-radius: 4px;\r\n    text-align: center;\r\n    vertical-align: top;\r\n    margin: 5px 4px 0 4px;\r\n`;\r\n\r\nconst _ItemnInputBak = styled.input<{\r\n    readOnly?: boolean;\r\n    isCenter: boolean;\r\n    hasTitle: boolean;\r\n    width?: number;\r\n    errorType?: ValidateUtil.ErrorType;\r\n}>`\r\n    display: inline-block;\r\n    height: calc(100% - 4px);\r\n    ${props => !props.hasTitle ? css`\r\n    ` : css`\r\n        width: calc(100% - 152px);\r\n    `}\r\n    ${props => props.width == undefined ? '' : css`\r\n        width: ${props.width}px;\r\n    `}\r\n    margin-top: 2px;\r\n    font-size: 24px;\r\n    line-height: 32px;\r\n    /* font-weight: 600; */\r\n    color: #3d3d3d;\r\n    border: solid 1px #959595;\r\n    border-radius: 4px;\r\n    padding: 0 5px;\r\n    box-sizing: border-box;\r\n    background-color: ${props => {\r\n        if (props.errorType == undefined) return '#ececec';\r\n        else {\r\n            switch (props.errorType) {\r\n                case 'required': return '#dbd7b3';\r\n                case 'length': return '#dbb3b3';\r\n                case 'value': return '#b3b3db';\r\n                case 'relation': return '#b3dbb3';\r\n            }\r\n        }\r\n    }};\r\n    text-align: left;\r\n    vertical-align: top;\r\n    user-select: text;\r\n    /* ${props => !props.isCenter ? css`\r\n        margin-left: 4px;\r\n    ` : css``\r\n    } */\r\n    ${props => !props.readOnly ? '' : css`\r\n        color: #020075;\r\n        /* border: none; */\r\n        outline: none;\r\n        background-color: transparent;\r\n    `}\r\n    ::placeholder {\r\n        color: #00000050;\r\n        font-style: italic;\r\n    }\r\n`;\r\n\r\nconst _ItemnInput = styled.input<{\r\n    readOnly?: boolean;\r\n    width?: number;\r\n    errorType?: ValidateUtil.ErrorType;\r\n    marginLeft?: number;\r\n}>`\r\n    display: inline-block;\r\n    height: calc(100% - 4px);\r\n    width: ${props => props.width}px;\r\n    margin-top: 2px;\r\n    margin-left: ${props => props.marginLeft ?? 0}px;\r\n    font-size: 24px;\r\n    line-height: 32px;\r\n    /* font-weight: 600; */\r\n    color: #3d3d3d;\r\n    border: solid 1px #959595;\r\n    border-radius: 4px;\r\n    padding: 0 5px;\r\n    box-sizing: border-box;\r\n    background-color: ${props => {\r\n        if (props.errorType == undefined) return '#ececec';\r\n        else {\r\n            switch (props.errorType) {\r\n                case 'required': return '#dbd7b3';\r\n                case 'length': return '#dbb3b3';\r\n                case 'value': return '#b3b3db';\r\n                case 'relation': return '#b3dbb3';\r\n            }\r\n        }\r\n    }};\r\n    text-align: left;\r\n    vertical-align: top;\r\n    user-select: text;\r\n    ${props => !props.readOnly ? '' : css`\r\n        color: #020075;\r\n        /* border: none; */\r\n        outline: none;\r\n        background-color: transparent;\r\n    `}\r\n    ::placeholder {\r\n        color: #00000050;\r\n        font-style: italic;\r\n    }\r\n`;\r\n\r\nconst _ItemCombobox = styled.select<{\r\n    readOnly?: boolean;\r\n    width?: number;\r\n    errorType?: ValidateUtil.ErrorType;\r\n    marginLeft?: number;\r\n}>`\r\n    display: inline-block;\r\n    height: calc(100% - 4px);\r\n    width: ${props => props.width}px;\r\n    margin-top: 2px;\r\n    margin-left: ${props => props.marginLeft ?? 0}px;\r\n    font-size: 24px;\r\n    line-height: 32px;\r\n    /* font-weight: 600; */\r\n    color: #3d3d3d;\r\n    border: solid 1px #959595;\r\n    border-radius: 4px;\r\n    padding: 0 5px;\r\n    box-sizing: border-box;\r\n    background-color: ${props => {\r\n        if (props.errorType == undefined) return '#ececec';\r\n        else {\r\n            switch (props.errorType) {\r\n                case 'required': return '#dbd7b3';\r\n                case 'length': return '#dbb3b3';\r\n                case 'value': return '#b3b3db';\r\n                case 'relation': return '#b3dbb3';\r\n            }\r\n        }\r\n    }};\r\n    text-align: left;\r\n    vertical-align: top;\r\n    user-select: text;\r\n    ${props => !props.readOnly ? '' : css`\r\n        color: #020075;\r\n        /* border: none; */\r\n        outline: none;\r\n        background-color: transparent;\r\n        pointer-events: none;\r\n    `}\r\n    ::placeholder {\r\n        color: #00000050;\r\n        font-style: italic;\r\n    }\r\n`;\r\n\r\nconst _Option = styled.option<{\r\n    isDisabled: boolean;\r\n}>`\r\n    ${props => !props.isDisabled ? '' : css`\r\n        color: #0000004b;\r\n    `}\r\n`;\r\n\r\nconst _Message = styled.div<{\r\n    isLink?: boolean;\r\n    isCenter: boolean;\r\n}>`\r\n    display: inline-block;\r\n    height: calc(100% - 4px);\r\n    margin-top: 2px;\r\n    font-size: ${Styles.FONT_MIDIUM}px;\r\n    line-height: 32px;\r\n    /* font-weight: 600; */\r\n    color: #002c52;\r\n    border-radius: 4px;\r\n    padding: 0 5px;\r\n    box-sizing: border-box;\r\n    /* background-color: #d37878; */\r\n    text-align: left;\r\n    vertical-align: top;\r\n    user-select: text;\r\n    ${props => !props.isCenter ? css`\r\n        margin-left: 4px;\r\n    ` : css``\r\n    }\r\n    ${props => !props.isLink ? '' : css`\r\n        color: #0459a3;\r\n        user-select: none;\r\n        text-decoration: underline;\r\n        &:hover {\r\n            color: #68a4d8;\r\n        }\r\n    `}\r\n`;\r\n\r\nconst _ButtonsDiv = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 40px;\r\n    /* background-color: #888888; */\r\n    box-sizing: border-box;\r\n    text-align: left;\r\n    white-space: nowrap;\r\n`;\r\n\r\nconst _Button = styled.div<{\r\n    isEnable: boolean;\r\n    isCenter: boolean;\r\n    width?: number;\r\n}>`\r\n    ${Styles.CSS_LABEL_MIDIUM}\r\n    ${props => props.width == undefined ? css`\r\n        padding: 0 40px;\r\n    ` : css`\r\n        width: ${props.width}px;\r\n    `}\r\n    /* line-height: 25px; */\r\n    box-sizing: border-box;\r\n    /* background-color: #a8a8a8; */\r\n    background: linear-gradient(to bottom, #cdcdcd, #ebebeb, #cdcdcd);\r\n    border: 1px solid #747474;\r\n    color: #515151;\r\n    border-radius: 4px;\r\n    ${props => !props.isCenter ? css`\r\n        margin-left: 4px;\r\n    ` : css``\r\n    }\r\n    margin: 5px 0 0 4px;\r\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\r\n    &:hover {\r\n        /* background-color: #98bfc2; */\r\n        background: linear-gradient(to bottom, #989898, #b4b4b4, #989898);\r\n    }\r\n`;\r\n\r\nconst _Switch = styled.div<{\r\n    isUse: boolean;\r\n    isEnable: boolean;\r\n    width?: number;\r\n    isRelation: boolean;\r\n}>`\r\n    ${Styles.CSS_LABEL_MIDIUM}\r\n    ${props => props.width == undefined ? css`\r\n        padding: 0 40px;\r\n    ` : css`\r\n        width: ${props.width}px;\r\n    `}\r\n    /* line-height: 25px; */\r\n    box-sizing: border-box;\r\n    background-color: #a8a8a8;\r\n    color: #515151;\r\n    border: 1px solid #747474;\r\n    ${props => !props.isRelation ? css<{ isUse: boolean }>`\r\n        background-color: ${props => !props.isUse ? '#e7e7e779' : '#e4f67e'};\r\n    ` : css<{ isUse: boolean }>`\r\n        background-color: ${props => !props.isUse ? '#ddc1d979' : '#d898b3'};\r\n        color: ${props => !props.isUse ? '#515151' : '#9c2626'};\r\n    `}\r\n    border-radius: 4px;\r\n    margin: 5px 0 0 4px;\r\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\r\n    &:hover {\r\n        ${props => !props.isRelation ? css<{ isUse: boolean }>`\r\n            background-color: ${props => !props.isUse ? '#edefb286' : '#b5be7f'};\r\n        ` : css<{ isUse: boolean }>`\r\n            background-color: ${props => !props.isUse ? '#d3a1cb79' : '#d898b3'};\r\n            color: ${props => !props.isUse ? '#515151' : '#9c2626'};\r\n        `}\r\n    }\r\n`;\r\n\r\nconst _BorderText = styled.div<{\r\n}>`\r\n    ${Styles.CSS_LABEL_SMALL}\r\n    color: #990000;\r\n    /* background-color: #0a0a0a40; */\r\n    font-style: italic;\r\n    margin: 4px 0 0 8px;\r\n`;\r\nconst _BorderPanel = styled.div<{\r\n    isEnable: boolean;\r\n}>`\r\n    display: inline-block;\r\n    margin: 0 0 0 6px;\r\n    padding: 4px;\r\n    width: calc(100% - 12px);\r\n    background-color: #dcddce;\r\n    border: 1px solid #000;\r\n    box-sizing: border-box;\r\n    border-radius: 4px;\r\n    text-align: left;\r\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\r\n`;\r\n\r\nconst _InfoDiv = styled.div<{\r\n    height: number;\r\n    color: string;\r\n}>`\r\n    margin: 4px 0 0 0;\r\n    display: inline-block;\r\n    background-color: #e7e5e561;\r\n    border: solid 1px #949494;\r\n    width: 100%;\r\n    height: ${props => props.height}px;\r\n    padding: 2px;\r\n    box-sizing: border-box;\r\n    text-align: left;\r\n    font-size: ${Styles.FONT_SMALL}px;\r\n    color: ${props => props.color};\r\n    overflow-y: auto;\r\n`;","import { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nnamespace TreeUtil {\r\n\r\n    export type ElementNode = {\r\n        // jsx: JSX.Element;\r\n        isOpen: boolean;\r\n        // index: number;\r\n        depth: number;\r\n        data: any;\r\n        children: ElementNode[];\r\n        parent: null | ElementNode;\r\n    }\r\n\r\n    export type DataNode = {\r\n        data: any;\r\n        children: DataNode[];\r\n    }\r\n\r\n    export const createNode = (data: any, parent: ElementNode): ElementNode => {\r\n        // parent.isOpen = true;\r\n        return {\r\n            data, parent, depth: parent.depth + 1,\r\n            isOpen: false,\r\n            children: [],\r\n        };\r\n    }\r\n\r\n    export const getChildIndex = (node: TreeUtil.ElementNode) => {\r\n        const parentNode = node.parent;\r\n        if (parentNode != null) {\r\n            for (let i = 0; i < parentNode.children.length; i++) {\r\n                if (node == parentNode.children[i]) return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    export const Frame = (props: {\r\n        rootDataNode: DataNode;\r\n        clickEvent: (node: ElementNode) => void;\r\n        getLabelJsx: (node: ElementNode) => JSX.Element;\r\n        invalidate: any;\r\n        isDisable?: boolean;\r\n        focusNode?: ElementNode | null;\r\n    }) => {\r\n        const isDisable = props.isDisable ?? false;\r\n        const focusNode = props.focusNode ?? null;\r\n\r\n        const ref = useRef({} as HTMLDivElement);\r\n\r\n        /**\r\n         * データを元に再帰的に以下のツリーを構成する。\r\n         * @returns ツリー\r\n         */\r\n        const buildElementNodeFromData = () => {\r\n            const build = (depth: number, dataNode: DataNode, parent: null | ElementNode): ElementNode => {\r\n                const node: ElementNode = {\r\n                    data: dataNode.data,\r\n                    depth: depth,\r\n                    // index: count,\r\n                    isOpen: false,\r\n                    children: [],\r\n                    parent\r\n                };\r\n                node.children = (() => {\r\n                    return dataNode.children.map(child => {\r\n                        return build(depth + 1, child, node);\r\n                    });\r\n                })();\r\n                return node;\r\n            }\r\n            return build(0, props.rootDataNode, null);\r\n        }\r\n        const [rootElementNode, setRootElementNode] = useState<ElementNode>(buildElementNodeFromData());\r\n\r\n        useEffect(() => {\r\n            setRootElementNode(buildElementNodeFromData());\r\n        }, [props.rootDataNode]);\r\n\r\n        useEffect(() => {\r\n            if (focusNode != null && focusNode.parent != null) {\r\n                focusNode.parent.isOpen = true;\r\n            }\r\n        }, [focusNode]);\r\n\r\n        const jsxList = useMemo(() => {\r\n            // console.log(rootElementNode);\r\n            const list: JSX.Element[] = [];\r\n            const buildJsxRecords = (element: ElementNode, spaceList: boolean[]) => {\r\n\r\n                const getSpaces = () => {\r\n                    return spaceList.map((space, i) => {\r\n                        const lines: JSX.Element[] = [];\r\n                        if (spaceList.length - 1 === i || space) lines.push(space ? <_LineFull key={lines.length} /> : <_LineTop key={lines.length} />);\r\n                        if (spaceList.length - 1 === i) lines.push(<_LineRight key={lines.length} />);\r\n                        return <_Space key={i}>{lines}</_Space>;\r\n                    });\r\n                }\r\n\r\n                const isRelationNode = () => {\r\n                    let result = false;\r\n                    let tempNode = focusNode;\r\n                    // 親判定\r\n                    while (tempNode != null) {\r\n                        if (element.parent == null || element == tempNode) {\r\n                            result = true;\r\n                            break;\r\n                        }\r\n                        tempNode = tempNode.parent;\r\n                    }\r\n                    // 兄弟判定\r\n                    if (result === false && focusNode != null && focusNode.parent != null) {\r\n                        result = focusNode.parent.children.find(node => node == element) != undefined;\r\n                    }\r\n                    return result;\r\n                }\r\n                const isCurrent = element.data == focusNode?.data;\r\n                list.push(\r\n                    <_Record\r\n                        key={list.length}\r\n                        width={ref.current.scrollWidth}\r\n                        isActive={isCurrent}\r\n                        isRelation={!isDisable && isRelationNode()}\r\n                        isDisable={isCurrent && isDisable}\r\n                    >\r\n                        {getSpaces()}\r\n                        {element.children.length === 0 ? <></> : <_Branch\r\n                            onClick={() => {\r\n                                element.isOpen = !element.isOpen;\r\n                                setRootElementNode({ ...rootElementNode });\r\n                                // alert(element.isOpen);\r\n                            }}\r\n                        >{element.isOpen ? '-' : '+'}</_Branch>}\r\n                        <_Jsx\r\n                            onClick={() => {\r\n                                props.clickEvent(element);\r\n                                setRootElementNode({ ...rootElementNode });\r\n                            }}\r\n                            onDoubleClick={() => {\r\n                                element.isOpen = !element.isOpen;\r\n                                setRootElementNode({ ...rootElementNode });\r\n                            }}\r\n                        >\r\n                            {props.getLabelJsx(element)}\r\n                        </_Jsx>\r\n                    </_Record>\r\n                );\r\n                if (element.isOpen) {\r\n                    element.children.forEach((child, i) => {\r\n                        buildJsxRecords(child, spaceList.slice().concat(element.children.length - 1 !== i));\r\n                    });\r\n                }\r\n            }\r\n            buildJsxRecords(rootElementNode, []);\r\n            // rootJsxNode.forEach((el) => {\r\n            //     addElement(el, []);\r\n            // });\r\n            return list;\r\n        }, [rootElementNode, props.invalidate, isDisable]);\r\n\r\n        return (\r\n            <_Wrap\r\n                ref={ref}\r\n                isDisable={isDisable}>\r\n                {jsxList}\r\n            </_Wrap>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TreeUtil;\r\n\r\nconst _Wrap = styled.div<{\r\n    isDisable: boolean;\r\n}>`\r\n    display: inline-block;\r\n    position: relative;\r\n    background-color: #374a54;\r\n    width: calc(100% - 10px);\r\n    height: calc(100% - 10px);\r\n    box-sizing: border-box;\r\n    border: solid 1px #000;\r\n    margin: 5px;\r\n    overflow: auto;\r\n    ${props => !props.isDisable ? '' : css`\r\n        pointer-events: none;\r\n        background-color: #1f3642;\r\n    `}\r\n`;\r\n\r\nconst _Record = styled.div<{\r\n    width: number;\r\n    isActive: boolean;\r\n    isRelation: boolean;\r\n    isDisable: boolean;\r\n}>`\r\n    display: inline-block;\r\n    /* position: relative; */\r\n    ${props => !props.isDisable ? '' : css`\r\n        background-color: #459cff46;\r\n    `}\r\n    opacity: 0.3;\r\n    ${props => !props.isRelation ? '' : css`\r\n        background-color: #ffffff28;\r\n        opacity: 1;\r\n    `}\r\n    ${props => !props.isActive ? '' : css`\r\n        background-color: #b4d9dd83;\r\n        opacity: 1;\r\n    `}\r\n    width: ${props => props.width}px;\r\n    height: 40px;\r\n    box-sizing: border-box;\r\n    white-space: nowrap;\r\n    /* border: solid 1px #000;\r\n    margin: 5px; */\r\n    & *{\r\n        vertical-align: top;\r\n    }\r\n    &:hover {\r\n        opacity: 1;\r\n    }\r\n`;\r\n\r\nconst _Space = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    /* background-color: #b6d5be; */\r\n    width: 40px;\r\n    height: 100%;\r\n    box-sizing: border-box;\r\n    /* border: solid 1px #000; */\r\n`;\r\nconst _LineTop = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    background-color: #b60000;\r\n    width: 4px;\r\n    height: 22px;\r\n    box-sizing: border-box;\r\n    margin: 0 0 0 20px;\r\n`;\r\nconst _LineFull = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    background-color: #b60000;\r\n    width: 4px;\r\n    height: 100%;\r\n    box-sizing: border-box;\r\n    margin: 0 0 0 20px;\r\n`;\r\nconst _LineRight = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    background-color: #b60000;\r\n    width: 16px;\r\n    height: 4px;\r\n    box-sizing: border-box;\r\n    margin: 18px 0 0 0;\r\n`;\r\n\r\nconst _Branch = styled.div`\r\n    display: inline-block;\r\n    /* position: relative; */\r\n    background-color: #d1d1d1;\r\n    width: 30px;\r\n    height: calc(100% - 10px);\r\n    border: solid 1px #000;\r\n    margin: 5px 0 0 3px;\r\n    box-sizing: border-box;\r\n    font-size: 30px;\r\n    /* font-weight: 600; */\r\n    color: #6d1717;\r\n    line-height: 20px;\r\n    padding-left: 3px;\r\n`;\r\nconst _Jsx = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    /* background-color: #ffffff3c; */\r\n    min-width: 100px;\r\n    height: 100%;\r\n    margin: 0 0  0 3px;\r\n    box-sizing: border-box;\r\n`;\r\n","import styled from \"styled-components\";\r\nimport FormUtil from \"../../utils/form/formUtiil\";\r\nimport { GlobalContext } from \"../entry/systemEntry\";\r\nimport { useContext } from \"react\";\r\n\r\nnamespace ConfirmDialog {\r\n\r\n    export const Component = (props: {\r\n        message: string;\r\n        width?: number;\r\n        height?: number;\r\n        buttons?: FormUtil.ButtonProps[];\r\n    }) => {\r\n\r\n        const {store,  setStore } = useContext(GlobalContext);\r\n\r\n        const width = props.width ?? 600;\r\n        const height = props.height ?? 150;\r\n        const buttons = props.buttons ?? [\r\n            {\r\n                label: 'OK',\r\n                callback: () => {\r\n                    store.system.dialog = null;\r\n                    setStore({...store});\r\n                }\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <_Frame width={width} height={height}>\r\n                <_Main><_Inner>\r\n                    {props.message.split('\\n').map((msg, i) => {\r\n                        return <FormUtil.Message\r\n                            key={i}\r\n                            message={msg}\r\n                            isCenter\r\n                        />\r\n                    })}\r\n                </_Inner></_Main>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={buttons} />\r\n            </_Frame>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDialog;\r\n\r\nconst _Frame = styled.div<{\r\n    width: number;\r\n    height: number;\r\n}>`\r\n    display: inline-block;\r\n    position: absolute;\r\n    z-index: 11;\r\n    top: calc(50% - ${props => props.height / 2}px);\r\n    left: calc(50% - ${props => props.width / 2}px);\r\n    width: ${props => props.width}px;\r\n    height: ${props => props.height}px;\r\n    background-color: #e7e7e7e2;\r\n    border: 1px solid #8f8f8f;\r\n    border-radius: 4px;\r\n    box-shadow: 10px 15px 15px #0000004b;\r\n`;\r\n\r\nconst _Main = styled.div<{}>`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 110px;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n`;\r\n\r\nconst _Inner = styled.div<{}>`\r\n    /* text-align: center; */\r\n    display: inline-block;\r\n    width: 100%;\r\n    /* background-color: #bb6868e1; */\r\n`;","\r\n/**\r\n * 入力チェックを行うユーティリティ。\r\n */\r\nnamespace ValidateUtil {\r\n\r\n    export type ErrorType = 'required' | 'length' | 'value' | 'relation';\r\n\r\n    export type Validate = {\r\n        checker: (value: string) => boolean;\r\n        errorType: ErrorType;\r\n        message?: string;\r\n    }\r\n\r\n    /**\r\n     * 必須チェック\r\n     * @param str 検証する文字列\r\n     * @returns 判定結果\r\n     */\r\n    export const checkRequired = (str: string) => {\r\n        return str.length > 0;\r\n    }\r\n\r\n    /**\r\n     * 文字列の長さチェック\r\n     * @param str 検証する文字列\r\n     * @param min 最小値\r\n     * @param max 最大値\r\n     * @returns 判定結果\r\n     */\r\n    export const checkStringLength = (str: string, min: number, max: number) => {\r\n        return str.length === 0 || (str.length >= min && str.length <= max);\r\n    }\r\n\r\n    /**\r\n     * 半角英数時チェック\r\n     * @param str 検証する文字列\r\n     * @returns 判定結果\r\n     */\r\n    export const checkAsciiChars = (str: string) => {\r\n        const list = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n        return checkIncludesChars(str, list);\r\n    }\r\n\r\n    /**\r\n     * 指定の文字列で構成されているかチェック\r\n     * @param str 検証する文字列\r\n     * @param list 入力を許す対象文字列\r\n     * @returns 判定結果\r\n     */\r\n    export const checkIncludesChars = (str: string, list: string) => {\r\n        for (let i = 0; i < str.length; i++) {\r\n            const ch = str.charAt(i);\r\n            if (list.indexOf(ch) === -1) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 指定の文字列が数値に変換できるかチェック\r\n     * @param str 検証する文字列\r\n     * @returns 判定結果\r\n     */\r\n    export const checkNumber = (str: string) => {\r\n        return !isNaN(Number(str));\r\n    }\r\n\r\n    /**\r\n     * 数値の値の範囲をチェック\r\n     * @param str 検証する文字列\r\n     * @param min 下限\r\n     * @param max 上限\r\n     * @returns 判定結果\r\n     */\r\n    export const checkNumberRange = (str: string, min: number, max: number) => {\r\n        if (!isNaN(Number(str))) {\r\n            const num = Number(str);\r\n            return num >= min && num <= max;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param conditions \r\n     * @returns \r\n     */\r\n    export const checkAll = (conditions: boolean[]): boolean => {\r\n        let result = true;\r\n        for (let i = 0; i < conditions.length; i++) {\r\n            if (!conditions[i]) {\r\n                result = false;\r\n                break;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport default ValidateUtil;\r\n","import SystemConst from \"./systemConst\";\r\n\r\nnamespace CanvasUtil {\r\n\r\n    /**\r\n     * Canvasに任意の描画をし、画像のURLを取得する\r\n     * @param width 幅\r\n     * @param height 高さ\r\n     * @param draw 描画\r\n     * @returns 画像のURL\r\n     */\r\n    export const createURL = (width: number, height: number, draw: (ctx: CanvasRenderingContext2D) => void) => {\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        draw(ctx);\r\n        return canvas.toDataURL();\r\n    }\r\n\r\n    export const getLogoURL = () => {\r\n        return CanvasUtil.createURL(350, 80, (ctx) => {\r\n            // ctx.fillStyle = '#ffffff';\r\n            // ctx.fillRect(0, 0, 350, 80);\r\n\r\n            ctx.shadowColor = \"#555\";\r\n            ctx.shadowOffsetX = 2;\r\n            ctx.shadowOffsetY = 1;\r\n            ctx.shadowBlur = 5;\r\n            ctx.font = '55pt Arial';\r\n            ctx.fillStyle = '#db0000';\r\n            ctx.fillText('L', 30, 70);\r\n            const adjust = ctx.measureText('L').width;\r\n            ctx.fillStyle = '#ffffff';\r\n            ctx.fillText('iCreSia', 30 + adjust, 70);\r\n            ctx.save();\r\n        });\r\n    }\r\n\r\n    export const getAuthTextURL = (text: string) => {\r\n        const WIDTH = SystemConst.AUTH_TEXT_WIDTH;\r\n        const SIZE = SystemConst.AUTH_TEXT_WIDTH / 6;\r\n        return createURL(WIDTH, SystemConst.AUTH_TEXT_HEIGHT, (ctx) => {\r\n            ctx.rotate(1 * Math.PI / 180);\r\n            for (let i = 0; i < text.length; i++) {\r\n                const char = text.charAt(i);\r\n\r\n                const fontRand = Math.random() * 60;\r\n                const alphaRand = Math.random() * 60;\r\n                ctx.font = `${20 + fontRand}pt Arial`;\r\n                ctx.fillStyle = \"rgba(\" + [40, 0, 100, 0.05 + 0.01 * alphaRand] + \")\";\r\n                ctx.fillText(char, i * SIZE, 60);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default CanvasUtil;","import VectorUtil from \"./vectorUtil\";\r\n\r\nnamespace Particle {\r\n\r\n    export type Props = {\r\n        owner: Instance[];\r\n        pos: VectorUtil.XY;\r\n        vec: VectorUtil.Vector;\r\n        limit: number;\r\n        drawer: (self: Instance, ctx: CanvasRenderingContext2D) => void;\r\n        extend: ((self: Instance) => void)[];\r\n    }\r\n\r\n    export class Instance {\r\n\r\n        owner: Instance[];\r\n        pos: VectorUtil.XY;\r\n        prevPos: VectorUtil.XY;\r\n        vec: VectorUtil.Vector;\r\n        frame: number;\r\n        limit: number;\r\n        isLive: boolean;\r\n        drawer: (self: Instance, ctx: CanvasRenderingContext2D) => void;\r\n        extend: ((self: Instance) => void)[];\r\n\r\n        constructor(props: Props) {\r\n            this.owner = props.owner;\r\n            this.pos = props.pos;\r\n            this.prevPos = props.pos;\r\n            this.vec = props.vec;\r\n\r\n            this.frame = 0;\r\n            this.limit = props.limit;\r\n            this.isLive = true;\r\n            this.drawer = props.drawer;\r\n            this.extend = props.extend;\r\n        }\r\n\r\n        update = () => {\r\n\r\n            this.pos.x += this.vec.xy.x;\r\n            this.pos.y += this.vec.xy.y;\r\n\r\n            this.extend.forEach(callback => callback(this));\r\n\r\n            if (this.frame === this.limit) {\r\n                this.isLive = false;\r\n            }\r\n            this.frame++;\r\n        }\r\n\r\n        draw = (ctx: CanvasRenderingContext2D) => {\r\n            this.drawer(this, ctx);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Particle;","import Particle from \"./particle\";\r\n\r\nnamespace DrawUtil {\r\n\r\n    export type Rgba = {\r\n        r: number;\r\n        g: number;\r\n        b: number;\r\n        a: number;\r\n    }\r\n\r\n    export type ColorStop = {\r\n        offset: number;\r\n        color: string;\r\n    }\r\n\r\n    export type DrawerParam = {\r\n        color: string;\r\n        radius?: number;\r\n        disappearStartRate?: number;\r\n        shrinkStartRate?: number;\r\n    }\r\n\r\n    export const createGradDrawer = (param: DrawerParam) => {\r\n\r\n        const radiusBase = param.radius ?? 30;\r\n        return (self: Particle.Instance, ctx: CanvasRenderingContext2D) => {\r\n            let radius = radiusBase;\r\n            if (param.shrinkStartRate != undefined) {\r\n                const start = Math.floor(self.limit * param.shrinkStartRate);\r\n                if (self.frame > start) {\r\n                    const limit = self.limit - start;\r\n                    const frame = self.frame - start;\r\n                    const rate = (limit - frame) / limit;\r\n                    radius *= rate;\r\n                }\r\n            }\r\n\r\n            const x = self.pos.x;\r\n            const y = self.pos.y;\r\n            const g = ctx.createRadialGradient(x, y, 1, x, y, radius);\r\n\r\n            const grads: ColorStop[] = [];\r\n            const rgba = convertRgbaFromColorCode(param.color) ?? { r: 255, g: 255, b: 255, a: 255 };\r\n            grads.push({ offset: 0, color: convertColorCodeFromRgba({ r: 255, g: 255, b: 255, a: Math.floor(rgba.a * 0.9) }) });\r\n            grads.push({ offset: 0.2, color: convertColorCodeFromRgba({ ...rgba, a: Math.floor(rgba.a * 0.15) }) });\r\n            grads.push({ offset: 1, color: convertColorCodeFromRgba({ ...rgba, a: 1 }) });\r\n\r\n            grads.forEach(grad => {\r\n                g.addColorStop(grad.offset, grad.color);\r\n            });\r\n\r\n            ctx.globalAlpha = 1;\r\n            if (param.disappearStartRate != undefined) {\r\n                const start = Math.floor(self.limit * param.disappearStartRate);\r\n                if (self.frame > start) {\r\n                    const limit = self.limit - start;\r\n                    const frame = self.frame - start;\r\n                    ctx.globalAlpha = (limit - frame) / limit;\r\n                }\r\n            }\r\n\r\n            ctx.fillStyle = g;\r\n            ctx.beginPath();\r\n            ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n        };\r\n    }\r\n\r\n    export const convertRgbaFromColorCode = (code: string): Rgba | null => {\r\n        const div = code.split('#');\r\n        if (div.length !== 2 || div[1].length < 6) return null;\r\n\r\n        const value = div[1];\r\n        const r = Number.parseInt(value.substring(0, 2), 16);\r\n        const g = Number.parseInt(value.substring(2, 4), 16);\r\n        const b = Number.parseInt(value.substring(4, 6), 16);\r\n        let a = 1;\r\n        if (value.length === 8) {\r\n            a = Number.parseInt(value.substring(6, 8), 16);\r\n        }\r\n        return { r, g, b, a };\r\n    }\r\n\r\n    export const convertColorCodeFromRgba = (rgba: Rgba): string => {\r\n        const r = ('00' + rgba.r.toString(16)).slice(-2);\r\n        const g = ('00' + rgba.g.toString(16)).slice(-2);\r\n        const b = ('00' + rgba.b.toString(16)).slice(-2);\r\n        const a = ('00' + rgba.a.toString(16)).slice(-2);\r\n        return `#${r}${g}${b}${a}`;\r\n    }\r\n\r\n    export const toWhite = (color: string, rate: number): string => {\r\n        return color;\r\n    }\r\n}\r\n\r\nexport default DrawUtil;","namespace VectorUtil {\r\n\r\n    export type XY = {\r\n        x: number, y: number;\r\n    }\r\n\r\n    export class Vector {\r\n\r\n        xy: XY;\r\n        rad: number;\r\n        len: number;\r\n\r\n        constructor(xy: XY) {\r\n            this.xy = xy;\r\n            this.rad = 0;\r\n            this.len = 0;\r\n            this.syncFromXY();\r\n        }\r\n\r\n        syncFromXY = () => {\r\n            this.len = Math.sqrt(this.xy.x * this.xy.x + this.xy.y * this.xy.y);\r\n            this.rad = Math.atan2(this.xy.y, this.xy.x);\r\n        }\r\n\r\n        syncFromRad = () => {\r\n            this.xy.x = Math.cos(this.rad) * this.len;\r\n            this.xy.y = Math.sin(this.rad) * this.len;\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default VectorUtil;","\r\nnamespace ParamUtil {\r\n    export enum VisualParamType {\r\n        RADIUS = 'radius',\r\n        COLOR_R = 'color_r',\r\n        COLOR_G = 'color_g',\r\n        COLOR_B = 'color_b',\r\n        COLOR_A = 'color_a',\r\n        THICKNESS = 'thickness',\r\n    }\r\n    export const VisualParams = Object.values(VisualParamType);\r\n    export type VisualParam = typeof VisualParams[number];\r\n\r\n    export enum BehaviorParamType {\r\n        LIMIT = 'limit',\r\n        POS_X = 'pos_x',\r\n        POS_Y = 'pos_y',\r\n        VEC_X = 'vec_x',\r\n        VEC_Y = 'vec_y',\r\n        VEC_RAD = 'vec_radian',\r\n        VEC_LEN = 'vec_length',\r\n    }\r\n    export const BehaviorParams = Object.values(BehaviorParamType);\r\n    export type BehaviorParam = typeof BehaviorParams[number];\r\n\r\n    export enum SelfParamType {\r\n        FRAME = 'self_frame',\r\n        LIMIT = 'self_limit',\r\n        POS_X = 'self_pos_x',\r\n        POS_Y = 'self_pos_y',\r\n        VEC_X = 'self_vec_x',\r\n        VEC_Y = 'self_vec_y',\r\n        VEC_RAD = 'self_vec_radian',\r\n        VEC_LEN = 'self_vec_length',\r\n    }\r\n    export const SelfParams = Object.values(SelfParamType);\r\n    export type SelfParam = typeof SelfParams[number];\r\n\r\n    export enum ExtendParamType {\r\n        LOOP_COUNT = 'loop_count',\r\n        LOOP_ITERATE = 'loop_iterate',\r\n        INVOKE = 'invoke',\r\n    }\r\n    export const ExtendParams = Object.values(ExtendParamType);\r\n    export type ExtendParam = typeof ExtendParams[number];\r\n\r\n    export enum EffectParamType {\r\n        DISAPPEAR_START = 'disappear_start',\r\n        SHRINK_START = 'shrink_start'\r\n    }\r\n    export const EffectParams = Object.values(EffectParamType);\r\n    export type EffectParam = typeof EffectParams[number];\r\n\r\n    export enum ModulateParamType {\r\n        DECAY_RATE = 'decay_rate',\r\n        DECAY_LIMIT = 'decay_limit',\r\n        GRAVITY_VAL = 'gravity_val',\r\n        GRAVITY_LIMIT = 'gravity_limit',\r\n    }\r\n    export const ModulateParams = Object.values(ModulateParamType);\r\n    export type ModulateParam = typeof ModulateParams[number];\r\n\r\n    export enum ConstantType {\r\n        SCREEN_WIDTH = 'screen_width',\r\n        SCREEN_HEIGHT = 'screen_height',\r\n        PI = 'pi',\r\n        RADIAN_ROUND = 'radian_round',\r\n    }\r\n    export const Constants = Object.values(ConstantType);\r\n    export type Constant = typeof Constants[number];\r\n\r\n}\r\n\r\nexport default ParamUtil;","import Particle from \"../../graphic/particle\";\r\n\r\nnamespace ModulateBuilder {\r\n\r\n    type ModulateParam = {\r\n        decayRate?: number;\r\n        decayLimit?: number;\r\n        gravity?: number;\r\n        gravityLimit?: number;\r\n    }\r\n\r\n    export const build = (extendList: ((self: Particle.Instance) => void)[], param: ModulateParam) => {\r\n        \r\n        // 減衰メソッド\r\n        if (param.decayRate != undefined && param.decayLimit != undefined) {\r\n            const decayLimit = param.decayLimit;\r\n            const decayRate = param.decayRate;\r\n            extendList.push((self: Particle.Instance) => {\r\n\r\n                if (self.vec.len > decayLimit) {\r\n                    self.vec.len = self.vec.len * decayRate;\r\n                    self.vec.syncFromRad();\r\n                }\r\n            });\r\n        }\r\n        // 重力メソッド\r\n        if (param.gravity != undefined && param.gravityLimit != undefined) {\r\n            const gravityLimit = param.gravityLimit;\r\n            const gravity = param.gravity;\r\n            extendList.push((self: Particle.Instance) => {\r\n\r\n                if (self.vec.xy.y < gravityLimit) {\r\n                    self.vec.xy.y += gravity;\r\n                    self.vec.syncFromXY();\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default ModulateBuilder;","import DrawUtil from \"../../graphic/drawUtil\";\r\nimport Particle from \"../../graphic/particle\";\r\nimport VectorUtil from \"../../graphic/vectorUtil\";\r\nimport LogicUtil from \"../factory/util/logicUtil\";\r\nimport ParamUtil from \"../factory/util/paramUtil\";\r\nimport ModulateBuilder from \"./modulateBuilder\";\r\n\r\nnamespace PreviewUtil {\r\n\r\n    export const SCREEN_WIDTH = 550;\r\n    export const SCREEN_HEIGHT = 550;\r\n\r\n    export type ValueMap = {\r\n        name: string;\r\n        value: number;\r\n    }\r\n\r\n    export const buildLogicProps = (\r\n        owner: Particle.Instance[],\r\n        origin: LogicUtil.NodeLogicItem,\r\n        rootData: LogicUtil.WrapElement,\r\n        sends: ValueMap[]\r\n    ): Particle.Props => {\r\n\r\n        /**\r\n         * ディペンドするロジック要素を識別名から探して返す。\r\n         * @param name ロジックの識別名\r\n         * @returns ロジック要素\r\n         */\r\n        const searchDependLogic = (name: string): LogicUtil.NodeLogicItem | null => {\r\n            const mng = (rootData.data as LogicUtil.NodeRoot).logicMng.data as LogicUtil.NodeLogicManager;\r\n            const wrap = mng.defs.find(def => (def.data as LogicUtil.NodeLogicItem).name === name);\r\n            if (wrap == undefined) return null;\r\n            return wrap.data as LogicUtil.NodeLogicItem;\r\n        }\r\n\r\n        /**\r\n         * 再帰的にパーティクルを生成する。\r\n         * @param cur ルートとなるロジック要素\r\n         * @param sends 親要素から送られてきたフィールド\r\n         * @returns パーティクルのプロパティ\r\n         */\r\n        const createParticleRec = (cur: LogicUtil.NodeLogicItem, sends: ValueMap[]): Particle.Props => {\r\n            let valueMapList: ValueMap[] = sends.concat(ConstantValueMap);\r\n\r\n\r\n            // フィールドのパラメータを取得\r\n            const fieldMng = searchElement('field-mng', cur.mngs);\r\n            if (fieldMng != null) {\r\n                (fieldMng.data as LogicUtil.NodeFieldManager).fields.forEach(field => {\r\n                    const paramItem = field.data as LogicUtil.NodeParamItem;\r\n                    const value = convertFormulaToValue(paramItem, valueMapList);\r\n                    valueMapList.push({ name: paramItem.name, value });\r\n                });\r\n            }\r\n\r\n            const visualParams = (searchElement('visual-mng', cur.mngs)?.data as LogicUtil.NodeParamManager).\r\n                params.map(param => param.data as LogicUtil.NodeParamItem);\r\n            const behaviorParams = (searchElement('behavior-mng', cur.mngs)?.data as LogicUtil.NodeParamManager).\r\n                params.map(param => param.data as LogicUtil.NodeParamItem);\r\n\r\n            const getVisualParam = (name: string) => {\r\n                return convertParamsToValue(name, visualParams, valueMapList);\r\n            }\r\n            const getBehaviorParam = (name: string) => {\r\n                return convertParamsToValue(name, behaviorParams, valueMapList);\r\n            }\r\n\r\n            // Behaviorのパラメータを取得\r\n            const limit = Math.floor(getBehaviorParam(ParamUtil.BehaviorParamType.LIMIT) as number);\r\n            const pos = {\r\n                x: getBehaviorParam(ParamUtil.BehaviorParamType.POS_X) as number,\r\n                y: getBehaviorParam(ParamUtil.BehaviorParamType.POS_Y) as number\r\n            };\r\n            const vec = new VectorUtil.Vector({ x: 0, y: 0 });\r\n            const isVectorMethod = behaviorParams.find(param => param.name === ParamUtil.BehaviorParamType.VEC_X) != undefined;\r\n            if (isVectorMethod) {\r\n                vec.xy.x = getBehaviorParam(ParamUtil.BehaviorParamType.VEC_X) as number;\r\n                vec.xy.y = getBehaviorParam(ParamUtil.BehaviorParamType.VEC_Y) as number;\r\n                vec.syncFromXY();\r\n            } else {\r\n                vec.rad = getBehaviorParam(ParamUtil.BehaviorParamType.VEC_RAD) as number;\r\n                vec.len = getBehaviorParam(ParamUtil.BehaviorParamType.VEC_LEN) as number;\r\n                vec.syncFromRad();\r\n            }\r\n\r\n            /**\r\n             * 追加動作（子要素、エフェクト、モデュレート）\r\n             */\r\n            const extendList: ((self: Particle.Instance) => void)[] = [];\r\n\r\n            // 子要素を生成する\r\n            const connectMng = searchElement('inherit-mng', cur.mngs);\r\n            if (connectMng != null) {\r\n\r\n                // パーティクル情報のフィールド追加\r\n                valueMapList.push({ name: ParamUtil.BehaviorParamType.POS_X, value: pos.x });\r\n                valueMapList.push({ name: ParamUtil.BehaviorParamType.POS_Y, value: pos.y });\r\n                valueMapList.push({ name: ParamUtil.BehaviorParamType.VEC_X, value: vec.xy.x });\r\n                valueMapList.push({ name: ParamUtil.BehaviorParamType.VEC_X, value: vec.xy.y });\r\n                valueMapList.push({ name: ParamUtil.BehaviorParamType.VEC_RAD, value: vec.rad });\r\n                valueMapList.push({ name: ParamUtil.BehaviorParamType.VEC_LEN, value: vec.len });\r\n\r\n                const connects = (connectMng.data as LogicUtil.NodeConnectManager).inherits;\r\n\r\n                connects.forEach(connect => {\r\n                    const connector = connect.data as LogicUtil.NodeInheritConnector;\r\n                    if (connector.disable ?? false) return;\r\n\r\n                    const logicItem = connector.method === 'create' ?\r\n                        searchElement('inherit-logic', connector.mngs)?.data as LogicUtil.NodeLogicItem :\r\n                        searchDependLogic(connector.depend);\r\n\r\n                    if (logicItem != null) {\r\n\r\n                        extendList.push((self: Particle.Instance) => {\r\n\r\n                            const addValueMap = (item: ValueMap) => {\r\n                                const map = valueMapList.find(map => map.name === item.name);\r\n                                if (map != undefined) map.value = item.value;\r\n                                else valueMapList.push(item);\r\n                            }\r\n                            addValueMap({ name: ParamUtil.SelfParamType.FRAME, value: self.frame });\r\n                            addValueMap({ name: ParamUtil.SelfParamType.LIMIT, value: self.limit });\r\n                            addValueMap({ name: ParamUtil.SelfParamType.POS_X, value: self.pos.x });\r\n                            addValueMap({ name: ParamUtil.SelfParamType.POS_Y, value: self.pos.y });\r\n                            addValueMap({ name: ParamUtil.SelfParamType.VEC_X, value: self.vec.xy.x });\r\n                            addValueMap({ name: ParamUtil.SelfParamType.VEC_Y, value: self.vec.xy.y });\r\n                            addValueMap({ name: ParamUtil.SelfParamType.VEC_RAD, value: self.vec.rad });\r\n                            addValueMap({ name: ParamUtil.SelfParamType.VEC_LEN, value: self.vec.len });\r\n\r\n                            // Inherit配下のフィールドのパラメータを取得\r\n                            const itrfldValueMap: ValueMap[] = [];\r\n                            const fieldMng = searchElement('inhfld-mng', connector.mngs);\r\n                            if (fieldMng != null) {\r\n                                (fieldMng.data as LogicUtil.NodeFieldManager).fields.forEach(field => {\r\n                                    const paramItem = field.data as LogicUtil.NodeParamItem;\r\n                                    const value = convertFormulaToValue(paramItem, valueMapList);\r\n                                    itrfldValueMap.push({ name: paramItem.name, value });\r\n                                });\r\n                            }\r\n\r\n                            let loopCnt = 1;\r\n                            const extendItem = searchElement('extend-mng', connector.mngs) as LogicUtil.WrapElement;\r\n                            const extendParams = (extendItem.data as LogicUtil.NodeParamManager).params.map(param => param.data as LogicUtil.NodeParamItem);\r\n                            const loopCntVal = convertParamsToValue(ParamUtil.ExtendParamType.LOOP_COUNT, extendParams, valueMapList.concat(itrfldValueMap));\r\n\r\n                            // 派生条件\r\n                            const isInvoke = convertParamsToBoolean(ParamUtil.ExtendParamType.INVOKE, extendParams, valueMapList) ?? true;\r\n\r\n                            // 条件を満たさない場合、以下の処理（パーティクルの生成）を行わない\r\n                            if (!isInvoke) return;\r\n\r\n                            // イテレータを利用している場合\r\n                            if (loopCntVal != undefined) {\r\n                                loopCnt = loopCntVal;\r\n                            }\r\n\r\n                            for (let i = 0; i < loopCnt; i++) {\r\n\r\n                                // イテレータ関連のパラメータを追加\r\n                                const iterateValueMap: ValueMap[] = [\r\n                                    { name: ParamUtil.ExtendParamType.LOOP_COUNT, value: loopCnt },\r\n                                    { name: ParamUtil.ExtendParamType.LOOP_ITERATE, value: i }\r\n                                ];\r\n\r\n                                const sendItem = searchElement('send-mng', connector.mngs)?.data as LogicUtil.NodeParamManager;\r\n                                const params = sendItem.params.map(param => param.data as LogicUtil.NodeParamItem);\r\n                                const sendValueMapList: ValueMap[] = params.map(item => {\r\n                                    return { name: item.name, value: convertParamsToValue(item.name, params, valueMapList.concat(itrfldValueMap).concat(iterateValueMap)) ?? 0 }\r\n                                });\r\n\r\n                                const props = createParticleRec(\r\n                                    logicItem,\r\n                                    sendValueMapList\r\n                                );\r\n                                self.owner.push(new Particle.Instance(props));\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n\r\n            // モデュレート（動きの変化）を付与\r\n            ModulateBuilder.build(extendList, {\r\n                decayLimit: getBehaviorParam(ParamUtil.ModulateParamType.DECAY_LIMIT),\r\n                decayRate: getBehaviorParam(ParamUtil.ModulateParamType.DECAY_RATE),\r\n                gravity: getBehaviorParam(ParamUtil.ModulateParamType.GRAVITY_VAL),\r\n                gravityLimit: getBehaviorParam(ParamUtil.ModulateParamType.GRAVITY_LIMIT),\r\n            });\r\n\r\n            // Visualのパラメータを取得\r\n            const radius = getVisualParam(ParamUtil.VisualParamType.RADIUS);\r\n            const colorR = getVisualParam(ParamUtil.VisualParamType.COLOR_R);\r\n            const colorG = getVisualParam(ParamUtil.VisualParamType.COLOR_G);\r\n            const colorB = getVisualParam(ParamUtil.VisualParamType.COLOR_B);\r\n            const colorA = getVisualParam(ParamUtil.VisualParamType.COLOR_A);\r\n            // エフェクトお付与\r\n            let disappearStart = getVisualParam(ParamUtil.EffectParamType.DISAPPEAR_START);\r\n            let shrinkStart = getVisualParam(ParamUtil.EffectParamType.SHRINK_START);\r\n\r\n            let drawer: (self: Particle.Instance, ctx: CanvasRenderingContext2D) => void = () => { };\r\n            if (radius != undefined) {\r\n                drawer = DrawUtil.createGradDrawer({\r\n                    radius: radius,\r\n                    color: DrawUtil.convertColorCodeFromRgba({\r\n                        r: colorR as number,\r\n                        g: colorG as number,\r\n                        b: colorB as number,\r\n                        a: colorA as number,\r\n                    }),\r\n                    disappearStartRate: disappearStart,\r\n                    shrinkStartRate: shrinkStart\r\n                });\r\n            }\r\n\r\n            return {\r\n                owner, pos, vec,\r\n                limit, drawer,\r\n                extend: extendList\r\n            };\r\n        }\r\n\r\n        return createParticleRec(origin, sends);\r\n    }\r\n\r\n    const searchElement = (type: LogicUtil.NodeType, warpList: LogicUtil.WrapElement[]) => {\r\n        return warpList.find(wrap => wrap.type === type) ?? null;\r\n    }\r\n\r\n    /**\r\n     * 式を計算して結果の値を返す\r\n     * @param name プロパティ名\r\n     * @param params パラメータ要素\r\n     * @param valueMapList 値変換マップ\r\n     * @returns 算出された値\r\n     */\r\n    export const convertParamsToValue = (name: string, params: LogicUtil.NodeParamItem[], valueMapList: ValueMap[]): number | undefined => {\r\n        const formula = params.find(param => param.name === name);\r\n        if (formula == undefined) return undefined;\r\n        return convertFormulaToValue(formula, valueMapList);\r\n    }\r\n\r\n    const convertFormulaToValue = (formula: LogicUtil.NodeParamItem, valueMapList: ValueMap[]): number => {\r\n        const values = formula.values.map(v => {\r\n            if (v.type === 'direct') return Number(v.value);\r\n            const valueMap = valueMapList.find(m => m.name === v.value);\r\n            if (valueMap == undefined) return 0;\r\n            return valueMap.value;\r\n        });\r\n\r\n        let formulaStr = '';\r\n        let varCnt = 0;\r\n        formula.formulaItems.forEach((item) => {\r\n            let str = item;\r\n            if (item === 'var') {\r\n                str = values[varCnt].toString();\r\n                varCnt++;\r\n            }\r\n            else if (item === 'rand(') str = 'Math.random()*(';\r\n            else if (item === 'integer(') str = 'Math.floor(';\r\n            formulaStr += str;\r\n        });\r\n        // console.log(formulaStr);\r\n        const ret = Function(`return (${formulaStr})`)();\r\n        // console.log(ret);\r\n        return ret;\r\n    }\r\n\r\n    export const convertParamsToBoolean = (name: string, params: LogicUtil.NodeParamItem[], valueMapList: ValueMap[]): boolean | undefined => {\r\n        const formula = params.find(param => param.name === name);\r\n        if (formula == undefined) return undefined;\r\n        return convertFormulaToBoolean(formula, valueMapList);\r\n    }\r\n\r\n    const convertFormulaToBoolean = (formula: LogicUtil.NodeParamItem, valueMapList: ValueMap[]): boolean => {\r\n        const values = formula.values.map(v => {\r\n            if (v.type === 'direct') return Number(v.value);\r\n            const valueMap = valueMapList.find(m => m.name === v.value);\r\n            if (valueMap == undefined) return 0;\r\n            return valueMap.value;\r\n        });\r\n\r\n        let formulaStr = '';\r\n        let varCnt = 0;\r\n        formula.formulaItems.forEach((item, i) => {\r\n            let str = item;\r\n            if (item === 'var') {\r\n                str = values[varCnt].toString();\r\n                varCnt++;\r\n            }\r\n            else if (item === 'rand(') str = 'Math.random()*(';\r\n            else if (item === 'integer(') str = 'Math.floor(';\r\n            else if (item === '=') str = '==';\r\n            formulaStr += str;\r\n        });\r\n        // console.log(formulaStr);\r\n        const ret = Function(`return (${formulaStr})`)();\r\n        // console.log(formulaStr);\r\n        return ret;\r\n    }\r\n\r\n    export const ConstantValueMap: ValueMap[] = [\r\n        { name: ParamUtil.ConstantType.SCREEN_WIDTH, value: SCREEN_WIDTH },\r\n        { name: ParamUtil.ConstantType.SCREEN_HEIGHT, value: SCREEN_HEIGHT },\r\n        { name: ParamUtil.ConstantType.PI, value: 3.14159265359 },\r\n        { name: ParamUtil.ConstantType.RADIAN_ROUND, value: 3.14159265359 * 2 }\r\n    ];\r\n}\r\n\r\nexport default PreviewUtil;","import styled from \"styled-components\";\r\nimport { useContext, useEffect, useMemo, useState, useRef } from \"react\";\r\nimport { GlobalContext } from \"../../entry/systemEntry\";\r\nimport FormUtil from \"../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../utils/treeUtil\";\r\nimport LogicUtil from \"../factory/util/logicUtil\";\r\nimport { TabbedPane } from \"../../../base/components/tab/tabbedPane\";\r\nimport ValidateUtil from \"../../../utils/form/validateUtil\";\r\nimport CanvasUtil from \"../../../utils/canvasUtil\";\r\nimport Particle from \"../../graphic/particle\";\r\nimport PreviewUtil from \"./previewUtil\";\r\nimport Styles from \"../../../base/design/styles\";\r\n\r\nnamespace LogicPreviewFrame {\r\n\r\n    const width = 600;\r\n    const height = 660;\r\n\r\n    export const Component = (props: {\r\n        node: TreeUtil.ElementNode;\r\n        rootData: LogicUtil.WrapElement;\r\n    }) => {\r\n        const { store, setStore } = useContext(GlobalContext);\r\n        const ref = useRef<HTMLDivElement>({} as HTMLDivElement);\r\n\r\n        const [formList, setFormList] = useState<FormUtil.CheckableValue[]>([]);\r\n\r\n        const [sceens, setSceens] = useState<string[]>([]);\r\n        const [frameCnt, setFrameCnt] = useState<number>(-1);\r\n        const [tabIndex, setTabIndex] = useState<number>(0);\r\n        const [cur, setCur] = useState<number>(0);\r\n        const [isBuild, setBuild] = useState<boolean>(false);\r\n        const [isPlay, setPlay] = useState<boolean>(false);\r\n\r\n        useEffect(() => {\r\n            if (isPlay) {\r\n                if (cur < frameCnt) {\r\n                    setTimeout(() => {\r\n                        setCur(cur + 1);\r\n                    }, 1000 / 30);\r\n                } else {\r\n                    setPlay(false);\r\n                    setCur(0);\r\n                }\r\n            }\r\n        }, [isPlay, cur]);\r\n\r\n        const getMapList = (): { key: string, value: string }[] => {\r\n            const argWrap = (props.node.children[0].data as LogicUtil.WrapElement);\r\n            if (argWrap.type === 'argument-mng') {\r\n                return (argWrap.data as LogicUtil.NodeArgumentManager).args.map(arg => {\r\n                    const argItem = arg.data as LogicUtil.NodeArgumentItem;\r\n                    let value: string = '';\r\n                    return { key: argItem.name, value };\r\n                });\r\n            }\r\n            return [];\r\n        }\r\n\r\n        const argMapList = useMemo(() => {\r\n            return getMapList();\r\n        }, []);\r\n\r\n        useEffect(() => {\r\n            setFormList(argMapList.map(arg => {\r\n                return { value: arg.value, errors: [] };\r\n            }));\r\n        }, []);\r\n\r\n        const formListJsx = useMemo(() => {\r\n            return formList.map((form, i) => {\r\n                return (\r\n                    <FormUtil.FormRecord\r\n                        key={i}\r\n                        titleLabel={argMapList.map(arg => arg.key)[i]}\r\n                        labelWidth={250}\r\n                        jsx={\r\n                            <FormUtil.TextField\r\n                                width={332}\r\n                                isNumber\r\n                                checkable={form}\r\n                                setCheckable={(checkable) => {\r\n                                    form = { ...checkable };\r\n                                    setFormList(formList.slice());\r\n                                }}\r\n                                validates={[\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkRequired(value),\r\n                                        errorType: \"required\"\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        }\r\n                    />);\r\n            });\r\n        }, [formList]);\r\n\r\n\r\n        const build = () => {\r\n\r\n            setBuild(true);\r\n\r\n            const sceens: string[] = [];\r\n\r\n            const owner: Particle.Instance[] = [];\r\n\r\n            let frameCnt = 0;\r\n            do {\r\n                if (frameCnt === 0) {\r\n                    const origin = (props.node.data as LogicUtil.WrapElement).data as LogicUtil.NodeLogicItem;\r\n                    owner.push(new Particle.Instance(\r\n                        PreviewUtil.buildLogicProps(owner, origin, props.rootData, formList.map((form, i) => {\r\n                            return { name: argMapList.map(arg => arg.key)[i], value: Number(form.value) }\r\n                        }))\r\n                    ));\r\n                }\r\n\r\n                sceens.push(CanvasUtil.createURL(550, 550, (ctx) => {\r\n\r\n                    // パーティクルの描画\r\n                    owner.forEach(par => {\r\n                        par.draw(ctx);\r\n                    });\r\n\r\n                    // 経過フレーム、要素数の表示\r\n                    ctx.globalAlpha = 1;\r\n                    ctx.font = '16pt Arial';\r\n                    ctx.fillStyle = '#ffffff';\r\n                    ctx.fillText(`${frameCnt}`, 6, 24);\r\n                    ctx.fillStyle = '#ffec5c';\r\n                    ctx.fillText(`${owner.length}`, 6, 44);\r\n\r\n                    ctx.save();\r\n                }));\r\n\r\n                // パーティクルの更新\r\n                for (let i = owner.length - 1; i >= 0; i--) {\r\n                    const particle = owner[i];\r\n\r\n                    particle.update();\r\n                }\r\n\r\n                // 死滅したパーティクルの削除\r\n                for (let i = owner.length - 1; i >= 0; i--) {\r\n                    const particle = owner[i];\r\n                    if (!particle.isLive) {\r\n                        owner.splice(i, 1);\r\n                    }\r\n                }\r\n\r\n                if (frameCnt > 500 || owner.length > 3000) break;\r\n                frameCnt++;\r\n            } while (owner.length > 0);\r\n            setFrameCnt(frameCnt);\r\n            setSceens(sceens);\r\n\r\n            setBuild(false);\r\n            setTabIndex(1);\r\n        }\r\n\r\n\r\n        const isInputOK = () => {\r\n            return formList.find(form => form.errors.length > 0) == undefined;\r\n        }\r\n        const buildTabJsx = (\r\n            <_Wrap>\r\n                <_FormDiv>\r\n                    {formListJsx}\r\n                </_FormDiv>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Build',\r\n                            isEnable: isInputOK() && !isBuild,\r\n                            callback: () => {\r\n                                build();\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n            </_Wrap>\r\n        );\r\n\r\n        const previewTabJsx = (\r\n            <_Wrap>\r\n                <_CanvasDiv>\r\n                    {sceens.length === 0 ? <></> : <_IMG src={sceens[cur]} />}\r\n                </_CanvasDiv>\r\n                <_ProgressDiv ref={ref} onClick={(e) => {\r\n                    if(isPlay) return;\r\n                    const clickX = e.pageX;\r\n                    // 要素の位置を取得\r\n                    const clientRect = ref.current.getBoundingClientRect();\r\n                    const positionX = clientRect.left + window.pageXOffset;\r\n\r\n                    // 要素内におけるクリック位置を計算\r\n                    const x = clickX - positionX;\r\n                    const rate = x / clientRect.width;\r\n                    setCur(Math.floor(frameCnt * rate));\r\n                }}>\r\n                    <_ProgressVal rate={100 * cur / (frameCnt - 1)} />\r\n                </_ProgressDiv>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: '←',\r\n                            width: 50,\r\n                            isEnable: !isPlay && cur > 0,\r\n                            callback: () => {\r\n                                setCur(cur - 1);\r\n                            }\r\n                        },\r\n                        {\r\n                            label: '→',\r\n                            width: 50,\r\n                            isEnable: !isPlay && cur < sceens.length - 1,\r\n                            callback: () => {\r\n                                setCur(cur + 1);\r\n                            }\r\n                        },\r\n                        {\r\n                            label: !isPlay ? 'start' : 'Stop',\r\n                            callback: () => {\r\n                                setPlay(!isPlay);\r\n                            }\r\n                        },\r\n                        {\r\n                            label: 'reset',\r\n                            isEnable: !isPlay,\r\n                            callback: () => {\r\n                                setCur(0);\r\n                            }\r\n                        },\r\n                    ]}\r\n                />\r\n            </_Wrap>\r\n        );\r\n\r\n        return (\r\n            <_Frame\r\n                width={width}\r\n                height={height}\r\n                tabIndex={0}\r\n                onKeyDown={(e) => {\r\n                    if (tabIndex === 0) {\r\n                        if (isInputOK() && e.key === ' ') build();\r\n                    } else {\r\n                        switch (e.key) {\r\n                            case 'ArrowLeft': {\r\n                                if (!isPlay && !isPlay && cur > 0) setCur(cur - 1);\r\n                            } break;\r\n                            case 'ArrowRight': {\r\n                                if (!isPlay && cur < sceens.length - 1) setCur(cur + 1);\r\n                            } break;\r\n                            case ' ': {\r\n                                setPlay(!isPlay);\r\n                            } break;\r\n                        }\r\n                    }\r\n                    if (!isPlay && e.key === 'Escape') {\r\n                        store.system.dialog = null;\r\n                        setStore({ ...store });\r\n                    }\r\n                }}\r\n            >\r\n                <_Main>\r\n                    <TabbedPane\r\n                        tabElements={[\r\n                            { name: 'Build', enable: true, cont: buildTabJsx },\r\n                            { name: 'Play', enable: frameCnt !== -1, cont: previewTabJsx }\r\n                        ]}\r\n                        activeNo={tabIndex}\r\n                        selectTabIndex={(index: number) => setTabIndex(index)}\r\n                    />\r\n                </_Main>\r\n                <_CloseButton\r\n                    isEnable={!isPlay}\r\n                    onClick={() => {\r\n                        store.system.dialog = null;\r\n                        setStore({ ...store });\r\n                    }}\r\n                >×</_CloseButton>\r\n            </_Frame>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LogicPreviewFrame;\r\n\r\nconst _Frame = styled.div<{\r\n    width: number;\r\n    height: number;\r\n}>`\r\n    display: inline-block;\r\n    position: absolute;\r\n    z-index: 11;\r\n    top: calc(50% - ${props => props.height / 2}px);\r\n    left: calc(50% - ${props => props.width / 2}px);\r\n    width: ${props => props.width}px;\r\n    height: ${props => props.height}px;\r\n    background-color: #e7e7e7e2;\r\n    border: 1px solid #8f8f8f;\r\n    border-radius: 4px;\r\n    box-shadow: 10px 15px 15px #0000004b;\r\n`;\r\n\r\nconst _Main = styled.div<{}>`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #4d5056df;\r\n`;\r\nconst _FormDiv = styled.div<{}>`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 580px;\r\n    background-color: #a2c1d5df;\r\n`;\r\nconst _CanvasDiv = styled.div<{}>`\r\n    display: inline-block;\r\n    width: ${PreviewUtil.SCREEN_WIDTH}px;\r\n    height: ${PreviewUtil.SCREEN_HEIGHT}px;\r\n    margin: 5px 0 0 20px;\r\n    background-color: #020202df;\r\n    border: solid 1px #fff;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nconst _Wrap = styled.div<{}>`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #aed5d8e0;\r\n`;\r\n\r\nconst _ProgressDiv = styled.div<{}>`\r\n    display: inline-block;\r\n    width: calc(100% - 8px);\r\n    height: 20px;\r\n    margin: 5px 0 0 4px;\r\n    background-color: #000000;\r\n    border: solid 1px #fff;\r\n    box-sizing: border-box;\r\n`;\r\nconst _ProgressVal = styled.div<{\r\n    rate: number;\r\n}>`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: ${props => props.rate}%;\r\n    height: 100%;\r\n    /* background-color: #2fccf3; */\r\n    background: linear-gradient(to bottom, #37819492, #2fccf3, #37819492);\r\n`;\r\n\r\nconst _IMG = styled.img`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n`;\r\n\r\nconst _CloseButton = styled.div<{\r\n    isEnable: boolean;\r\n}>`\r\n    display: inline-block;\r\n    position: absolute;\r\n    top: 2px;\r\n    right: 4px;\r\n    width: 30px;\r\n    height: 30px;\r\n    z-index: 12;\r\n    background-color: #d5d5d5;\r\n    border: 1px solid #3d3d3d;\r\n    border-radius: 4px;\r\n    font-size: 18px;\r\n    padding-left: 8px;\r\n    font-weight: 600;\r\n    color: #3d3d3d;\r\n    box-sizing: border-box;\r\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\r\n    &:hover {\r\n        background-color: #ce9595;\r\n    }\r\n`;","import FormUtil from \"../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../utils/treeUtil\";\r\nimport LogicUtil from \"./logicUtil\";\r\nimport ParamUtil from \"./paramUtil\";\r\n\r\n\r\nnamespace LogicElementUtil {\r\n\r\n    export const getInnerNode = (\r\n        node: TreeUtil.ElementNode, ...typeList: LogicUtil.NodeType[]\r\n    ): TreeUtil.ElementNode | null => {\r\n\r\n        let cur: TreeUtil.ElementNode | null = node;\r\n        typeList.some(type => {\r\n            if (cur == null) return 1;\r\n            const target = cur.children.find(child => (child.data as LogicUtil.WrapElement).type === type);\r\n            if (target == undefined) cur = null;\r\n            else cur = target;\r\n        });\r\n        return cur;\r\n    }\r\n\r\n    export const getInnerWrap = (\r\n        wrap: LogicUtil.WrapElement, ...typeList: LogicUtil.NodeType[]\r\n    ): LogicUtil.WrapElement | null => {\r\n\r\n        let cur: LogicUtil.WrapElement | null = wrap;\r\n        typeList.some(type => {\r\n            if (cur == null) return 1;\r\n            const listName = getListName(cur.type);\r\n            if (listName == null) cur = null;\r\n            else {\r\n                const list = cur.data[`${listName}`] as LogicUtil.WrapElement[];\r\n                const target = list.find(child => child.type === type);\r\n                if (target == undefined) cur = null;\r\n                else cur = target;\r\n            }\r\n        });\r\n        return cur;\r\n    }\r\n\r\n    export const addChild = (wrapElement: LogicUtil.WrapElement, node: TreeUtil.ElementNode) => {\r\n        return insertChild(wrapElement, node, node.children.length);\r\n    }\r\n    export const insertChild = (wrapElement: LogicUtil.WrapElement, node: TreeUtil.ElementNode, listPos: number) => {\r\n        const wrap = node.data as LogicUtil.WrapElement;\r\n        const listName = getListName(wrap.type);\r\n        wrap.data[`${listName}`].splice(listPos, 0, wrapElement);\r\n        const newNode = TreeUtil.createNode(wrapElement, node);\r\n        node.children.splice(listPos, 0, newNode);\r\n        return newNode;\r\n    }\r\n\r\n    export const removeChild = (node: TreeUtil.ElementNode, listPos: number, size: number) => {\r\n        const wrap = node.data as LogicUtil.WrapElement;\r\n        const listName = getListName(wrap.type);\r\n        wrap.data[`${listName}`].splice(listPos, size);\r\n        node.children.splice(listPos, size);\r\n    }\r\n\r\n    export const isHead = (node: TreeUtil.ElementNode) => {\r\n        if (node.parent == null) return false;\r\n        const ownerChildren = node.parent.children;\r\n        return ownerChildren[0] == node;\r\n    }\r\n\r\n    export const isTail = (node: TreeUtil.ElementNode) => {\r\n        if (node.parent == null) return false;\r\n        const ownerChildren = node.parent.children;\r\n        return ownerChildren[ownerChildren.length - 1] == node;\r\n    }\r\n\r\n    const swapOrder = (node: TreeUtil.ElementNode, offset: number) => {\r\n        if (node.parent == null) return;\r\n        const ownerChildren = node.parent.children;\r\n        const wrap = node.parent.data as LogicUtil.WrapElement;\r\n        const listName = getListName(wrap.type);\r\n        const ownDataChildren = wrap.data[`${listName}`] as LogicUtil.WrapElement[];\r\n\r\n        // 自身の要素番号を取得\r\n        let curNo = -1;\r\n        ownerChildren.some((it, i) => {\r\n            if (it == node) {\r\n                curNo = i;\r\n                return 1;\r\n            }\r\n        });\r\n        if (curNo === -1) return;\r\n\r\n        // ツリーノードの入れ替え\r\n        const swapNode = ownerChildren[curNo];\r\n        ownerChildren[curNo] = ownerChildren[curNo + offset];\r\n        ownerChildren[curNo + offset] = swapNode;\r\n        // データ要素の入れ替え\r\n        const swapData = ownDataChildren[curNo];\r\n        ownDataChildren[curNo] = ownDataChildren[curNo + offset];\r\n        ownDataChildren[curNo + offset] = swapData;\r\n    }\r\n\r\n    export const getSwapButtons = (node: TreeUtil.ElementNode, invalidate: () => void) => {\r\n        return <>\r\n            <FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Swap ↑',\r\n                        isEnable: !LogicElementUtil.isHead(node),\r\n                        callback: () => {\r\n                            swapOrder(node, -1);\r\n                            invalidate();\r\n                        }\r\n                    }\r\n                ]}\r\n            />\r\n            <FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Swap ↓',\r\n                        isEnable: !LogicElementUtil.isTail(node),\r\n                        callback: () => {\r\n                            swapOrder(node, 1);\r\n                            invalidate();\r\n                        }\r\n                    }\r\n                ]}\r\n            />\r\n        </>;\r\n    }\r\n\r\n    export const getListName = (type: LogicUtil.NodeType) => {\r\n        switch (type) {\r\n            case 'seed-mng':\r\n            case 'logic-mng': return 'defs';\r\n            case 'seed-item':\r\n            case 'connector':\r\n            case 'inherit-logic':\r\n            case 'interface-mng':\r\n            case 'logic-item': return 'mngs';\r\n            case 'send-mng':\r\n            case 'behavior-mng':\r\n            case 'visual-mng':\r\n            case 'extend-mng':\r\n            case 'seedsend-mng':\r\n            case 'visual-mng': return 'params';\r\n            case 'inherit-mng': return 'inherits';\r\n            case 'seedarg-mng':\r\n            case 'argument-mng': return 'args';\r\n            case 'sample-mng': return 'samples';\r\n            case 'inhfld-mng':\r\n            case 'field-mng': return 'fields';\r\n            case 'thumbnail-mng': return 'items';\r\n        }\r\n        return null;\r\n    }\r\n\r\n    export const getNamableProps = (type: LogicUtil.NodeType) => {\r\n        switch (type) {\r\n            case 'connector': return 'id';\r\n            case 'logic-item': return 'name';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    export const syncTreeElementFromWrap = (node: TreeUtil.ElementNode) => {\r\n        const wrap = node.data as LogicUtil.WrapElement;\r\n        const listName = getListName(wrap.type);\r\n        if (listName == null) return;\r\n        (wrap.data[listName] as any[]).forEach(childWrap => {\r\n            const newNode = TreeUtil.createNode(childWrap, node);\r\n            node.children.push(newNode);\r\n            syncTreeElementFromWrap(newNode);\r\n        });\r\n    }\r\n\r\n    export const createParamWrap = (type: LogicUtil.NodeType, paramDataList: LogicUtil.NodeParamItem): LogicUtil.WrapElement => {\r\n        return { type: type, data: paramDataList };\r\n    }\r\n    export const createParamWrapList = (type: LogicUtil.NodeType, paramDataList: LogicUtil.NodeParamItem[]): LogicUtil.WrapElement[] => {\r\n        return paramDataList.map(data => {\r\n            return { type: type, data: data };\r\n        });\r\n    }\r\n\r\n    export const createVisualParams = (): LogicUtil.WrapElement[] => {\r\n        const type = ParamUtil.VisualParamType;\r\n        return createParamWrapList('param-item', [\r\n            { name: type.RADIUS, formulaItems: ['var'], values: [{ type: 'direct', value: '20' }] },\r\n            { name: type.COLOR_R, formulaItems: ['var'], values: [{ type: 'direct', value: '255' }] },\r\n            { name: type.COLOR_G, formulaItems: ['var'], values: [{ type: 'direct', value: '255' }] },\r\n            { name: type.COLOR_B, formulaItems: ['var'], values: [{ type: 'direct', value: '255' }] },\r\n            { name: type.COLOR_A, formulaItems: ['var'], values: [{ type: 'direct', value: '255' }] },\r\n        ]);\r\n    }\r\n\r\n    export const createBehaviorParams = (): LogicUtil.WrapElement[] => {\r\n        const list: LogicUtil.NodeParamItem[] = [];\r\n        const type = ParamUtil.BehaviorParamType;\r\n        list.push({\r\n            name: type.LIMIT,\r\n            formulaItems: ['var'], values: [{ type: 'direct', value: '30' }]\r\n        });\r\n        list.push({\r\n            name: type.POS_X,\r\n            formulaItems: ['var'], values: [{ type: 'direct', value: '0' }]\r\n        });\r\n        list.push({\r\n            name: type.POS_Y,\r\n            formulaItems: ['var'], values: [{ type: 'direct', value: '0' }]\r\n        });\r\n        list.push({\r\n            name: type.VEC_X,\r\n            formulaItems: ['var'], values: [{ type: 'direct', value: '0' }]\r\n        });\r\n        list.push({\r\n            name: type.VEC_Y,\r\n            formulaItems: ['var'], values: [{ type: 'direct', value: '0' }]\r\n        });\r\n        return createParamWrapList('param-item', list);\r\n    }\r\n\r\n    export const getDefaultLogicMngs = (): LogicUtil.WrapElement[] => {\r\n        return [\r\n            {\r\n                type: 'visual-mng',\r\n                data: {\r\n                    params: createVisualParams()\r\n                } as LogicUtil.NodeParamManager\r\n            },\r\n            {\r\n                type: 'behavior-mng',\r\n                data: {\r\n                    params: createBehaviorParams()\r\n                } as LogicUtil.NodeParamManager\r\n            }\r\n        ];\r\n    }\r\n\r\n    export const getInitialData = (): LogicUtil.WrapElement => {\r\n        return {\r\n            type: 'root',\r\n            data: {\r\n                seedMng: {\r\n                    type: 'seed-mng',\r\n                    data: {\r\n                        defs: []\r\n                    } as LogicUtil.NodeSeedManager\r\n                } as LogicUtil.WrapElement,\r\n                logicMng: {\r\n                    type: 'logic-mng',\r\n                    data: {\r\n                        defs: []\r\n                    } as LogicUtil.NodeLogicManager\r\n                } as LogicUtil.WrapElement\r\n            } as LogicUtil.NodeRoot\r\n        }\r\n    }\r\n\r\n    export const getSeedNameList = (mng: LogicUtil.NodeSeedManager) => {\r\n        const nameList: string[] = [];\r\n        mng.defs.forEach(seed => {\r\n            if (seed.data != null) {\r\n                nameList.push((seed.data as LogicUtil.NodeSeedItem).name);\r\n            }\r\n        });\r\n        return nameList;\r\n    }\r\n\r\n    export const getLogicNameList = (mng: LogicUtil.NodeLogicManager) => {\r\n        const nameList: string[] = [];\r\n        mng.defs.forEach(logic => {\r\n            if (logic.data != null) {\r\n                nameList.push((logic.data as LogicUtil.NodeLogicItem).name);\r\n            }\r\n        });\r\n        return nameList;\r\n    }\r\n\r\n    export const getInheritIdList = (mng: LogicUtil.NodeConnectManager) => {\r\n        const idList: string[] = [];\r\n        mng.inherits.forEach(inherit => {\r\n            if (inherit.data != null) {\r\n                idList.push((inherit.data as LogicUtil.NodeInheritConnector).id);\r\n            }\r\n        });\r\n        return idList;\r\n    }\r\n\r\n    export const getParamNameList = (curLogicOwner: LogicUtil.NodeLogicItem) => {\r\n        const nameList: string[] = [];\r\n\r\n        // システム固有のパラメータ名を取得\r\n        ParamUtil.VisualParams.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n        ParamUtil.BehaviorParams.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n        ParamUtil.SelfParams.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n        ParamUtil.ExtendParams.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n        ParamUtil.EffectParams.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n        ParamUtil.ModulateParams.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n        ParamUtil.Constants.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n\r\n        // 引数のパラメータ名を取得\r\n        const argMng = curLogicOwner.mngs.find(mng => mng.type === 'argument-mng');\r\n        if (argMng != undefined) {\r\n            const args = (argMng.data as LogicUtil.NodeArgumentManager).args;\r\n            args.forEach(arg => {\r\n                if (arg.data != null) {\r\n                    nameList.push((arg.data as LogicUtil.NodeArgumentItem).name);\r\n                }\r\n            });\r\n        }\r\n        // フィールドのパラメータ名を取得\r\n        const fieldMng = curLogicOwner.mngs.find(mng => mng.type === 'field-mng');\r\n        if (fieldMng != undefined) {\r\n            const fields = (fieldMng.data as LogicUtil.NodeFieldManager).fields;\r\n            fields.forEach(field => {\r\n                if (field.data != null) {\r\n                    nameList.push((field.data as LogicUtil.NodeParamItem).name);\r\n                }\r\n            });\r\n        }\r\n        return nameList;\r\n    }\r\n\r\n    /**\r\n     * 子要素の接頭連番をチェックし、重複しない名称を返す。\r\n     * @param prefix 接頭語\r\n     * @param node 基準となるノード\r\n     */\r\n    export const getNumberingOnPrefixName = (prefix: string, node: TreeUtil.ElementNode) => {\r\n        let num = 0;\r\n        // 接頭番号を取得\r\n        while (true) {\r\n            const check = node.children.find(child => {\r\n                const wrap = child.data as LogicUtil.WrapElement;\r\n                if (wrap.data == null) return false;\r\n                console.log(wrap);\r\n                return wrap.data[getNamableProps(wrap.type)] === `${prefix}${num}`;\r\n            });\r\n            if (check != undefined) num++;\r\n            else break;\r\n        }\r\n        return `${prefix}${num}`;\r\n    }\r\n\r\n    /**\r\n     * ロジック名の変更に伴い、参照しているインヘリットを同期する\r\n     * @param logicMngNode ロジック管理ノード\r\n     */\r\n    export const syncLogicName = (logicMngNode: TreeUtil.ElementNode, prevName: string, newName: string) => {\r\n\r\n        const runRec = (logic: LogicUtil.NodeLogicItem) => {\r\n            const inhMng = logic.mngs.find(mng => mng.type === 'inherit-mng');\r\n            if (inhMng == undefined) return;\r\n            (inhMng.data as LogicUtil.NodeConnectManager).inherits.forEach(inh => {\r\n                const conn = inh.data as LogicUtil.NodeInheritConnector;\r\n                if (conn.method === 'create') {\r\n                    runRec(conn.mngs[2].data);\r\n                } else {\r\n                    if (conn.depend === prevName) {\r\n                        conn.depend = newName;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        logicMngNode.children.forEach(logic => {\r\n            runRec((logic.data as LogicUtil.WrapElement).data);\r\n        });\r\n    }\r\n\r\n    export const searchVariableReferInFormula = (node: TreeUtil.ElementNode, callback: Function) => {\r\n\r\n        const mngType = (node.parent?.data as LogicUtil.WrapElement).type;\r\n        const getLogicItem = () => {\r\n            switch (mngType) {\r\n                case 'field-mng':\r\n                case 'argument-mng': return node.parent?.parent?.data as LogicUtil.WrapElement;\r\n                case 'inhfld-mng': return node.parent?.parent?.parent?.parent?.data as LogicUtil.WrapElement;\r\n            }\r\n        }\r\n        const logicItem = getLogicItem()?.data as LogicUtil.NodeLogicItem;\r\n        if (mngType === 'argument-mng') {\r\n            const fieldMng = logicItem.mngs.find(mng => mng.type === 'field-mng');\r\n            if (fieldMng != undefined) {\r\n                callback((fieldMng.data as LogicUtil.NodeFieldManager).fields);\r\n            }\r\n        }\r\n        if (mngType !== 'inhfld-mng') {\r\n            const visualMng = logicItem.mngs.find(mng => mng.type === 'visual-mng');\r\n            if (visualMng != undefined) {\r\n                callback((visualMng.data as LogicUtil.NodeParamManager).params);\r\n            }\r\n            const behaviorMng = logicItem.mngs.find(mng => mng.type === 'behavior-mng');\r\n            if (behaviorMng != undefined) {\r\n                callback((behaviorMng.data as LogicUtil.NodeParamManager).params);\r\n            }\r\n        }\r\n        const inhMng = logicItem.mngs.find(mng => mng.type === 'inherit-mng');\r\n        if (inhMng != undefined) {\r\n            (inhMng.data as LogicUtil.NodeConnectManager).inherits.forEach(inh => {\r\n                if (mngType !== 'inhfld-mng') {\r\n                    const inhfld = LogicElementUtil.getInnerWrap(inh, 'inhfld-mng');\r\n                    // Inherit配下のField要素のチェック\r\n                    if (inhfld != null) {\r\n                        callback((inhfld.data as LogicUtil.NodeFieldManager).fields);\r\n                    }\r\n                }\r\n                // Extend要素のチェック\r\n                callback((LogicElementUtil.getInnerWrap(inh, 'extend-mng')?.data as LogicUtil.NodeParamManager).params);\r\n                // Send要素のチェック\r\n                callback((LogicElementUtil.getInnerWrap(inh, 'send-mng')?.data as LogicUtil.NodeParamManager).params);\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default LogicElementUtil;","import { useContext } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorArgumentMng = () => {\r\n    const {node, setFocusNode} = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Add Argument',\r\n                        callback: () => {\r\n                            const newWrap: LogicUtil.WrapElement = {\r\n                                type: 'argument-item',\r\n                                data: null\r\n                            };\r\n                            const newNode = LogicElementUtil.addChild(newWrap, node);\r\n                            setFocusNode(newNode);\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorArgumentMng;","import { useContext, useEffect } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nnamespace ModifyOperations {\r\n\r\n    export type Props = {\r\n        mappingForm: () => void;\r\n        checkableFields: FormUtil.CheckableValue[];\r\n        isInputOK?: boolean;\r\n        firstRegist: () => void;\r\n        modifyRegist: () => void;\r\n    }\r\n\r\n    export const Component = (props: Props) => {\r\n        const { node, isModify, setModify, removeSelf } = useContext(FactoryTreeContext);\r\n\r\n        const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n        const isComplete = FormUtil.isCompleteCheck(props.checkableFields);\r\n\r\n        return (<>\r\n            <FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Cancel',\r\n                        isEnable: isModify,\r\n                        callback: () => {\r\n                            if (wrap.data == null) {\r\n                                removeSelf();\r\n                            } else {\r\n                                props.mappingForm();\r\n                            }\r\n                            setModify(false);\r\n                        }\r\n                    },\r\n                    {\r\n                        label: !isModify ? 'Modify' : 'Regist',\r\n                        isEnable: !isModify || (props.isInputOK ?? isComplete),\r\n                        callback: () => {\r\n                            if (!isModify) {\r\n                                setModify(true);\r\n                            } else {\r\n                                if (wrap.data == null) {\r\n                                    props.firstRegist();\r\n                                } else {\r\n                                    props.modifyRegist();\r\n                                }\r\n                                setModify(false);\r\n                            }\r\n                        }\r\n                    }\r\n                ]}\r\n            />\r\n        </>);\r\n    }\r\n}\r\n\r\nexport default ModifyOperations;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport Styles from \"../../../../../base/design/styles\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport ConfirmDialog from \"../../../../dialog/confirmDialog\";\r\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\r\nimport PreviewUtil from \"../../../preview/previewUtil\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ParamUtil from \"../../util/paramUtil\";\r\nimport ModifyOperations from \"../common/modifyOperations\";\r\n\r\ntype FormProps = {\r\n    inputType: FormUtil.CheckableValue;\r\n    value: FormUtil.CheckableValue;\r\n};\r\n\r\nenum Level {\r\n    FIELD = 0,\r\n    INITIAL,\r\n    INHERIT_FIELD,\r\n    INHERIT_EXTEND,\r\n    INHERIT_SEND\r\n}\r\n\r\nconst EditorParamItem = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n    const { removeSelf, node, invalidate, setModify, isModify } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    /** 名前 */\r\n    const [name, setName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    /** 式 */\r\n    const [formulaItems, setFormulaItems] = useState<string[]>([]);\r\n    /** 変数の入力フォーム */\r\n    const [varFormList, setVarFormList] = useState<FormProps[]>([]);\r\n    // const [formJsxList, setFaormJsxList] = useState<JSX.Element[]>([]);\r\n\r\n    const isField = wrap.type === 'field-item';\r\n    const isCondition = wrap.type === 'condition-item';\r\n\r\n    const mappingForm = () => {\r\n        const param = wrap.data as LogicUtil.NodeParamItem;\r\n        setName({ value: param.name, errors: [] });\r\n        setFormulaItems(param.formulaItems.slice());\r\n        setVarFormList(param.values.map(v => {\r\n            return {\r\n                inputType: { value: v.type, errors: [] },\r\n                value: { value: v.value, errors: [] }\r\n            }\r\n        }));\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (wrap.data == null) {\r\n            setModify(true);\r\n        } else {\r\n            mappingForm();\r\n        }\r\n    }, [node]);\r\n\r\n    const level: Level = useMemo(() => {\r\n        const parentType = (node.parent?.data as LogicUtil.WrapElement).type;\r\n        switch (parentType) {\r\n            case 'field-mng': return Level.FIELD;\r\n            case 'visual-mng':\r\n            case 'behavior-mng': return Level.INITIAL;\r\n            case 'inhfld-mng': return Level.INHERIT_FIELD;\r\n            case 'extend-mng': return Level.INHERIT_EXTEND;\r\n            case 'send-mng': return Level.INHERIT_SEND;\r\n        }\r\n        return -1;\r\n    }, [node]);\r\n\r\n    /**\r\n     * 引数とフィールド変数のキーリストを取得する。\r\n     */\r\n    const [argumentList, fieldKeyList] = useMemo(() => {\r\n        let argumentList: string[] = [];\r\n        const fieldKeys: string[] = [];\r\n        const parentType = (node.parent?.data as LogicUtil.WrapElement).type;\r\n        const targetTypes: LogicUtil.NodeType[] = ['field-mng', 'behavior-mng', 'visual-mng', 'inhfld-mng', 'send-mng', 'extend-mng'];\r\n        if (targetTypes.includes(parentType)) {\r\n            const getLogicNode = () => {\r\n                switch (parentType) {\r\n                    case 'field-mng':\r\n                    case 'visual-mng':\r\n                    case 'behavior-mng': return node.parent?.parent;\r\n                    case 'inhfld-mng':\r\n                    case 'send-mng':\r\n                    case 'extend-mng': return node?.parent?.parent?.parent?.parent;\r\n                }\r\n            };\r\n            const logicItem = (getLogicNode()?.data as LogicUtil.WrapElement).data as LogicUtil.NodeLogicItem;\r\n            // 引数リストを追加\r\n            const argMng = logicItem.mngs.find(mng => mng.type === 'argument-mng');\r\n            if (argMng != undefined) {\r\n                argumentList = (argMng.data as LogicUtil.NodeArgumentManager).\r\n                    args.map(arg => (arg.data as LogicUtil.NodeArgumentItem).name);\r\n            }\r\n            // 変数リストを追加\r\n            const fieldMng = logicItem.mngs.find(mng => mng.type === 'field-mng');\r\n            if (level >= Level.INITIAL && fieldMng != undefined) {\r\n                (fieldMng.data as LogicUtil.NodeFieldManager).fields.forEach(field => {\r\n                    const fieldName = (field.data as LogicUtil.NodeParamItem).name;\r\n                    fieldKeys.push(fieldName);\r\n                });\r\n            }\r\n        } else if (parentType === 'seedsend-mng') {\r\n            // シード配下のSendは特別に扱う（どのレベルにも属さない）\r\n            const argMng = LogicElementUtil.getInnerWrap((node.parent?.parent as TreeUtil.ElementNode).data, 'seedarg-mng');\r\n            if (argMng != null) {\r\n                argumentList = (argMng.data as LogicUtil.NodeSeedArgManager).\r\n                    args.map(arg => (arg.data as LogicUtil.NodeSeedArgItem).name);\r\n            } else throw new Error('argMng is undefined.');\r\n        }\r\n        if (level >= Level.INHERIT_FIELD) {\r\n            fieldKeys.push(ParamUtil.BehaviorParamType.POS_X);\r\n            fieldKeys.push(ParamUtil.BehaviorParamType.POS_Y);\r\n            fieldKeys.push(ParamUtil.BehaviorParamType.VEC_X);\r\n            fieldKeys.push(ParamUtil.BehaviorParamType.VEC_Y);\r\n            fieldKeys.push(ParamUtil.BehaviorParamType.VEC_RAD);\r\n            fieldKeys.push(ParamUtil.BehaviorParamType.VEC_LEN);\r\n            // fieldKeys.push(ParamUtil.VisualParamType.RADIUS);\r\n            // fieldKeys.push(ParamUtil.VisualParamType.COLOR_R);\r\n            // fieldKeys.push(ParamUtil.VisualParamType.COLOR_G);\r\n            // fieldKeys.push(ParamUtil.VisualParamType.COLOR_B);\r\n            // fieldKeys.push(ParamUtil.VisualParamType.COLOR_A);\r\n\r\n            // フィールドキーにInherit配下のFieldパラメータを追加\r\n            if (level >= Level.INHERIT_EXTEND) {\r\n                const inhfldNode = LogicElementUtil.getInnerNode(node.parent?.parent as TreeUtil.ElementNode, 'inhfld-mng');\r\n                if (inhfldNode != null) {\r\n                    const fieldMng = (inhfldNode.data as LogicUtil.WrapElement).data as LogicUtil.NodeFieldManager;\r\n                    fieldMng.fields.forEach(field => {\r\n                        const fieldName = (field.data as LogicUtil.NodeParamItem).name;\r\n                        fieldKeys.push(fieldName);\r\n                    });\r\n                }\r\n            }\r\n            // フィールドキーにExtendパラメータを追加\r\n            if (level === Level.INHERIT_SEND) {\r\n                const extendWrap = LogicElementUtil.getInnerWrap((node.parent?.parent as TreeUtil.ElementNode).data, 'extend-mng') as LogicUtil.WrapElement;\r\n                const extendElement = extendWrap.data as LogicUtil.NodeParamManager;\r\n                //Extendにloop_countのパラメータがある場合\r\n                if (extendElement.params.find(\r\n                    param => (param.data as LogicUtil.NodeParamItem).name === ParamUtil.ExtendParamType.LOOP_COUNT\r\n                ) != undefined) {\r\n                    fieldKeys.push(ParamUtil.ExtendParamType.LOOP_COUNT);\r\n                    fieldKeys.push(ParamUtil.ExtendParamType.LOOP_ITERATE);\r\n                }\r\n            }\r\n        }\r\n        return [argumentList, fieldKeys];\r\n    }, [node]);\r\n\r\n    /** 既存のパラメータ名を取得（重複チェックに使用） */\r\n    const paramNameList = useMemo(() => {\r\n        const owner = (node.parent?.parent?.data as LogicUtil.WrapElement).data;\r\n        return LogicElementUtil.getParamNameList(owner);\r\n    }, [node]);\r\n\r\n    useEffect(() => {\r\n        let num = 0;\r\n        formulaItems.forEach((item) => {\r\n            if (item === 'var') num++;\r\n        });\r\n\r\n        if (varFormList.length < num) {\r\n            const addNum = num - varFormList.length;\r\n            for (let i = 0; i < addNum; i++) varFormList.push({\r\n                inputType: { value: 'direct', errors: [] },\r\n                value: { value: '', errors: [] }\r\n            });\r\n            setVarFormList(varFormList.slice());\r\n        } else if (varFormList.length > num) {\r\n            const delNum = varFormList.length - num;\r\n            for (let i = 0; i < delNum; i++) varFormList.splice(varFormList.length - delNum, delNum);\r\n            setVarFormList(varFormList.slice());\r\n        }\r\n    }, [formulaItems]);\r\n\r\n    /** 「(」の数-「)」の数 */\r\n    const parenthesisBalance = useMemo(() => {\r\n        let num = 0;\r\n        formulaItems.forEach((item) => {\r\n            if (['(', 'rand(', 'integer('].includes(item)) num++;\r\n            else if (item === ')') num--;\r\n        });\r\n        return num;\r\n    }, [formulaItems]);\r\n\r\n    /** 値の入力フォームのJSX */\r\n    const formJsxList = useMemo(() => {\r\n        return varFormList.map((v, i) => {\r\n\r\n            const getValueForm = (): JSX.Element => {\r\n                const type = v.inputType.value as LogicUtil.ParamInputType;\r\n                if (type === 'direct') {\r\n                    return (\r\n                        <FormUtil.TextField\r\n                            marginLeft={2}\r\n                            checkable={v.value}\r\n                            isNumber\r\n                            isReadOnly={!isModify}\r\n                            width={178}\r\n                            setCheckable={(checkable) => {\r\n                                varFormList[i].value = checkable;\r\n                                setVarFormList(varFormList.slice());\r\n                            }}\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    );\r\n                } else {\r\n                    let list: string[] = [];\r\n                    if (type === 'argument') {\r\n                        list = argumentList;\r\n                    } else if (type === 'field') {\r\n                        list = fieldKeyList;\r\n                    } else if (type === 'self') {\r\n                        list = ParamUtil.SelfParams;\r\n                    } else if (type === 'constant') {\r\n                        list = PreviewUtil.ConstantValueMap.map(item => item.name);\r\n                    }\r\n                    return (\r\n                        <FormUtil.Combobox\r\n                            marginLeft={2}\r\n                            checkable={v.value}\r\n                            width={178}\r\n                            isReadOnly={!isModify}\r\n                            setCheckable={(checkable) => {\r\n                                varFormList[i].value = checkable;\r\n                                setVarFormList(varFormList.slice());\r\n                            }}\r\n                            list={list.map(item => {\r\n                                return { value: item, labelText: item };\r\n                            })}\r\n                            headBlank\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n            return <FormUtil.FormRecord\r\n                key={i}\r\n                titleLabel={`var_${i}`}\r\n                labelWidth={90}\r\n                marginTop={i === 0 ? 4 : 0}\r\n                jsx={<>\r\n                    <FormUtil.Combobox\r\n                        checkable={v.inputType}\r\n                        width={142}\r\n                        isReadOnly={!isModify}\r\n                        setCheckable={(checkable) => {\r\n                            varFormList[i].inputType = checkable;\r\n                            if (isModify) {\r\n                                varFormList[i].value.value = checkable.value === 'direct' ? '0' : '';\r\n                            }\r\n                            setVarFormList(varFormList.slice());\r\n                        }}\r\n                        list={LogicUtil.ParamInputTypes.filter(item => {\r\n                            switch (item) {\r\n                                case 'direct':\r\n                                case 'constant':\r\n                                case 'argument': return true;\r\n                                case 'field': return level >= Level.INITIAL;\r\n                                case 'self': return level >= Level.INHERIT_FIELD;\r\n                            }\r\n                        }).map(item => {\r\n                            return { value: item, labelText: item };\r\n                        })}\r\n                    />\r\n                    {getValueForm()}\r\n                </>}\r\n            />;\r\n        });\r\n    }, [varFormList, isModify]);\r\n\r\n    const getFormulaJsx = () => {\r\n        let num = 0;\r\n        const jsxList: JSX.Element[] = [];\r\n        formulaItems.forEach((item) => {\r\n            if (jsxList.length > 0) {\r\n                jsxList.push(<span key={jsxList.length}>&nbsp;</span>);\r\n            }\r\n            if (item === 'var') {\r\n                jsxList.push(<_Var key={jsxList.length}>{`$\\{var_${num}}`}</_Var>);\r\n                num++;\r\n            } else {\r\n                jsxList.push(<_Sig key={jsxList.length}>{item}</_Sig>);\r\n            }\r\n        });\r\n        return jsxList;\r\n    }\r\n\r\n    const isLastVar = () => formulaItems.length > 0 && ['var', ')'].includes(formulaItems[formulaItems.length - 1]);\r\n    const isFormulaOK = parenthesisBalance === 0 && varFormList.length > 0 &&\r\n        ['var', ')'].includes(formulaItems[formulaItems.length - 1]);\r\n    const hasFormError = !isFormulaOK || varFormList.find(varForm => varForm.value.errors.length > 0) != undefined;\r\n\r\n\r\n    const getFormulaItem = (label: string, width: number, isEnable: boolean, value: string) => {\r\n        return {\r\n            label, width, isEnable,\r\n            callback: () => {\r\n                formulaItems.push(value);\r\n                setFormulaItems(formulaItems.slice());\r\n            }\r\n        };\r\n    }\r\n\r\n    return (<>\r\n        <ModifyOperations.Component\r\n            mappingForm={mappingForm}\r\n            checkableFields={[]}\r\n            firstRegist={() => {\r\n                const param: LogicUtil.NodeParamItem = {\r\n                    name: name.value,\r\n                    formulaItems: formulaItems.slice(),\r\n                    values: varFormList.map(varForm => {\r\n                        return {\r\n                            type: varForm.inputType.value as LogicUtil.ParamInputType,\r\n                            value: varForm.value.value\r\n                        }\r\n                    })\r\n                };\r\n                param.name = name.value;\r\n                wrap.data = param;\r\n            }}\r\n            isInputOK={parenthesisBalance === 0 && !hasFormError && name.errors.length === 0}\r\n            modifyRegist={() => {\r\n                const data = wrap.data as LogicUtil.NodeParamItem;\r\n                data.formulaItems = formulaItems.slice();\r\n                data.values = varFormList.map(varForm => {\r\n                    return {\r\n                        type: varForm.inputType.value as LogicUtil.ParamInputType,\r\n                        value: varForm.value.value\r\n                    }\r\n                });\r\n                if (isField) {\r\n                    const prevName = data.name;\r\n                    data.name = name.value;\r\n                    if (prevName !== name.value) {\r\n                        syncFieldName(node.parent as TreeUtil.ElementNode, prevName, name.value);\r\n                    }\r\n                }\r\n            }}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"param\"\r\n            innerJsx={<>\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Name\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={200}\r\n                            isReadOnly={!isModify || !isField}\r\n                            checkable={name}\r\n                            setCheckable={setName}\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkStringLength(value, 1, 16),\r\n                                    errorType: \"length\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => LogicUtil.checkFieldName(value),\r\n                                    errorType: \"value\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => {\r\n                                        const list = paramNameList.filter(name => {\r\n                                            // 自分自身のパラメータ名を除外\r\n                                            if (wrap.data != null) {\r\n                                                return (wrap.data as LogicUtil.NodeParamItem).name !== name;\r\n                                            }\r\n                                            return true;\r\n                                        });\r\n                                        return !list.includes(value);\r\n                                    },\r\n                                    errorType: \"relation\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        getFormulaItem('+', 50, isModify && isLastVar(), '+'),\r\n                        getFormulaItem('-', 50, isModify && isLastVar(), '-'),\r\n                        getFormulaItem('*', 50, isModify && isLastVar(), '*'),\r\n                        getFormulaItem('/', 50, isModify && isLastVar(), '/'),\r\n                        getFormulaItem('%', 50, isModify && isLastVar(), '%'),\r\n                        getFormulaItem('(', 35, isModify && !isLastVar(), '('),\r\n                        getFormulaItem(')', 35, isModify && isLastVar() && parenthesisBalance > 0, ')'),\r\n                        {\r\n                            label: 'del',\r\n                            width: 60,\r\n                            isEnable: isModify && formulaItems.length > 0,\r\n                            callback: () => {\r\n                                formulaItems.splice(formulaItems.length - 1, 1);\r\n                                setFormulaItems(formulaItems.slice());\r\n                            }\r\n                        },\r\n                    ]}\r\n                />\r\n                {!isCondition ? <></> : (\r\n                    <FormUtil.ButtonRecord\r\n                        isCenter\r\n                        buttons={[\r\n                            getFormulaItem('<', 50, isModify && isLastVar(), '<'),\r\n                            getFormulaItem('<=', 50, isModify && isLastVar(), '<='),\r\n                            getFormulaItem('=', 50, isModify && isLastVar(), '='),\r\n                            getFormulaItem('>=', 50, isModify && isLastVar(), '>='),\r\n                            getFormulaItem('>', 50, isModify && isLastVar(), '>'),\r\n                            getFormulaItem('&&', 50, isModify && isLastVar(), '&&'),\r\n                            getFormulaItem('||', 50, isModify && isLastVar(), '||'),\r\n                        ]}\r\n                    />\r\n                )}\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        getFormulaItem('var', 70, isModify && !isLastVar(), 'var'),\r\n                        getFormulaItem('rand', 80, isModify && !isLastVar(), 'rand('),\r\n                        getFormulaItem('integer', 80, isModify && !isLastVar(), 'integer('),\r\n                        {\r\n                            label: 'clear',\r\n                            isEnable: isModify && formulaItems.length > 0,\r\n                            width: 90,\r\n                            callback: () => {\r\n                                setFormulaItems([]);\r\n                            }\r\n                        },\r\n                    ]}\r\n                />\r\n                <_Formula\r\n                    isInvalid={!isFormulaOK}\r\n                >{getFormulaJsx()}</_Formula>\r\n                {formJsxList}\r\n            </>}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            isEnable={!isModify && isField}\r\n            innerJsx={<>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Delete',\r\n                            isEnable: !isModify,\r\n                            callback: () => {\r\n                                const param = wrap.data as LogicUtil.NodeArgumentItem;\r\n                                const refers = getFieldRefers(node, param.name);\r\n                                if (refers.length === 0) {\r\n                                    removeSelf();\r\n                                } else {\r\n                                    store.system.dialog = <ConfirmDialog.Component\r\n                                        message={`[${param.name}] is referenced in the formula.\\n${refers}`}\r\n                                    />;\r\n                                    setStore({ ...store });\r\n                                }\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                {/* 並び順入れ替えボタン */}\r\n                {!isField ? <></> : LogicElementUtil.getSwapButtons(node, invalidate)}\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorParamItem;\r\n\r\n\r\n/**\r\n * ノードの変数を参照している箇所のリストを返す。\r\n * @param node 変数のノード\r\n * @param argName 変数名\r\n * @returns 参照パラメータリスト\r\n */\r\nexport const getFieldRefers = (node: TreeUtil.ElementNode, argName: string) => {\r\n\r\n    const refers: string[] = [];\r\n\r\n    const callback = (list: LogicUtil.WrapElement[]) => {\r\n        list.forEach(wrap => {\r\n            const param = wrap.data as LogicUtil.NodeParamItem;\r\n            param.values.forEach(varItem => {\r\n                if (varItem.type === 'field' && varItem.value === argName) {\r\n                    refers.push(param.name);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    LogicElementUtil.searchVariableReferInFormula(node, callback);\r\n\r\n    return refers;\r\n}\r\n\r\n/**\r\n * フィールド名の変更に伴い、式で参照している変数を同期する\r\n * @param mngNode ノード\r\n */\r\nexport const syncFieldName = (mngNode: TreeUtil.ElementNode, prevName: string, newName: string) => {\r\n\r\n    const syncFormula = (list: LogicUtil.WrapElement[]) => {\r\n        list.forEach(wrap => {\r\n            const values = (wrap.data as LogicUtil.NodeParamItem).values;\r\n            values.forEach(varItem => {\r\n                if (varItem.type === 'field' && varItem.value === prevName) {\r\n                    varItem.value = newName;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    const type = (mngNode.data as LogicUtil.WrapElement).type;\r\n    if (type === 'field-mng') {\r\n        const logic = (mngNode.parent?.data as LogicUtil.WrapElement).data as LogicUtil.NodeLogicItem;\r\n\r\n        const visualMng = logic.mngs.find(mng => mng.type === 'visual-mng');\r\n        if (visualMng != undefined) {\r\n            syncFormula((visualMng.data as LogicUtil.NodeParamManager).params);\r\n        }\r\n        const behaviorMng = logic.mngs.find(mng => mng.type === 'behavior-mng');\r\n        if (behaviorMng != undefined) {\r\n            syncFormula((behaviorMng.data as LogicUtil.NodeParamManager).params);\r\n        }\r\n        const inhMng = logic.mngs.find(mng => mng.type === 'inherit-mng');\r\n        if (inhMng != undefined) {\r\n            (inhMng.data as LogicUtil.NodeConnectManager).inherits.forEach(inh => {\r\n                const inhfld = LogicElementUtil.getInnerWrap(inh, 'inhfld-mng');\r\n                // Inherit配下のField要素のチェック\r\n                if (inhfld != null) {\r\n                    syncFormula((inhfld.data as LogicUtil.NodeFieldManager).fields);\r\n                }\r\n                // Extend要素のチェック\r\n                syncFormula((LogicElementUtil.getInnerWrap(inh, 'extend-mng')?.data as LogicUtil.NodeParamManager).params);\r\n                // Send要素のチェック\r\n                syncFormula((LogicElementUtil.getInnerWrap(inh, 'send-mng')?.data as LogicUtil.NodeParamManager).params);\r\n            });\r\n        }\r\n    } else if (type === 'inhfld-mng') {\r\n        const inheritWrap = mngNode.parent?.data as LogicUtil.WrapElement;\r\n\r\n        // Extend要素のチェック\r\n        syncFormula((LogicElementUtil.getInnerWrap(inheritWrap, 'extend-mng')?.data as LogicUtil.NodeParamManager).params);\r\n        // Send要素のチェック\r\n        syncFormula((LogicElementUtil.getInnerWrap(inheritWrap, 'send-mng')?.data as LogicUtil.NodeParamManager).params);\r\n    }\r\n}\r\n\r\nconst _Formula = styled.div<{\r\n    isInvalid: boolean;\r\n}>`\r\n    display: inline-block;\r\n    width: calc(100% - 12px);\r\n    ${Styles.CSS_LABEL_MIDIUM}\r\n    overflow-wrap: break-word;\r\n    height: 100px;//calc(100% - 4px);\r\n    color: #585858;\r\n    border: solid 1px #7a7a7abf;\r\n    box-sizing: border-box;\r\n    background-color: #ffffff8b;\r\n    ${props => !props.isInvalid ? '' : css`\r\n        background-color: #ffe8628a;\r\n    `}\r\n    border-radius: 4px;\r\n    text-align: left;\r\n    padding: 0 0 0 4px;\r\n    vertical-align: top;\r\n    margin: 5px 0 0 6px;\r\n`;\r\nconst _Var = styled.span`\r\n    color: #e70013;\r\n`;\r\nconst _Sig = styled.span`\r\n    color: #3333339d;\r\n`;","import { type } from \"os\";\r\nimport { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport ConfirmDialog from \"../../../../dialog/confirmDialog\";\r\nimport GloballDialog from \"../../../../dialog/globalDialog\";\r\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ModifyOperations from \"../common/modifyOperations\";\r\n\r\nconst EditorArgumentItem = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n    const { node, removeSelf, setModify, isModify, invalidate } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    const [name, setName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [argType, setArgType] = useState<FormUtil.CheckableValue>({ value: 'number', errors: [] });\r\n\r\n    /** 既存のパラメータ名を取得（重複チェックに使用） */\r\n    const reservedList = useMemo(() => {\r\n        const owner = (node.parent?.parent?.data as LogicUtil.WrapElement).data;\r\n        return LogicElementUtil.getParamNameList(owner);\r\n    }, [node]);\r\n\r\n    const mappingForm = () => {\r\n        const param = wrap.data as LogicUtil.NodeArgumentItem;\r\n        setName({ ...name, value: param.name });\r\n        setArgType({ ...argType, value: param.valueType });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (wrap.data == null) {\r\n            setModify(true);\r\n        } else {\r\n            mappingForm();\r\n        }\r\n    }, [node]);\r\n\r\n    return (<>\r\n        <ModifyOperations.Component\r\n            mappingForm={mappingForm}\r\n            checkableFields={[name, argType]}\r\n            firstRegist={() => {\r\n                const param: LogicUtil.NodeArgumentItem = {\r\n                    name: name.value,\r\n                    valueType: argType.value as LogicUtil.ArgumentType\r\n                };\r\n                param.name = name.value;\r\n                wrap.data = param;\r\n                syncArgumentAdd(node.parent?.parent as TreeUtil.ElementNode, name.value);\r\n            }}\r\n            modifyRegist={() => {\r\n                const param = wrap.data as LogicUtil.NodeArgumentItem;\r\n                const prevName = param.name;\r\n                param.name = name.value;\r\n                param.valueType = argType.value as LogicUtil.ArgumentType;\r\n                wrap.data = param;\r\n\r\n                if (prevName !== name.value) {\r\n                    syncArgumentName(node.parent?.parent as TreeUtil.ElementNode, prevName, name.value);\r\n                }\r\n            }}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"param\"\r\n            innerJsx={<>\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Name\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={200}\r\n                            isReadOnly={!isModify}\r\n                            checkable={name}\r\n                            setCheckable={setName}\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkStringLength(value, 1, 16),\r\n                                    errorType: \"length\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => LogicUtil.checkFieldName(value),\r\n                                    errorType: \"value\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => {\r\n                                        const list = reservedList.filter(name => {\r\n                                            // 自分自身のパラメータ名を除外\r\n                                            if (wrap.data != null) {\r\n                                                return (wrap.data as LogicUtil.NodeArgumentItem).name !== name;\r\n                                            }\r\n                                            return true;\r\n                                        });\r\n                                        return !list.includes(value);\r\n                                    },\r\n                                    errorType: \"relation\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Type\"\r\n                    jsx={\r\n                        <FormUtil.Combobox\r\n                            checkable={argType}\r\n                            setCheckable={setArgType}\r\n                            list={LogicUtil.ArgTypes.map(type => {\r\n                                return { value: type, labelText: type, isDisabled: type === 'color' }\r\n                            })}\r\n                            headBlank\r\n                            width={200}\r\n                            isReadOnly={!isModify}\r\n                            validates={\r\n                                [\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkRequired(value),\r\n                                        errorType: \"required\"\r\n                                    }\r\n                                ]\r\n                            }\r\n                        />\r\n                    }\r\n                />\r\n            </>}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Delete',\r\n                            isEnable: !isModify,\r\n                            callback: () => {\r\n                                const param = wrap.data as LogicUtil.NodeArgumentItem;\r\n                                const refers = getArgumentRefers(node, param.name);\r\n                                if (refers.length === 0) {\r\n                                    syncArgumentDel(node.parent?.parent as TreeUtil.ElementNode, name.value);\r\n                                    removeSelf();\r\n                                } else {\r\n                                    store.system.dialog = <ConfirmDialog.Component\r\n                                        message={`[${param.name}] is referenced in the formula.\\n${refers}`}\r\n                                    />;\r\n                                    setStore({ ...store });\r\n                                }\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                {/* 並び順入れ替えボタン */}\r\n                {LogicElementUtil.getSwapButtons(node, invalidate)}\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorArgumentItem;\r\n\r\n/**\r\n * ノードの引数を参照している箇所のリストを返す。\r\n * @param node 引数のノード\r\n * @param argName 引数名\r\n * @returns 参照パラメータリスト\r\n */\r\nexport const getArgumentRefers = (node: TreeUtil.ElementNode, argName: string) => {\r\n\r\n    const refers: string[] = [];\r\n\r\n    const callback = (list: LogicUtil.WrapElement[]) => {\r\n        list.forEach(wrap => {\r\n            const param = wrap.data as LogicUtil.NodeParamItem;\r\n            param.values.forEach(varItem => {\r\n                if (varItem.type === 'argument' && varItem.value === argName) {\r\n                    refers.push(param.name);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    LogicElementUtil.searchVariableReferInFormula(node, callback);\r\n\r\n    return refers;\r\n}\r\n\r\n/**\r\n* 引数名の変更に伴い、式で参照している変数を同期する\r\n* @param logicNode ロジックノード\r\n*/\r\nexport const syncArgumentName = (logicNode: TreeUtil.ElementNode, prevName: string, newName: string) => {\r\n\r\n    const syncFormula = (list: LogicUtil.WrapElement[]) => {\r\n        list.forEach(wrap => {\r\n            const values = (wrap.data as LogicUtil.NodeParamItem).values;\r\n            values.forEach(varItem => {\r\n                if (varItem.type === 'argument' && varItem.value === prevName) {\r\n                    varItem.value = newName;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    const wrap = logicNode.data as LogicUtil.WrapElement;\r\n    const logicItem = wrap.data as LogicUtil.NodeLogicItem;\r\n    const fieldMng = logicItem.mngs.find(mng => mng.type === 'field-mng');\r\n    if (fieldMng != undefined) {\r\n        syncFormula((fieldMng.data as LogicUtil.NodeFieldManager).fields);\r\n    }\r\n    const visualMng = logicItem.mngs.find(mng => mng.type === 'visual-mng');\r\n    if (visualMng != undefined) {\r\n        syncFormula((visualMng.data as LogicUtil.NodeParamManager).params);\r\n    }\r\n    const behaviorMng = logicItem.mngs.find(mng => mng.type === 'behavior-mng');\r\n    if (behaviorMng != undefined) {\r\n        syncFormula((behaviorMng.data as LogicUtil.NodeParamManager).params);\r\n    }\r\n    const inhMng = logicItem.mngs.find(mng => mng.type === 'inherit-mng');\r\n    if (inhMng != undefined) {\r\n        (inhMng.data as LogicUtil.NodeConnectManager).inherits.forEach(inh => {\r\n            const inhfld = LogicElementUtil.getInnerWrap(inh, 'inhfld-mng');\r\n            // Inherit配下のField要素のチェック\r\n            if (inhfld != null) {\r\n                syncFormula((inhfld.data as LogicUtil.NodeFieldManager).fields);\r\n            }\r\n            // Extend要素のチェック\r\n            syncFormula((LogicElementUtil.getInnerWrap(inh, 'extend-mng')?.data as LogicUtil.NodeParamManager).params);\r\n            // Send要素のチェック\r\n            syncFormula((LogicElementUtil.getInnerWrap(inh, 'send-mng')?.data as LogicUtil.NodeParamManager).params);\r\n        });\r\n    }\r\n\r\n    const syncParamName = (params: LogicUtil.WrapElement[]) => {\r\n        params.forEach(wrap => {\r\n            const item = wrap.data as LogicUtil.NodeParamItem;\r\n            if (item.name === prevName) {\r\n                item.name = newName;\r\n            }\r\n        });\r\n    }\r\n    if (wrap.type === 'logic-item') {\r\n\r\n        // dependしている箇所を全て反映するために再帰で洗う\r\n        const runRec = (logic: LogicUtil.NodeLogicItem) => {\r\n            const inhMng = logic.mngs.find(mng => mng.type === 'inherit-mng');\r\n            if (inhMng == undefined) return;\r\n            (inhMng.data as LogicUtil.NodeConnectManager).inherits.forEach(inh => {\r\n                const conn = inh.data as LogicUtil.NodeInheritConnector;\r\n                if (conn.method === 'create') {\r\n                    const inhLogic = (LogicElementUtil.getInnerWrap(inh, 'inherit-logic') as LogicUtil.WrapElement).data as LogicUtil.NodeLogicItem;\r\n                    runRec(inhLogic);\r\n                } else if (conn.method === 'depend' && conn.depend === logicItem.name) {\r\n                    const sendMng = (LogicElementUtil.getInnerWrap(inh, 'send-mng') as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager;\r\n                    syncParamName(sendMng.params);\r\n                }\r\n            });\r\n        }\r\n        const logicMngNode = logicNode.parent as TreeUtil.ElementNode;\r\n        logicMngNode.children.forEach(logic => {\r\n            runRec((logic.data as LogicUtil.WrapElement).data);\r\n        });\r\n    } else if (wrap.type === 'inherit-logic') {\r\n        const connWrap = logicNode.parent?.data as LogicUtil.WrapElement;\r\n        const sendMng = (LogicElementUtil.getInnerWrap(connWrap, 'send-mng') as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager;\r\n        syncParamName(sendMng.params);\r\n    }\r\n}\r\n\r\n/**\r\n * 引数の更新に伴い、参照先のSend管理に処理（callback）を行う\r\n * @param logicNode ロジックノード\r\n * @param callback 処理\r\n */\r\nconst syncArgumentCallback = (\r\n    logicNode: TreeUtil.ElementNode,\r\n    callback: (sendNode: TreeUtil.ElementNode) => void\r\n) => {\r\n\r\n    const wrap = logicNode.data as LogicUtil.WrapElement;\r\n    const logicItem = wrap.data as LogicUtil.NodeLogicItem;\r\n\r\n    if (wrap.type === 'logic-item') {\r\n        const runRec = (logicNode: TreeUtil.ElementNode) => {\r\n            const inhMngNode = logicNode.children.find(child => (child.data as LogicUtil.WrapElement).type === 'inherit-mng');\r\n            if (inhMngNode == undefined) return;\r\n            inhMngNode.children.forEach(child => {\r\n                const conn = (child.data as LogicUtil.WrapElement).data as LogicUtil.NodeInheritConnector;\r\n                if (conn.method === 'create') {\r\n                    runRec(LogicElementUtil.getInnerNode(child, 'inherit-logic') as TreeUtil.ElementNode);\r\n                } else if (conn.method === 'depend' && conn.depend === logicItem.name) {\r\n                    callback(LogicElementUtil.getInnerNode(child, 'extend-mng') as TreeUtil.ElementNode);\r\n                }\r\n            });\r\n        }\r\n        const logicMngNode = logicNode.parent as TreeUtil.ElementNode;\r\n        logicMngNode.children.forEach(child => {\r\n            runRec(child);\r\n        });\r\n    } else if (wrap.type === 'inherit-logic') {\r\n        const sendNode = LogicElementUtil.getInnerNode(logicNode.parent as TreeUtil.ElementNode, 'send-mng') as TreeUtil.ElementNode;\r\n        callback(sendNode);\r\n    }\r\n}\r\n\r\n/**\r\n * 引数の追加に伴い、Send管理を同期する\r\n * @param logicNode ロジックノード\r\n */\r\nconst syncArgumentAdd = (logicNode: TreeUtil.ElementNode, newArgName: string) => {\r\n    const addNewParam = (sendNode: TreeUtil.ElementNode) => {\r\n        const paramWrap = LogicElementUtil.createParamWrap('send-item',\r\n            { name: newArgName, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] }\r\n        );\r\n        const sendMng = (sendNode.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager;\r\n        sendMng.params.push(paramWrap);\r\n        sendNode.children.push(TreeUtil.createNode(paramWrap, sendNode));\r\n    }\r\n    syncArgumentCallback(logicNode, addNewParam);\r\n}\r\n\r\n/**\r\n * 引数の削除に伴い、Send管理を同期する\r\n * @param logicNode ロジックノード\r\n */\r\nconst syncArgumentDel = (logicNode: TreeUtil.ElementNode, delArgName: string) => {\r\n    const delArgParam = (sendNode: TreeUtil.ElementNode) => {\r\n        const sendMng = (sendNode.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager;\r\n        let delIndex = -1;\r\n        sendMng.params.some((param, i) => {\r\n            if ((param.data as LogicUtil.NodeParamItem).name == delArgName) {\r\n                delIndex = i;\r\n                return 1;\r\n            }\r\n        });\r\n        sendMng.params.splice(delIndex, 1);\r\n        sendNode.children.splice(delIndex, 1);\r\n    }\r\n    syncArgumentCallback(logicNode, delArgParam);\r\n}","import { useContext } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorSeedMng = () => {\r\n    const {node, setFocusNode} = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Add Seed',\r\n                        callback: () => {\r\n                            const itemWrap: LogicUtil.WrapElement = {\r\n                                type: 'seed-item',\r\n                                data: null\r\n                            };\r\n                            (wrap.data as LogicUtil.NodeSeedManager).defs.push(itemWrap);\r\n                            const newNode = TreeUtil.createNode(itemWrap, node);\r\n                            node.children.push(newNode);\r\n                            setFocusNode(newNode);\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorSeedMng;","import { useContext } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorLogicMng = () => {\r\n    const {node, setFocusNode} = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Add Logic',\r\n                        callback: () => {\r\n                            const newWrap: LogicUtil.WrapElement = {\r\n                                type: 'logic-item',\r\n                                data: null\r\n                            };\r\n                            const newNode = LogicElementUtil.addChild(newWrap, node);\r\n                            setFocusNode(newNode);\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorLogicMng;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ModifyOperations from \"../common/modifyOperations\";\r\nimport LogicTemplateDialog from \"../../dialog/logicTemplateDialog\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport ConfirmDialog from \"../../../../dialog/confirmDialog\";\r\n\r\nconst EditorLogicItem = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n    const { removeSelf, node, setFocusNode, invalidate, setModify, isModify } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    const [name, setName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n\r\n    const [isConnect, hasArgNode, hasFieldNode, hasConnectNode] = useMemo(() => {\r\n        const list = node.children.map(el => {\r\n            return (el.data as LogicUtil.WrapElement).type;\r\n        });\r\n        const parentType = (node.parent?.data as LogicUtil.WrapElement).type;\r\n        return [\r\n            parentType === 'connector',\r\n            list.includes('argument-mng'),\r\n            list.includes('field-mng'),\r\n            list.includes('inherit-mng'),\r\n        ];\r\n    }, [node]);\r\n\r\n    const mappingForm = () => {\r\n        if (!isConnect) {\r\n            const param = wrap.data as LogicUtil.NodeLogicItem;\r\n            setName({ ...name, value: param.name });\r\n        }\r\n    };\r\n\r\n    /** 既存のロジック名を取得（重複チェックに使用） */\r\n    const logicNameList = useMemo(() => {\r\n        if (wrap.type === 'inherit-logic') return [];\r\n        const mng = (node.parent?.data as LogicUtil.WrapElement).data;\r\n        return LogicElementUtil.getLogicNameList(mng);\r\n    }, [node]);\r\n\r\n    useEffect(() => {\r\n        if (wrap.data == null) {\r\n            setModify(true);\r\n        } else {\r\n            mappingForm();\r\n        }\r\n    }, [node, isConnect]);\r\n\r\n    /**\r\n     * 追加要素の表示非表示を切り替える\r\n     */\r\n    const toggleElement = (hasNode: boolean, listPos: number, wrapElement: LogicUtil.WrapElement) => {\r\n        if (hasNode) {\r\n            LogicElementUtil.removeChild(node, listPos, 1);\r\n            setFocusNode({ ...node });\r\n            invalidate();\r\n        } else {\r\n            LogicElementUtil.insertChild(wrapElement, node, listPos);\r\n            setFocusNode({ ...node });\r\n            invalidate();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 引数要素の有無を判定\r\n     */\r\n    const hasArgument = () => {\r\n        const argumentNode = LogicElementUtil.getInnerNode(node, 'argument-mng');\r\n        if(argumentNode == null) return false;\r\n        return argumentNode.children.length > 0;\r\n    }\r\n    /**\r\n     * 変数要素の有無を判定\r\n     */\r\n    const hasField = () => {\r\n        const fieldNode = LogicElementUtil.getInnerNode(node, 'field-mng');\r\n        if(fieldNode == null) return false;\r\n        return fieldNode.children.length > 0;\r\n    }\r\n    /**\r\n     * 派生要素の有無を判定\r\n     */\r\n    const hasInherit = () => {\r\n        const inheritNode = LogicElementUtil.getInnerNode(node, 'inherit-mng');\r\n        if(inheritNode == null) return false;\r\n        return inheritNode.children.length > 0;\r\n    }\r\n\r\n    return (<>\r\n        {isConnect ? <></> : (<>\r\n            <ModifyOperations.Component\r\n                mappingForm={mappingForm}\r\n                checkableFields={[name]}\r\n                firstRegist={() => {\r\n                    const element: LogicUtil.NodeLogicItem = {\r\n                        name: name.value,\r\n                        mngs: LogicElementUtil.getDefaultLogicMngs()\r\n                    };\r\n                    element.name = name.value;\r\n                    wrap.data = element;\r\n\r\n                    element.mngs.forEach(mng => {\r\n                        const newNode = TreeUtil.createNode(mng, node);\r\n                        const data = (newNode.data as LogicUtil.WrapElement).data;\r\n                        (data as LogicUtil.NodeParamManager).params.forEach(param => {\r\n                            newNode.children.push(TreeUtil.createNode(param, newNode));\r\n                        });\r\n                        node.children.push(newNode);\r\n                    });\r\n                    invalidate();\r\n                    setStore({ ...store });\r\n                }}\r\n                modifyRegist={() => {\r\n                    const param = wrap.data as LogicUtil.NodeLogicItem;\r\n                    const prevName = param.name;\r\n                    param.name = name.value;\r\n                    wrap.data = param;\r\n                    // 名前が変わった場合、参照箇所も修正する\r\n                    if(prevName !== param.name) {\r\n                        LogicElementUtil.syncLogicName(node.parent as TreeUtil.ElementNode, prevName, param.name);\r\n                    }\r\n                }}\r\n            />\r\n            <FormUtil.BorderPanel\r\n                title=\"param\"\r\n                innerJsx={<>\r\n                    <FormUtil.FormRecord\r\n                        titleLabel=\"Name\"\r\n                        jsx={\r\n                            <FormUtil.TextField\r\n                                width={200}\r\n                                isReadOnly={!isModify}\r\n                                checkable={name}\r\n                                setCheckable={setName}\r\n                                validates={[\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkRequired(value),\r\n                                        errorType: \"required\"\r\n                                    },\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkStringLength(value, 1, 16),\r\n                                        errorType: \"length\"\r\n                                    },\r\n                                    {\r\n                                        checker: (value) => LogicUtil.checkFieldName(value),\r\n                                        errorType: \"value\"\r\n                                    },\r\n                                    {\r\n                                        checker: (value) => {\r\n                                            const list = logicNameList.filter(name => {\r\n                                                // 自分自身のロジック名を除外\r\n                                                if (wrap.data != null) {\r\n                                                    return (wrap.data as LogicUtil.NodeLogicItem).name !== name;\r\n                                                }\r\n                                                return true;\r\n                                            });\r\n                                            return !list.includes(value);\r\n                                        },\r\n                                        errorType: \"relation\"\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        }\r\n                    />\r\n                </>}\r\n            />\r\n        </>)}\r\n        <FormUtil.BorderPanel\r\n            title=\"element\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={<FormUtil.Switch\r\n                        label={'Argument'}\r\n                        width={300}\r\n                        isUse={hasArgNode}\r\n                        isEnable={!hasArgument()}\r\n                        callback={() => {\r\n                            let listPos = 0;\r\n                            toggleElement(\r\n                                hasArgNode,\r\n                                listPos,\r\n                                {\r\n                                    type: 'argument-mng',\r\n                                    data: {\r\n                                        args: []\r\n                                    } as LogicUtil.NodeArgumentManager\r\n                                }\r\n                            );\r\n                        }}\r\n                    />}\r\n                />\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    isEnable={true}\r\n                    jsx={<FormUtil.Switch\r\n                        label={'Field'}\r\n                        width={300}\r\n                        isUse={hasFieldNode}\r\n                        isEnable={!hasField()}\r\n                        callback={() => {\r\n                            let listPos = 0;\r\n                            if (hasArgNode) listPos++;\r\n                            toggleElement(\r\n                                hasFieldNode,\r\n                                listPos,\r\n                                {\r\n                                    type: 'field-mng',\r\n                                    data: {\r\n                                        fields: []\r\n                                    } as LogicUtil.NodeFieldManager\r\n                                }\r\n                            );\r\n                        }}\r\n                    />}\r\n                />\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Inherit'}\r\n                            width={300}\r\n                            isUse={hasConnectNode}\r\n                            isEnable={!hasInherit()}\r\n                            callback={() => {\r\n                                let listPos = 2;\r\n                                if (hasArgNode) listPos++;\r\n                                if (hasFieldNode) listPos++;\r\n                                toggleElement(\r\n                                    hasConnectNode,\r\n                                    listPos,\r\n                                    {\r\n                                        type: 'inherit-mng',\r\n                                        data: {\r\n                                            inherits: []\r\n                                        } as LogicUtil.NodeConnectManager\r\n                                    }\r\n                                );\r\n                            }}\r\n                        />\r\n                    }\r\n                />\r\n            </>}\r\n        />\r\n        {isConnect ? <></> : (\r\n            <FormUtil.BorderPanel\r\n                title=\"operation\"\r\n                isEnable={!isModify}\r\n                innerJsx={<>\r\n                    <FormUtil.ButtonRecord\r\n                        isCenter\r\n                        buttons={[\r\n                            {\r\n                                label: 'Clone',\r\n                                // isEnable: !isModify,\r\n                                isEnable: false,\r\n                                callback: () => {\r\n                                    store.system.dialog = <ConfirmDialog.Component\r\n                                        message=\"Clone this logic.\"\r\n                                        buttons={[\r\n                                            {\r\n                                                label: 'Cancel',\r\n                                                callback: () => {\r\n                                                    store.system.dialog = null;\r\n                                                    setStore({ ...store });\r\n                                                }\r\n                                            },\r\n                                            {\r\n                                                label: 'Enter',\r\n                                                callback: () => {\r\n                                                    let rootNode = node;\r\n                                                    while (rootNode.parent != null) rootNode = rootNode.parent;\r\n                                                    const inheritNode = node.children.find(el => (el.data as LogicUtil.WrapElement).type === 'inherit-logic');\r\n                                                    const logicMngNode = rootNode.children.find(el => (el.data as LogicUtil.WrapElement).type === 'logic-mng');\r\n                                                    if (logicMngNode == undefined || inheritNode == undefined) return;\r\n                                                    const inherit = (inheritNode.data as LogicUtil.WrapElement).data;\r\n                                                    const clone = JSON.parse(JSON.stringify((inherit))) as LogicUtil.NodeInheritItem;\r\n                                                    // ロジック名（自動命名）を取得\r\n                                                    const defaultName = LogicElementUtil.getNumberingOnPrefixName('clone_inherit_', logicMngNode);\r\n                                                    const logicItem: LogicUtil.NodeLogicItem = {\r\n                                                        ...clone,\r\n                                                        name: defaultName\r\n                                                    };\r\n                                                    const newWrap: LogicUtil.WrapElement = {\r\n                                                        type: 'logic-item',\r\n                                                        data: logicItem\r\n                                                    };\r\n    \r\n                                                    // ロジックマネージャに追加\r\n                                                    const newNode = LogicElementUtil.addChild(newWrap, logicMngNode);\r\n                                                    // 子要素の展開\r\n                                                    newNode.children = LogicUtil.getChildrenElementNode(newNode);\r\n    \r\n                                                    // 自身（コネクタ）からインヘリット要素を削除\r\n                                                    LogicElementUtil.removeChild(node, 2, 1);\r\n    \r\n                                                    const param = wrap.data as LogicUtil.NodeInheritConnector;\r\n                                                    param.method = 'depend';\r\n                                                    param.depend = logicItem.name;\r\n                                                    mappingForm();\r\n    \r\n                                                    store.system.dialog = null;\r\n                                                    setStore({ ...store });\r\n                                                    invalidate();\r\n                                                }\r\n                                            }\r\n                                        ]}\r\n                                    />;\r\n                                    setStore({ ...store });\r\n                                }\r\n                            }\r\n                        ]}\r\n                    />\r\n                    <FormUtil.ButtonRecord\r\n                        isCenter\r\n                        buttons={[\r\n                            {\r\n                                label: 'Delete',\r\n                                callback: () => {\r\n                                    removeSelf();\r\n                                }\r\n                            }\r\n                        ]}\r\n                    />\r\n                    {/* 並び順入れ替えボタン */}\r\n                    {LogicElementUtil.getSwapButtons(node, invalidate)}\r\n                </>}\r\n            />\r\n        )}\r\n    </>);\r\n}\r\n\r\nexport default EditorLogicItem;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ParamUtil from \"../../util/paramUtil\";\r\n\r\nconst EditorBehiviorMng = () => {\r\n    const { node, setFocusNode, invalidate, setModify, isModify } = useContext(FactoryTreeContext);\r\n    const mng = (node.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager;\r\n\r\n    const [isVector, hasDecayParam, hasGravityParam] = useMemo(() => {\r\n        const list = node.children.map(el => {\r\n            return ((el.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamItem).name;\r\n        });\r\n        return [\r\n            list.includes(ParamUtil.BehaviorParamType.VEC_X),\r\n            list.includes(ParamUtil.ModulateParamType.DECAY_RATE),\r\n            list.includes(ParamUtil.ModulateParamType.GRAVITY_VAL)\r\n        ]\r\n    }, [node]);\r\n\r\n    const exchangeElements = (flag: boolean, listPos: number,\r\n        trueParamElements: LogicUtil.NodeParamItem[],\r\n        falseParamElements: LogicUtil.NodeParamItem[]\r\n    ) => {\r\n        const size = (flag ? trueParamElements : falseParamElements).length;\r\n        LogicElementUtil.removeChild(node, listPos, size);\r\n\r\n        (flag ? trueParamElements : falseParamElements).forEach((data, i) => {\r\n            const wrap: LogicUtil.WrapElement = {\r\n                type: 'param-item',\r\n                data\r\n            };\r\n            LogicElementUtil.insertChild(wrap, node, listPos + i);\r\n        });\r\n        setFocusNode({ ...node });\r\n        invalidate();\r\n    };\r\n\r\n    const exchangeVectorMethod = () => {\r\n        exchangeElements(!isVector, 3,\r\n            [\r\n                { name: ParamUtil.BehaviorParamType.VEC_X, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] },\r\n                { name: ParamUtil.BehaviorParamType.VEC_Y, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] },\r\n            ],\r\n            [\r\n                { name: ParamUtil.BehaviorParamType.VEC_RAD, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] },\r\n                { name: ParamUtil.BehaviorParamType.VEC_LEN, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] },\r\n            ]\r\n        )\r\n    }\r\n\r\n    /**\r\n     * 追加要素の表示非表示を切り替える\r\n     */\r\n    const toggleElements = (hasNode: boolean, listPos: number, paramElements: LogicUtil.NodeParamItem[]) => {\r\n        const size = paramElements.length;\r\n        if (hasNode) {\r\n            mng.params.splice(listPos, size);\r\n            node.children.splice(listPos, size);\r\n            setFocusNode({ ...node });\r\n            invalidate();\r\n        } else {\r\n            paramElements.forEach((data, i) => {\r\n                const wrap: LogicUtil.WrapElement = {\r\n                    type: 'param-item',\r\n                    data\r\n                };\r\n                mng.params.splice(listPos + i, 0, wrap);\r\n                const newNode = TreeUtil.createNode(wrap, node);\r\n                node.children.splice(listPos + i, 0, newNode);\r\n            });\r\n            setFocusNode({ ...node });\r\n            invalidate();\r\n        }\r\n    };\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"method\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Vector method'}\r\n                            width={300}\r\n                            isRelation\r\n                            isUse={isVector}\r\n                            callback={exchangeVectorMethod}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Direction method'}\r\n                            width={300}\r\n                            isRelation\r\n                            isUse={!isVector}\r\n                            callback={exchangeVectorMethod}\r\n                        />\r\n                    }\r\n                />\r\n            </>}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"modulate\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Decay'}\r\n                            width={300}\r\n                            isUse={hasDecayParam}\r\n                            callback={() => {\r\n                                toggleElements(hasDecayParam, 5, [\r\n                                    {\r\n                                        name: ParamUtil.ModulateParamType.DECAY_RATE,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '0.9' }]\r\n                                    },\r\n                                    {\r\n                                        name: ParamUtil.ModulateParamType.DECAY_LIMIT,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '1' }]\r\n                                    },\r\n                                ]);\r\n                            }}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Gravity'}\r\n                            width={300}\r\n                            isUse={hasGravityParam}\r\n                            callback={() => {\r\n                                toggleElements(hasGravityParam, !hasDecayParam ? 5 : 7, [\r\n                                    {\r\n                                        name: ParamUtil.ModulateParamType.GRAVITY_VAL,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '0.2' }]\r\n                                    },\r\n                                    {\r\n                                        name: ParamUtil.ModulateParamType.GRAVITY_LIMIT,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '10' }]\r\n                                    },\r\n                                ]);\r\n                            }}\r\n                        />\r\n                    }\r\n                />\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorBehiviorMng;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ParamUtil from \"../../util/paramUtil\";\r\nimport ModifyOperations from \"../common/modifyOperations\";\r\n\r\ntype Medhod = 'blank' | 'particle' | 'snake'\r\n\r\nconst EditorVisualMng = () => {\r\n    const { node, setFocusNode, invalidate, setModify, isModify } = useContext(FactoryTreeContext);\r\n    const mng = (node.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager;\r\n\r\n    const [drawMethod, hasDisappearParam, hasShrinkParam] = useMemo(() => {\r\n        const list = node.children.map(el => {\r\n            return ((el.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamItem).name;\r\n        });\r\n        let drawMethod: Medhod = 'blank';\r\n        if(list.length > 0) {\r\n            drawMethod = list.includes(ParamUtil.VisualParamType.THICKNESS) ? 'snake' : 'particle';\r\n        }\r\n        return [\r\n            drawMethod,\r\n            list.includes(ParamUtil.EffectParamType.DISAPPEAR_START),\r\n            list.includes(ParamUtil.EffectParamType.SHRINK_START)\r\n        ]\r\n    }, [node]);\r\n\r\n    /**\r\n     * 追加要素の表示非表示を切り替える\r\n     */\r\n    const toggleElements = (hasNode: boolean, listPos: number, paramElements: LogicUtil.NodeParamItem[]) => {\r\n        const size = paramElements.length;\r\n        if (hasNode) {\r\n            LogicElementUtil.removeChild(node, listPos, size);\r\n            setFocusNode({ ...node });\r\n            invalidate();\r\n        } else {\r\n            paramElements.forEach((data, i) => {\r\n                const wrap: LogicUtil.WrapElement = {\r\n                    type: 'param-item',\r\n                    data\r\n                };\r\n                LogicElementUtil.insertChild(wrap, node, listPos + i);\r\n            });\r\n            setFocusNode({ ...node });\r\n            invalidate();\r\n        }\r\n    };\r\n\r\n    const addElements = (paramElements: LogicUtil.NodeParamItem[]) => {\r\n        const size = paramElements.length;\r\n        paramElements.forEach((data, i) => {\r\n            const wrap: LogicUtil.WrapElement = {\r\n                type: 'param-item',\r\n                data\r\n            };\r\n            LogicElementUtil.insertChild(wrap, node, i);\r\n        });\r\n        setFocusNode({ ...node });\r\n        invalidate();\r\n    };\r\n    const removeElements = (elementNameList: string[]) => {\r\n        const mng = (node.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager;\r\n        elementNameList.forEach((name) => {\r\n            mng.params.forEach((param, i) => {\r\n                if((param.data as LogicUtil.NodeParamItem).name === name) {\r\n                    LogicElementUtil.removeChild(node, i, 1);\r\n                }\r\n            });\r\n        });\r\n        setFocusNode({ ...node });\r\n        invalidate();\r\n    };\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"method\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'None'}\r\n                            width={300}\r\n                            isRelation\r\n                            isUse={drawMethod === 'blank'}\r\n                            callback={() => {\r\n                                mng.params.length = 0;\r\n                                node.children.length = 0;\r\n                                setFocusNode({ ...node });\r\n                                invalidate();\r\n                            }}\r\n                        />\r\n                    }\r\n                />\r\n                {/* <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Snake Method'}\r\n                            width={300}\r\n                            isRelation\r\n                            isUse={drawMethod === 'snake'}\r\n                            callback={() => {\r\n                                removeElements([\r\n                                    ParamUtil.VisualParamType.RADIUS\r\n                                ]);\r\n                                addElements([\r\n                                    {\r\n                                        name: ParamUtil.VisualParamType.THICKNESS,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '10' }]\r\n                                    },\r\n                                    {\r\n                                        name: ParamUtil.VisualParamType.COLOR_R,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\r\n                                    },\r\n                                    {\r\n                                        name: ParamUtil.VisualParamType.COLOR_G,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\r\n                                    },\r\n                                    {\r\n                                        name: ParamUtil.VisualParamType.COLOR_B,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\r\n                                    },\r\n                                    {\r\n                                        name: ParamUtil.VisualParamType.COLOR_A,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\r\n                                    },\r\n                                ]);\r\n                            }}\r\n                        />\r\n                    }\r\n                /> */}\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Particle Method'}\r\n                            width={300}\r\n                            isRelation\r\n                            isUse={drawMethod === 'particle'}\r\n                            callback={() => {\r\n                                addElements([\r\n                                    {\r\n                                        name: ParamUtil.VisualParamType.RADIUS,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '20' }]\r\n                                    },\r\n                                    {\r\n                                        name: ParamUtil.VisualParamType.COLOR_R,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\r\n                                    },\r\n                                    {\r\n                                        name: ParamUtil.VisualParamType.COLOR_G,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\r\n                                    },\r\n                                    {\r\n                                        name: ParamUtil.VisualParamType.COLOR_B,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\r\n                                    },\r\n                                    {\r\n                                        name: ParamUtil.VisualParamType.COLOR_A,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\r\n                                    },\r\n                                ]);\r\n                            }}\r\n                        />\r\n                    }\r\n                />\r\n            </>}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"effect\"\r\n            isEnable={!isModify && drawMethod !== 'blank'}\r\n            innerJsx={<>\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Disappear'}\r\n                            width={300}\r\n                            isUse={hasDisappearParam}\r\n                            callback={() => {\r\n                                toggleElements(hasDisappearParam, 5, [\r\n                                    {\r\n                                        name: ParamUtil.EffectParamType.DISAPPEAR_START,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '0' }]\r\n                                    },\r\n                                ]);\r\n                            }}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Shrink'}\r\n                            width={300}\r\n                            isUse={hasShrinkParam}\r\n                            callback={() => {\r\n                                toggleElements(hasShrinkParam, !hasDisappearParam ? 5 : 6, [\r\n                                    {\r\n                                        name: ParamUtil.EffectParamType.SHRINK_START,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '0' }]\r\n                                    },\r\n                                ]);\r\n                            }}\r\n                        />\r\n                    }\r\n                />\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorVisualMng;","import { useContext } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorInheritConnMng = () => {\r\n    const { node, setFocusNode, invalidate } = useContext(FactoryTreeContext);\r\n    const mng = (node.data as LogicUtil.WrapElement).data as LogicUtil.NodeConnectManager;\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Add Inherit',\r\n                        callback: () => {\r\n                            const wrap: LogicUtil.WrapElement = {\r\n                                type: 'connector',\r\n                                data: null\r\n                            }\r\n                            mng.inherits.push(wrap);\r\n                            const newNode = TreeUtil.createNode(wrap, node);\r\n                            node.children.push(newNode);\r\n                            setFocusNode(newNode);\r\n                            invalidate();\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorInheritConnMng;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport ConfirmDialog from \"../../../../dialog/confirmDialog\";\r\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ModifyOperations from \"../common/modifyOperations\";\r\n\r\nconst EditorInheritConnector = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n    const { rootData, node, invalidate, setModify, isModify, removeSelf, setFocusNode } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    // const [condition, setCondition] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [identify, setIdentify] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [method, setMethod] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [depend, setDepend] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n\r\n    const mappingForm = () => {\r\n        const param = wrap.data as LogicUtil.NodeInheritConnector;\r\n        setMethod({ ...method, value: param.method });\r\n        setDepend({ ...depend, value: param.depend });\r\n        setIdentify({ ...identify, value: param.id });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (wrap.data == null) {\r\n            setModify(true);\r\n            // 派生識別名（自動命名）の初期値を取得\r\n            const defaultName = LogicElementUtil.getNumberingOnPrefixName('id_', node.parent as TreeUtil.ElementNode);\r\n            setIdentify({ ...identify, value: defaultName });\r\n        } else {\r\n            mappingForm();\r\n        }\r\n    }, [node]);\r\n\r\n    const isCreate = method.value === 'create';\r\n\r\n    const hasFieldNode = useMemo(() => {\r\n        return LogicElementUtil.getInnerNode(node, 'inhfld-mng') != null;\r\n    }, [node]);\r\n\r\n    /** 引用するロジックリスト */\r\n    const logicList = useMemo((): string[] => {\r\n        const rootNode = rootData.data as LogicUtil.NodeRoot;\r\n        const inheritMng = rootNode.logicMng.data as LogicUtil.NodeLogicManager;\r\n        return inheritMng.defs.map(wrap => {\r\n            return (wrap.data as LogicUtil.NodeLogicItem).name;\r\n        });\r\n    }, [node]);\r\n\r\n    /** 同階層の既存のインヘリットIDを取得（重複チェックに使用） */\r\n    const idList = useMemo(() => {\r\n        const mng = (node.parent?.data as LogicUtil.WrapElement).data;\r\n        return LogicElementUtil.getInheritIdList(mng);\r\n    }, [node]);\r\n\r\n    const initConnectorNode = (param: LogicUtil.NodeInheritConnector) => {\r\n        param.mngs = [];\r\n        node.children = [];\r\n        param.mngs.push({\r\n            type: 'extend-mng',\r\n            data: {\r\n                params: []\r\n            } as LogicUtil.NodeParamManager\r\n        });\r\n        param.mngs.push({\r\n            type: 'send-mng',\r\n            data: {\r\n                params: []\r\n            } as LogicUtil.NodeParamManager\r\n        });\r\n        if (isCreate) {\r\n            param.mngs.push({\r\n                type: 'inherit-logic',\r\n                data: {\r\n                    mngs: LogicElementUtil.getDefaultLogicMngs()\r\n                } as LogicUtil.NodeInheritItem\r\n            });\r\n        }\r\n        wrap.data = param;\r\n\r\n        param.mngs.forEach(mng => {\r\n            const newNode = TreeUtil.createNode(mng, node);\r\n            const data = (newNode.data as LogicUtil.WrapElement);\r\n            switch (data.type) {\r\n                case 'inherit-logic': {\r\n                    LogicElementUtil.syncTreeElementFromWrap(newNode);\r\n                } break;\r\n                case 'send-mng': {\r\n                    const connector = (newNode.parent?.data as LogicUtil.WrapElement).data as LogicUtil.NodeInheritConnector;\r\n                    if (connector.method === 'depend') {\r\n                        console.log('initSendParams');\r\n                        initSendParams(newNode, rootData);\r\n                    }\r\n                } break;\r\n            }\r\n            node.children.push(newNode);\r\n        });\r\n    }\r\n\r\n    const getSendParamList = (sendNode: TreeUtil.ElementNode, rootData: LogicUtil.WrapElement): string[] => {\r\n        const connector = (sendNode.parent?.data as LogicUtil.WrapElement).data as LogicUtil.NodeInheritConnector;\r\n        const rootNode = rootData.data as LogicUtil.NodeRoot;\r\n        const inheritMng = rootNode.logicMng.data as LogicUtil.NodeLogicManager;\r\n        const dependItem = inheritMng.defs.find(wrap => {\r\n            return (wrap.data as LogicUtil.NodeLogicItem).name === connector.depend;\r\n        });\r\n        if (dependItem != undefined) {\r\n            const logicWrap = dependItem;\r\n            const argWrap = (logicWrap.data as LogicUtil.NodeLogicItem).mngs[0];\r\n            if (argWrap.type === 'argument-mng') {\r\n                return (argWrap.data as LogicUtil.NodeArgumentManager).args.map(arg => {\r\n                    return (arg.data as LogicUtil.NodeArgumentItem).name;\r\n                });\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    const initSendParams = (sendNode: TreeUtil.ElementNode, rootData: LogicUtil.WrapElement) => {\r\n        const sendParamList = getSendParamList(sendNode, rootData);\r\n        // console.log(sendParamList);\r\n        const wrap = sendNode.data as LogicUtil.WrapElement;\r\n        const params = (wrap.data as LogicUtil.NodeParamManager).params;\r\n        // 必要な存在しないパラメータを追加\r\n        const curParamList = params.map(param => {\r\n            return (param.data as LogicUtil.NodeParamItem).name;\r\n        });\r\n        sendParamList.forEach(param => {\r\n            if (!curParamList.includes(param)) {\r\n                const paramWrap = LogicElementUtil.createParamWrap('send-item',\r\n                    { name: param, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] }\r\n                );\r\n                params.push(paramWrap);\r\n                sendNode.children.push(TreeUtil.createNode(paramWrap, sendNode));\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * 追加要素の表示非表示を切り替える\r\n     */\r\n    const toggleElement = (hasNode: boolean, listPos: number, wrapElement: LogicUtil.WrapElement) => {\r\n        if (hasNode) {\r\n            LogicElementUtil.removeChild(node, listPos, 1);\r\n            setFocusNode({ ...node });\r\n            invalidate();\r\n        } else {\r\n            LogicElementUtil.insertChild(wrapElement, node, listPos);\r\n            setFocusNode({ ...node });\r\n            invalidate();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 変数要素の有無を判定\r\n     */\r\n    const hasField = () => {\r\n        const fieldNode = LogicElementUtil.getInnerNode(node, 'inhfld-mng');\r\n        if(fieldNode == null) return false;\r\n        return fieldNode.children.length > 0;\r\n    }\r\n\r\n    const isDisable = wrap.data == null ? false : (wrap.data as LogicUtil.NodeInheritConnector).disable ?? false;\r\n\r\n    return (<>\r\n        <ModifyOperations.Component\r\n            mappingForm={mappingForm}\r\n            checkableFields={[identify, method, depend]}\r\n            firstRegist={() => {\r\n                const param: LogicUtil.NodeInheritConnector = {\r\n                    method: method.value as LogicUtil.InheritMethod,\r\n                    depend: depend.value,\r\n                    id: identify.value,\r\n                    mngs: []\r\n                };\r\n                initConnectorNode(param);\r\n                invalidate();\r\n            }}\r\n            modifyRegist={() => {\r\n                const param = wrap.data as LogicUtil.NodeInheritConnector;\r\n                const isChange = param.method !== method.value || param.depend !== depend.value;\r\n                param.method = method.value as LogicUtil.InheritMethod;\r\n                param.depend = depend.value;\r\n                param.id = identify.value;\r\n                wrap.data = param;\r\n\r\n                if (isChange) {\r\n                    initConnectorNode(param);\r\n                }\r\n                invalidate();\r\n            }}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"param\"\r\n            innerJsx={<>\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Method\"\r\n                    jsx={\r\n                        <FormUtil.Combobox\r\n                            marginLeft={2}\r\n                            checkable={method}\r\n                            width={178}\r\n                            isReadOnly={!isModify}\r\n                            setCheckable={(checkable) => {\r\n                                // createが選択されたらdependを空にする\r\n                                if (checkable.value === 'create') {\r\n                                    setDepend({ ...depend, value: '' });\r\n                                }\r\n                                setMethod(checkable);\r\n                            }}\r\n                            list={LogicUtil.ConnectTypes.map(item => {\r\n                                return { value: item, labelText: item };\r\n                            })}\r\n                            headBlank\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Depend\"\r\n                    isEnable={method.value === 'depend'}\r\n                    jsx={\r\n                        <FormUtil.Combobox\r\n                            marginLeft={2}\r\n                            checkable={depend}\r\n                            width={270}\r\n                            isReadOnly={!isModify}\r\n                            setCheckable={setDepend}\r\n                            list={logicList.map(item => {\r\n                                return { value: item, labelText: item };\r\n                            })}\r\n                            headBlank\r\n                            dependency={[method]}\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => {\r\n                                        return method.value !== 'depend' || ValidateUtil.checkRequired(value);\r\n                                    },\r\n                                    errorType: \"required\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Identify\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            marginLeft={2}\r\n                            checkable={identify}\r\n                            width={270}\r\n                            isReadOnly={!isModify}\r\n                            setCheckable={setIdentify}\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => LogicUtil.checkFieldName(value),\r\n                                    errorType: \"value\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkStringLength(value, 0, 20),\r\n                                    errorType: \"length\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => {\r\n                                        const list = idList.filter(id => {\r\n                                            // 自分自身のidを除外\r\n                                            if (wrap.data != null) {\r\n                                                return (wrap.data as LogicUtil.NodeInheritConnector).id !== id;\r\n                                            }\r\n                                            return true;\r\n                                        });\r\n                                        return !list.includes(value);\r\n                                    },\r\n                                    errorType: \"relation\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n            </>}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"element\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    isEnable={true}\r\n                    jsx={<FormUtil.Switch\r\n                        label={'Field'}\r\n                        width={300}\r\n                        isUse={hasFieldNode}\r\n                        isEnable={!hasField()}\r\n                        callback={() => {\r\n                            toggleElement(\r\n                                hasFieldNode,\r\n                                0,\r\n                                {\r\n                                    type: 'inhfld-mng',\r\n                                    data: {\r\n                                        fields: []\r\n                                    } as LogicUtil.NodeFieldManager\r\n                                }\r\n                            );\r\n                        }}\r\n                    />}\r\n                />\r\n            </>}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<>\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={<FormUtil.Switch\r\n                        label={'Disable'}\r\n                        width={300}\r\n                        isUse={isDisable}\r\n                        isEnable={!isModify}\r\n                        callback={() => {\r\n                            const data = (wrap.data as LogicUtil.NodeInheritConnector);\r\n                            if (isDisable) {\r\n                                data.disable = undefined;\r\n                            } else {\r\n                                data.disable = true;\r\n                            }\r\n                            invalidate();\r\n                        }}\r\n                    />}\r\n                />\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Edit local',\r\n                            isEnable: !isModify && !isCreate,\r\n                            callback: () => {\r\n                                store.system.dialog = <ConfirmDialog.Component\r\n                                    message=\"Create a clone from the depended inherit logic.\"\r\n                                    buttons={[\r\n                                        {\r\n                                            label: 'Cancel',\r\n                                            callback: () => {\r\n                                                store.system.dialog = null;\r\n                                                setStore({ ...store });\r\n                                            }\r\n                                        },\r\n                                        {\r\n                                            label: 'Conversion',\r\n                                            callback: () => {\r\n                                                const logicMng = (rootData.data as LogicUtil.NodeRoot).logicMng.data as LogicUtil.NodeLogicManager;\r\n                                                const logicList = logicMng.defs.map(def => def.data as LogicUtil.NodeLogicItem);\r\n                                                // ディペンドしているロジックを取得\r\n                                                const dependLogic = logicList.find(inherit => inherit.name === depend.value);\r\n                                                if (dependLogic != undefined) {\r\n                                                    const cloneLogic = JSON.parse(JSON.stringify(dependLogic)) as LogicUtil.NodeLogicItem;\r\n                                                    const connectItem: LogicUtil.NodeInheritItem = {\r\n                                                        mngs: cloneLogic.mngs\r\n                                                    };\r\n                                                    const newWrap: LogicUtil.WrapElement = {\r\n                                                        type: 'inherit-logic',\r\n                                                        data: connectItem\r\n                                                    };\r\n                                                    const newNode = LogicElementUtil.addChild(newWrap, node);\r\n                                                    // 子要素の展開\r\n                                                    newNode.children = LogicUtil.getChildrenElementNode(newNode);\r\n\r\n                                                    const param = wrap.data as LogicUtil.NodeInheritConnector;\r\n                                                    param.method = 'create';\r\n                                                    param.depend = '';\r\n                                                    mappingForm();\r\n                                                }\r\n                                                store.system.dialog = null;\r\n                                                setStore({ ...store });\r\n                                                invalidate();\r\n                                            }\r\n                                        }\r\n                                    ]}\r\n                                />;\r\n                                setStore({ ...store });\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Detach global',\r\n                            isEnable: !isModify && isCreate,\r\n                            callback: () => {\r\n                                store.system.dialog = <ConfirmDialog.Component\r\n                                    message=\"Detach a clone from the this inherit logic.\"\r\n                                    buttons={[\r\n                                        {\r\n                                            label: 'Cancel',\r\n                                            callback: () => {\r\n                                                store.system.dialog = null;\r\n                                                setStore({ ...store });\r\n                                            }\r\n                                        },\r\n                                        {\r\n                                            label: 'Conversion',\r\n                                            callback: () => {\r\n                                                let rootNode = node;\r\n                                                while (rootNode.parent != null) rootNode = rootNode.parent;\r\n                                                const inheritNode = node.children.find(el => (el.data as LogicUtil.WrapElement).type === 'inherit-logic');\r\n                                                const logicMngNode = rootNode.children.find(el => (el.data as LogicUtil.WrapElement).type === 'logic-mng');\r\n                                                if (logicMngNode == undefined || inheritNode == undefined) return;\r\n                                                const inherit = (inheritNode.data as LogicUtil.WrapElement).data;\r\n                                                const clone = JSON.parse(JSON.stringify((inherit))) as LogicUtil.NodeInheritItem;\r\n                                                // ロジック名（自動命名）を取得\r\n                                                const defaultName = LogicElementUtil.getNumberingOnPrefixName('clone_inherit_', logicMngNode);\r\n                                                const logicItem: LogicUtil.NodeLogicItem = {\r\n                                                    ...clone,\r\n                                                    name: defaultName\r\n                                                };\r\n                                                const newWrap: LogicUtil.WrapElement = {\r\n                                                    type: 'logic-item',\r\n                                                    data: logicItem\r\n                                                };\r\n\r\n                                                // ロジックマネージャに追加\r\n                                                const newNode = LogicElementUtil.addChild(newWrap, logicMngNode);\r\n                                                // 子要素の展開\r\n                                                newNode.children = LogicUtil.getChildrenElementNode(newNode);\r\n\r\n                                                // 自身（コネクタ）からインヘリット要素を削除\r\n                                                LogicElementUtil.removeChild(node, 2, 1);\r\n\r\n                                                const param = wrap.data as LogicUtil.NodeInheritConnector;\r\n                                                param.method = 'depend';\r\n                                                param.depend = logicItem.name;\r\n                                                mappingForm();\r\n\r\n                                                store.system.dialog = null;\r\n                                                setStore({ ...store });\r\n                                                invalidate();\r\n                                            }\r\n                                        }\r\n                                    ]}\r\n                                />;\r\n                                setStore({ ...store });\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Delete',\r\n                            isEnable: !isModify,\r\n                            callback: () => {\r\n                                removeSelf();\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                {/* 並び順入れ替えボタン */}\r\n                {LogicElementUtil.getSwapButtons(node, invalidate)}\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorInheritConnector;","import styled from \"styled-components\";\r\nimport { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport { GlobalContext } from \"../../../entry/systemEntry\";\r\nimport FormUtil from \"../../../../utils/form/formUtiil\";\r\nimport LogicUtil from \"../util/logicUtil\";\r\nimport ParamUtil from \"../util/paramUtil\";\r\nimport ValidateUtil from \"../../../../utils/form/validateUtil\";\r\nimport TreeUtil from \"../../../../utils/treeUtil\";\r\nimport LogicElementUtil from \"../util/logicElementUtil\";\r\n\r\nnamespace SendTemplateDialog {\r\n\r\n    const FRAME_WIDTH = 450;\r\n    const FRAME_HEIGHT = 160;\r\n    const COMPONENT_WIDTH = 296;\r\n\r\n    export const ConnectParentPosition = (props: {\r\n        node: TreeUtil.ElementNode;\r\n        invalidate: () => void;\r\n    }) => {\r\n\r\n        const { store, setStore } = useContext(GlobalContext);\r\n\r\n        const [xName, setXName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n        const [yName, setYName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n\r\n        const message = 'Please, input property name!';\r\n\r\n        /** 既存のパラメータ名を取得（重複チェックに使用） */\r\n        const paramNameList = useMemo(() => {\r\n            const owner = (LogicElementUtil.getInnerWrap(props.node.parent?.data as LogicUtil.WrapElement, 'inherit-logic') as LogicUtil.WrapElement).data;\r\n            return LogicElementUtil.getParamNameList(owner);\r\n        }, [props.node]);\r\n\r\n        const buttons: FormUtil.ButtonProps[] = [\r\n            {\r\n                label: 'Cancel',\r\n                callback: () => {\r\n                    store.system.dialog = null;\r\n                    setStore({ ...store });\r\n                }\r\n            },\r\n            {\r\n                label: 'Execute',\r\n                isEnable: FormUtil.checkItems([xName, yName]),\r\n                callback: () => {\r\n                    // Sendにパラメータを追加\r\n                    LogicElementUtil.addChild(LogicElementUtil.createParamWrap('send-item',\r\n                        { name: xName.value, formulaItems: ['var'], values: [{ type: 'self', value: ParamUtil.SelfParamType.POS_X }] }\r\n                    ), props.node);\r\n                    LogicElementUtil.addChild(LogicElementUtil.createParamWrap('send-item',\r\n                        { name: yName.value, formulaItems: ['var'], values: [{ type: 'self', value: ParamUtil.SelfParamType.POS_Y }] }\r\n                    ), props.node);\r\n\r\n                    // 派生ロジックに引数を追加\r\n                    const logicNode = LogicElementUtil.getInnerNode(props.node.parent as TreeUtil.ElementNode, 'inherit-logic') as TreeUtil.ElementNode;\r\n                    const hasArgNode = logicNode.children.find(child => (child.data as LogicUtil.WrapElement).type === 'argument-mng') != undefined;\r\n                    if (!hasArgNode) {\r\n                        LogicElementUtil.insertChild({\r\n                            type: 'argument-mng',\r\n                            data: {\r\n                                args: []\r\n                            } as LogicUtil.NodeArgumentManager\r\n                        }, logicNode, 0);\r\n                    }\r\n                    const argNode = logicNode.children.find(child => (child.data as LogicUtil.WrapElement).type === 'argument-mng') as TreeUtil.ElementNode;\r\n\r\n                    LogicElementUtil.addChild({\r\n                        type: 'argument-item',\r\n                        data: {\r\n                            name: xName.value,\r\n                            valueType: 'number'\r\n                        } as LogicUtil.NodeArgumentItem\r\n                    }, argNode);\r\n                    LogicElementUtil.addChild({\r\n                        type: 'argument-item',\r\n                        data: {\r\n                            name: yName.value,\r\n                            valueType: 'number'\r\n                        } as LogicUtil.NodeArgumentItem\r\n                    }, argNode);\r\n\r\n                    // 派生ロジックの座標に引数を設定\r\n                    const behaviorNode = logicNode.children.find(child => (child.data as LogicUtil.WrapElement).type === 'behavior-mng') as TreeUtil.ElementNode;\r\n                    const setParamValue = (prpName: string, argName: string) => {\r\n                        const params = behaviorNode.children.map(child => (child.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamItem);\r\n                        const targetParam = params.find(param => param.name === prpName) as LogicUtil.NodeParamItem;\r\n                        targetParam.formulaItems = ['var'];\r\n                        targetParam.values = [{ type: 'argument', value: argName }];\r\n                    }\r\n                    setParamValue(ParamUtil.BehaviorParamType.POS_X, xName.value);\r\n                    setParamValue(ParamUtil.BehaviorParamType.POS_Y, yName.value);\r\n\r\n                    store.system.dialog = null;\r\n                    setStore({ ...store });\r\n                    props.invalidate();\r\n                }\r\n            }\r\n        ]\r\n\r\n        return (\r\n            <_Frame width={FRAME_WIDTH} height={FRAME_HEIGHT}>\r\n                <_Inner>\r\n                    <FormUtil.Message\r\n                        message={message}\r\n                        isCenter\r\n                    />\r\n                    <FormUtil.FormRecord\r\n                        titleLabel=\"self_pos_x\"\r\n                        jsx={\r\n                            <FormUtil.TextField\r\n                                marginLeft={2}\r\n                                checkable={xName}\r\n                                width={COMPONENT_WIDTH}\r\n                                setCheckable={setXName}\r\n                                validates={[\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkRequired(value),\r\n                                        errorType: \"required\"\r\n                                    },\r\n                                    {\r\n                                        checker: (value) => LogicUtil.checkFieldName(value),\r\n                                        errorType: \"value\"\r\n                                    },\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkStringLength(value, 0, 20),\r\n                                        errorType: \"length\"\r\n                                    },\r\n                                    {\r\n                                        checker: (value) => {\r\n                                            const list = paramNameList.slice();\r\n                                            if (yName.value !== '') list.push(yName.value);\r\n                                            return !list.includes(value);\r\n                                        },\r\n                                        errorType: \"relation\"\r\n                                    }\r\n                                ]}\r\n                                dependency={[yName]}\r\n                            />\r\n                        }\r\n                    />\r\n                    <FormUtil.FormRecord\r\n                        titleLabel=\"self_pos_y\"\r\n                        jsx={\r\n                            <FormUtil.TextField\r\n                                marginLeft={2}\r\n                                checkable={yName}\r\n                                width={COMPONENT_WIDTH}\r\n                                setCheckable={setYName}\r\n                                validates={[\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkRequired(value),\r\n                                        errorType: \"required\"\r\n                                    },\r\n                                    {\r\n                                        checker: (value) => LogicUtil.checkFieldName(value),\r\n                                        errorType: \"value\"\r\n                                    },\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkStringLength(value, 0, 20),\r\n                                        errorType: \"length\"\r\n                                    },\r\n                                    {\r\n                                        checker: (value) => {\r\n                                            const list = paramNameList.slice();\r\n                                            if (xName.value !== '') list.push(xName.value);\r\n                                            return !list.includes(value);\r\n                                        },\r\n                                        errorType: \"relation\"\r\n                                    }\r\n                                ]}\r\n                                dependency={[xName]}\r\n                            />\r\n                        }\r\n                    />\r\n                </_Inner>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={buttons}\r\n                />\r\n            </_Frame>\r\n        );\r\n    }\r\n\r\n    export const SetParentPosition = (props: {\r\n        node: TreeUtil.ElementNode;\r\n        invalidate: () => void;\r\n    }) => {\r\n\r\n        const { store, setStore } = useContext(GlobalContext);\r\n\r\n        const [xName, setXName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n        const [yName, setYName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n\r\n        const message = 'Please, select property name!';\r\n\r\n        const list = useMemo(() => {\r\n            return props.node.children.map(child => {\r\n                const wrap = child.data as LogicUtil.WrapElement;\r\n                return (wrap.data as LogicUtil.NodeParamItem).name;\r\n            });\r\n        }, []);\r\n\r\n        const buttons: FormUtil.ButtonProps[] = [\r\n            {\r\n                label: 'Cancel',\r\n                callback: () => {\r\n                    store.system.dialog = null;\r\n                    setStore({ ...store });\r\n                }\r\n            },\r\n            {\r\n                label: 'Execute',\r\n                isEnable: FormUtil.checkItems([xName, yName]),\r\n                callback: () => {\r\n                    const paramList = props.node.children.map(child => (child.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamItem);\r\n                    const xParam = paramList.find(param => param.name === xName.value) as LogicUtil.NodeParamItem;\r\n                    const yParam = paramList.find(param => param.name === yName.value) as LogicUtil.NodeParamItem;\r\n                    xParam.formulaItems = ['var'];\r\n                    xParam.values = [{ type: 'self', value: ParamUtil.SelfParamType.POS_X }];\r\n                    yParam.formulaItems = ['var'];\r\n                    yParam.values = [{ type: 'self', value: ParamUtil.SelfParamType.POS_Y }];\r\n\r\n                    store.system.dialog = null;\r\n                    setStore({ ...store });\r\n                    props.invalidate();\r\n                }\r\n            }\r\n        ]\r\n\r\n        return (\r\n            <_Frame width={FRAME_WIDTH} height={FRAME_HEIGHT}>\r\n                <_Inner>\r\n                    <FormUtil.Message\r\n                        message={message}\r\n                        isCenter\r\n                    />\r\n                    <FormUtil.FormRecord\r\n                        titleLabel=\"self_pos_x\"\r\n                        jsx={\r\n                            <FormUtil.Combobox\r\n                                marginLeft={2}\r\n                                checkable={xName}\r\n                                width={COMPONENT_WIDTH}\r\n                                setCheckable={setXName}\r\n                                validates={[\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkRequired(value),\r\n                                        errorType: \"required\"\r\n                                    }\r\n                                ]}\r\n                                headBlank\r\n                                list={list.filter(item => item !== yName.value).map(item => ({\r\n                                    value: item, labelText: item\r\n                                }))}\r\n                            />\r\n                        }\r\n                    />\r\n                    <FormUtil.FormRecord\r\n                        titleLabel=\"self_pos_y\"\r\n                        jsx={\r\n                            <FormUtil.Combobox\r\n                                marginLeft={2}\r\n                                checkable={yName}\r\n                                width={COMPONENT_WIDTH}\r\n                                setCheckable={setYName}\r\n                                validates={[\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkRequired(value),\r\n                                        errorType: \"required\"\r\n                                    }\r\n                                ]}\r\n                                headBlank\r\n                                list={list.filter(item => item !== xName.value).map(item => ({\r\n                                    value: item, labelText: item\r\n                                }))}\r\n                            />\r\n                        }\r\n                    />\r\n                </_Inner>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={buttons}\r\n                />\r\n            </_Frame>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SendTemplateDialog;\r\n\r\nconst _Frame = styled.div<{\r\n    width: number;\r\n    height: number;\r\n}>`\r\n    display: inline-block;\r\n    position: absolute;\r\n    z-index: 11;\r\n    top: calc(50% - ${props => props.height / 2}px);\r\n    left: calc(50% - ${props => props.width / 2}px);\r\n    width: ${props => props.width}px;\r\n    height: ${props => props.height}px;\r\n    background-color: #e7e7e7e2;\r\n    border: 1px solid #8f8f8f;\r\n    border-radius: 4px;\r\n    box-shadow: 10px 15px 15px #0000004b;\r\n`;\r\n\r\nconst _Inner = styled.div<{}>`\r\n    /* text-align: center; */\r\n    display: inline-block;\r\n    width: 100%;\r\n    background-color: #d0e7e718;\r\n`;","import { useContext, useMemo } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\r\nimport LogicTemplateDialog from \"../../dialog/logicTemplateDialog\";\r\nimport SendTemplateDialog from \"../../dialog/sendTemplateDialog\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorSendManager = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n    const { rootData, node, setFocusNode, invalidate } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    const isDepend = () => {\r\n        const conn = (node.parent?.data as LogicUtil.WrapElement).data as LogicUtil.NodeInheritConnector;\r\n        return conn.method === 'depend';\r\n    };\r\n\r\n    // const getSendParamList = (): string[] => {\r\n    //     const connector = (node.parent?.data as LogicUtil.WrapElement).data as LogicUtil.NodeInheritConnector;\r\n    //     const isCreate = connector.method === 'create';\r\n    //     let targetWrap: LogicUtil.WrapElement | null = null;\r\n    //     if (!isCreate) {\r\n    //         const rootNode = rootData.data as LogicUtil.NodeRoot;\r\n    //         const inheritMng = rootNode.logicMng.data as LogicUtil.NodeLogicManager;\r\n    //         const dependItem = inheritMng.defs.find(wrap => {\r\n    //             return (wrap.data as LogicUtil.NodeLogicItem).name === connector.depend;\r\n    //         });\r\n    //         if (dependItem != undefined) targetWrap = dependItem;\r\n    //     } else {\r\n    //         targetWrap = (node.parent?.children[node.parent?.children.length - 1].data as LogicUtil.WrapElement)\r\n    //     }\r\n    //     if (targetWrap != null) {\r\n    //         const argWrap = (targetWrap.data as LogicUtil.NodeLogicItem).mngs[0];\r\n    //         if (argWrap.type === 'argument-mng') {\r\n    //             return (argWrap.data as LogicUtil.NodeArgumentManager).args.map(arg => {\r\n    //                 return (arg.data as LogicUtil.NodeArgumentItem).name;\r\n    //             });\r\n    //         }\r\n    //     }\r\n    //     return [];\r\n    // }\r\n\r\n    // const update = () => {\r\n    //     const sendParamList = getSendParamList();\r\n    //     const curSize = node.children.length;\r\n    //     const params = (wrap.data as LogicUtil.NodeParamManager).params;\r\n    //     // 不要なパラメータを削除\r\n    //     for (let i = curSize - 1; i >= 0; i--) {\r\n    //         const name = (params[i].data as LogicUtil.NodeParamItem).name;\r\n    //         if (!sendParamList.includes(name)) {\r\n    //             node.children.splice(i, 1);\r\n    //             params.splice(i, 1);\r\n    //         }\r\n    //     }\r\n    //     // 必要な存在しないパラメータを追加\r\n    //     const curParamList = params.map(param => {\r\n    //         return (param.data as LogicUtil.NodeParamItem).name;\r\n    //     });\r\n    //     sendParamList.forEach(param => {\r\n    //         if (!curParamList.includes(param)) {\r\n    //             const paramWrap = LogicElementUtil.createParamWrap('send-item',\r\n    //                 { name: param, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] }\r\n    //             );\r\n    //             params.push(paramWrap);\r\n    //             node.children.push(TreeUtil.createNode(paramWrap, node));\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"template\"\r\n            innerJsx={<>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Connect Position',\r\n                            isEnable: !isDepend(),\r\n                            callback: () => {\r\n                                store.system.dialog = <SendTemplateDialog.ConnectParentPosition\r\n                                    node={node}\r\n                                    invalidate={invalidate}\r\n                                />;\r\n                                setStore({ ...store });\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Set Position',\r\n                            callback: () => {\r\n                                store.system.dialog = <SendTemplateDialog.SetParentPosition\r\n                                    node={node}\r\n                                    invalidate={invalidate}\r\n                                />;\r\n                                setStore({ ...store });\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorSendManager;","import { useContext } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorFieldMng = () => {\r\n    const { invalidate, node, setFocusNode } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Add Field',\r\n                        callback: () => {\r\n                            // const newWrap: FactoryUtil.WrapNode = FactoryUtil.createParamWrap('field-item',\r\n                            //     { name: '', formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] }\r\n                            // );\r\n                            const newWrap: LogicUtil.WrapElement = {\r\n                                type: 'field-item',\r\n                                data: null\r\n                            };\r\n                            const newNode = LogicElementUtil.addChild(newWrap, node);\r\n                            setFocusNode(newNode);\r\n                            invalidate();\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorFieldMng;","import { useContext, useEffect, useMemo } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ParamUtil from \"../../util/paramUtil\";\r\n\r\nconst EditorExtendMng = () => {\r\n    const { node, setFocusNode, invalidate } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    const [hasLoopParam, hasInvokeParam] = useMemo(() => {\r\n        const list = node.children.map(el => {\r\n            return ((el.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamItem).name as ParamUtil.ExtendParam;\r\n        });\r\n        return [\r\n            list.includes(ParamUtil.ExtendParamType.LOOP_COUNT),\r\n            list.includes(ParamUtil.ExtendParamType.INVOKE)\r\n        ]\r\n    }, [node]);\r\n\r\n    useEffect(() => {\r\n    }, [node]);\r\n\r\n    /**\r\n     * 追加要素の表示非表示を切り替える\r\n     */\r\n    const toggleElement = (hasNode: boolean, listPos: number, wrapElement: LogicUtil.WrapElement) => {\r\n        if (hasNode) {\r\n            LogicElementUtil.removeChild(node, listPos, 1);\r\n            setFocusNode({ ...node });\r\n            invalidate();\r\n        } else {\r\n            LogicElementUtil.insertChild(wrapElement, node, listPos);\r\n            setFocusNode({ ...node });\r\n            invalidate();\r\n        }\r\n    };\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"element\"\r\n            innerJsx={<>\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Loop'}\r\n                            width={300}\r\n                            isUse={hasLoopParam}\r\n                            callback={() => {\r\n                                toggleElement(hasLoopParam, 0, {\r\n                                    type: 'param-item',\r\n                                    data: {\r\n                                        name: ParamUtil.ExtendParamType.LOOP_COUNT,\r\n                                        formulaItems: ['var'],\r\n                                        values: [{ type: 'direct', value: '1' }]\r\n                                    } as LogicUtil.NodeParamItem\r\n                                });\r\n                            }}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Invoke'}\r\n                            width={300}\r\n                            isUse={hasInvokeParam}\r\n                            callback={() => {\r\n                                toggleElement(hasInvokeParam, hasLoopParam ? 1 : 0, {\r\n                                    type: 'condition-item',\r\n                                    data: {\r\n                                        name: ParamUtil.ExtendParamType.INVOKE,\r\n                                        formulaItems: ['var', '=', 'var'],\r\n                                        values: [{ type: 'direct', value: '0' }, { type: 'direct', value: '0' }]\r\n                                    } as LogicUtil.NodeParamItem\r\n                                });\r\n                            }}\r\n                        />\r\n                    }\r\n                />\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorExtendMng;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ModifyOperations from \"../common/modifyOperations\";\r\nimport LogicTemplateDialog from \"../../dialog/logicTemplateDialog\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\n\r\nconst EditorSeedItem = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n    const { removeSelf, node, rootData, invalidate, setModify, isModify } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    const [name, setName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [origin, setOrigin] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n\r\n    const mappingForm = () => {\r\n        const param = wrap.data as LogicUtil.NodeSeedItem;\r\n        setName({ ...name, value: param.name });\r\n        setOrigin({ ...origin, value: param.entry });\r\n    };\r\n\r\n    /** 既存のシード名を取得（重複チェックに使用） */\r\n    const seedNameList = useMemo(() => {\r\n        const mng = (node.parent?.data as LogicUtil.WrapElement).data;\r\n        return LogicElementUtil.getSeedNameList(mng);\r\n    }, [node]);\r\n\r\n    useEffect(() => {\r\n        if (wrap.data == null) {\r\n            setModify(true);\r\n        } else {\r\n            mappingForm();\r\n        }\r\n    }, [node]);\r\n\r\n    // 引用するロジックリスト\r\n    const logicNameList = useMemo((): string[] => {\r\n        const rootNode = rootData.data as LogicUtil.NodeRoot;\r\n        const logicMng = rootNode.logicMng.data as LogicUtil.NodeLogicManager;\r\n        return logicMng.defs.map(wrap => {\r\n            return (wrap.data as LogicUtil.NodeLogicItem).name;\r\n        });\r\n    }, [node]);\r\n\r\n    const getSendParamList = (): string[] => {\r\n        const seed = wrap.data as LogicUtil.NodeSeedItem;\r\n        const logicMng = (rootData.data as LogicUtil.NodeRoot).logicMng.data as LogicUtil.NodeLogicManager;\r\n        const dependItem = logicMng.defs.find(wrap => {\r\n            return (wrap.data as LogicUtil.NodeLogicItem).name === seed.entry;\r\n        });\r\n        if (dependItem != undefined) {\r\n            const logicWrap = dependItem;\r\n            const argWrap = (logicWrap.data as LogicUtil.NodeLogicItem).mngs[0];\r\n            if (argWrap.type === 'argument-mng') {\r\n                return (argWrap.data as LogicUtil.NodeArgumentManager).args.map(arg => {\r\n                    return (arg.data as LogicUtil.NodeArgumentItem).name;\r\n                });\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    const initSendParams = () => {\r\n        const sendParamList = getSendParamList();\r\n        const sendNode = LogicElementUtil.getInnerNode(node, 'interface-mng', 'seedsend-mng') as TreeUtil.ElementNode;\r\n        const params = ((sendNode.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager).params;\r\n        // 必要な存在しないパラメータを追加\r\n        const curParamList = params.map(param => {\r\n            return (param.data as LogicUtil.NodeParamItem).name;\r\n        });\r\n        sendParamList.forEach(param => {\r\n            if (!curParamList.includes(param)) {\r\n                const paramWrap = LogicElementUtil.createParamWrap('seedsend-item',\r\n                    { name: param, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] }\r\n                );\r\n                params.push(paramWrap);\r\n            }\r\n        });\r\n        LogicElementUtil.syncTreeElementFromWrap(sendNode);\r\n    }\r\n\r\n    const getDefaultSeedMngs = (): LogicUtil.WrapElement[] => {\r\n        return [\r\n            {\r\n                type: 'interface-mng',\r\n                data: {\r\n                    mngs: [\r\n                        {\r\n                            type: 'seedarg-mng',\r\n                            data: {\r\n                                args: []\r\n                            } as LogicUtil.NodeSeedArgManager\r\n                        },\r\n                        {\r\n                            type: 'seedsend-mng',\r\n                            data: {\r\n                                params: []\r\n                            } as LogicUtil.NodeSeedSendManager\r\n                        },\r\n                    ]\r\n                } as LogicUtil.NodeInterfaceMng\r\n            },\r\n            {\r\n                type: 'thumbnail-mng',\r\n                data: {\r\n                    items: []\r\n                } as LogicUtil.NodeThumnailManager\r\n            },\r\n            {\r\n                type: 'sample-mng',\r\n                data: {\r\n                    samples: []\r\n                } as LogicUtil.NodeSampleManager\r\n            }\r\n        ];\r\n    }\r\n\r\n    return (<>\r\n        <ModifyOperations.Component\r\n            mappingForm={mappingForm}\r\n            checkableFields={[name, origin]}\r\n            firstRegist={() => {\r\n                const element: LogicUtil.NodeSeedItem = {\r\n                    name: name.value,\r\n                    entry: origin.value,\r\n                    mngs: getDefaultSeedMngs()\r\n                };\r\n                wrap.data = element;\r\n\r\n                LogicElementUtil.syncTreeElementFromWrap(node);\r\n                // 参照しているロジックの引数をSendに設定\r\n                initSendParams();\r\n                invalidate();\r\n                setStore({ ...store });\r\n            }}\r\n            modifyRegist={() => {\r\n                const param = wrap.data as LogicUtil.NodeLogicItem;\r\n                param.name = name.value;\r\n                wrap.data = param;\r\n            }}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"param\"\r\n            innerJsx={<>\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Name\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={200}\r\n                            isReadOnly={!isModify}\r\n                            checkable={name}\r\n                            setCheckable={setName}\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkStringLength(value, 1, 16),\r\n                                    errorType: \"length\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => LogicUtil.checkFieldName(value),\r\n                                    errorType: \"value\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => {\r\n                                        const list = seedNameList.filter(name => {\r\n                                            // 自分自身のロジック名を除外\r\n                                            if (wrap.data != null) {\r\n                                                return (wrap.data as LogicUtil.NodeLogicItem).name !== name;\r\n                                            }\r\n                                            return true;\r\n                                        });\r\n                                        return !list.includes(value);\r\n                                    },\r\n                                    errorType: \"relation\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Entry\"\r\n                    jsx={\r\n                        <FormUtil.Combobox\r\n                            marginLeft={2}\r\n                            checkable={origin}\r\n                            width={270}\r\n                            isReadOnly={!isModify}\r\n                            setCheckable={setOrigin}\r\n                            list={logicNameList.map(item => {\r\n                                return { value: item, labelText: item };\r\n                            })}\r\n                            headBlank\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n            </>}\r\n        />\r\n        {/* <FormUtil.BorderPanel\r\n            title=\"element\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={<FormUtil.Switch\r\n                        label={'Argument'}\r\n                        width={300}\r\n                        isUse={false}\r\n                        callback={() => {\r\n                        }}\r\n                    />}\r\n                />\r\n            </>}\r\n        /> */}\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Delete',\r\n                            callback: () => {\r\n                                removeSelf();\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                {/* 並び順入れ替えボタン */}\r\n                {LogicElementUtil.getSwapButtons(node, invalidate)}\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorSeedItem;","import { useContext } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport { FactoryTreeContext as LogicTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorThumbnailMng = () => {\r\n    const { node, setFocusNode, invalidate } = useContext(LogicTreeContext);\r\n    const mng = (node.data as LogicUtil.WrapElement).data as LogicUtil.NodeThumnailManager;\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Add Thumbnail',\r\n                        callback: () => {\r\n                            const newWrap: LogicUtil.WrapElement = {\r\n                                type: 'thumbnail-item',\r\n                                data: null\r\n                            }\r\n                            const newNode = LogicElementUtil.addChild(newWrap, node);\r\n                            setFocusNode(newNode);\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorThumbnailMng;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport CanvasUtil from \"../../../../../utils/canvasUtil\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport Particle from \"../../../../graphic/particle\";\r\nimport PreviewUtil from \"../../../preview/previewUtil\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ModifyOperations from \"../common/modifyOperations\";\r\n\r\nconst WND_SIZE = 100;\r\n\r\nconst EditorThumbnailItem = () => {\r\n    const { rootData, node, removeSelf, setModify, isModify, invalidate } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n    const data = wrap.data as LogicUtil.NodeThumbnailItem;\r\n\r\n\r\n    const seedWrap = node.parent?.parent?.data as LogicUtil.WrapElement;\r\n    const sampleMng = LogicElementUtil.getInnerWrap(seedWrap, 'sample-mng')?.data as LogicUtil.NodeSampleManager;\r\n    const samples = sampleMng.samples.map(wrap => wrap.data as LogicUtil.NodeSampleItem);\r\n\r\n    const [name, setName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [frame, setFrame] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [urls, setUrls] = useState<string[]>([]);\r\n\r\n    /** 既存のパラメータ名を取得（重複チェックに使用） */\r\n    const reservedList = useMemo(() => {\r\n        const owner = (node.parent?.parent?.data as LogicUtil.WrapElement).data;\r\n        return LogicElementUtil.getParamNameList(owner);\r\n    }, [node]);\r\n\r\n    const mappingForm = () => {\r\n        const param = wrap.data as LogicUtil.NodeThumbnailItem;\r\n        setName({ ...name, value: param.name });\r\n        setFrame({ ...frame, value: param.frame.toString() });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (wrap.data == null) {\r\n            setModify(true);\r\n        } else {\r\n            mappingForm();\r\n            setTimeout(() => {\r\n                const urls: string[] = [];\r\n                samples.forEach((sample, i) => {\r\n                    urls.push(getThumbnailURL(data.frame, i));\r\n                });\r\n                setUrls(urls);\r\n            }, 1);\r\n        }\r\n    }, [node]);\r\n\r\n    const getSeedValueMap = (sampleNo: number): PreviewUtil.ValueMap[] => {\r\n        const argMng = LogicElementUtil.getInnerWrap(seedWrap, 'interface-mng', 'seedarg-mng')?.data as LogicUtil.NodeSeedArgManager;\r\n        const sendMng = LogicElementUtil.getInnerWrap(seedWrap, 'interface-mng', 'seedsend-mng')?.data as LogicUtil.NodeSeedSendManager;\r\n\r\n        const argMap: PreviewUtil.ValueMap[] = argMng.args.map((arg, i) => {\r\n            const name = (arg.data as LogicUtil.NodeSeedArgItem).name;\r\n            const value = samples[sampleNo].values[i];\r\n            return { name, value }\r\n        });\r\n        const sendParams = sendMng.params.map(send => send.data as LogicUtil.NodeParamItem);\r\n        return sendParams.map(item => {\r\n            return { name: item.name, value: PreviewUtil.convertParamsToValue(item.name, sendParams, argMap) ?? 0 }\r\n        });\r\n    }\r\n\r\n    const getThumbnailURL = (targetFrame: number, sampleNo: number) => {\r\n        console.log('create start!');\r\n        const owner: Particle.Instance[] = [];\r\n\r\n        let frameCnt = 0;\r\n        do {\r\n            if (frameCnt === 0) {\r\n                const seed = (node.parent?.parent?.data as LogicUtil.WrapElement).data as LogicUtil.NodeSeedItem;\r\n                const logicManager = (rootData.data as LogicUtil.NodeRoot).logicMng.data as LogicUtil.NodeLogicManager;\r\n                const logic = logicManager.defs.find(logic => (logic.data as LogicUtil.NodeLogicItem).name === seed.entry);\r\n                if (logic == undefined) break;\r\n\r\n                const sendValueMapList = getSeedValueMap(sampleNo);\r\n                owner.push(new Particle.Instance(\r\n                    PreviewUtil.buildLogicProps(owner, logic.data, rootData, sendValueMapList))\r\n                );\r\n            }\r\n\r\n            if (frameCnt === targetFrame) {\r\n                return CanvasUtil.createURL(550, 550, (ctx) => {\r\n\r\n                    // パーティクルの描画\r\n                    owner.forEach(par => {\r\n                        par.draw(ctx);\r\n                    });\r\n                    ctx.save();\r\n                });\r\n            }\r\n\r\n            // パーティクルの更新\r\n            for (let i = owner.length - 1; i >= 0; i--) {\r\n                const particle = owner[i];\r\n\r\n                particle.update();\r\n            }\r\n\r\n            // 死滅したパーティクルの削除\r\n            for (let i = owner.length - 1; i >= 0; i--) {\r\n                const particle = owner[i];\r\n                if (!particle.isLive) {\r\n                    owner.splice(i, 1);\r\n                }\r\n            }\r\n\r\n            if (frameCnt > 500 || owner.length > 3000) break;\r\n            frameCnt++;\r\n        } while (owner.length > 0);\r\n        return '';\r\n    }\r\n\r\n    const pictureJsxList = useMemo(() => {\r\n        const sampleMng = LogicElementUtil.getInnerWrap((node.parent?.parent as TreeUtil.ElementNode).data, 'sample-mng')?.data as LogicUtil.NodeSampleManager;\r\n        return sampleMng.samples.map((wrap, i) => {\r\n            const sample = wrap.data as LogicUtil.NodeSampleItem;\r\n\r\n            const url = urls[i];\r\n            const imgJsx = url == undefined ? <></> : <_IMG src={urls[i]} />;\r\n            return (\r\n                <_SampleDiv key={i}>-\r\n                    <_SampleName>{sample.name}</_SampleName>\r\n                    <_CanvasDiv>\r\n                        {imgJsx}\r\n                    </_CanvasDiv>\r\n                </_SampleDiv>\r\n            );\r\n        });\r\n    }, [node, urls]);\r\n\r\n    return (<>\r\n        <ModifyOperations.Component\r\n            mappingForm={mappingForm}\r\n            checkableFields={[name, frame]}\r\n            firstRegist={() => {\r\n                const param: LogicUtil.NodeThumbnailItem = {\r\n                    name: name.value,\r\n                    frame: Number(frame.value),\r\n                };\r\n                wrap.data = param;\r\n            }}\r\n            modifyRegist={() => {\r\n                const param = wrap.data as LogicUtil.NodeThumbnailItem;\r\n                param.name = name.value;\r\n                param.frame = Number(frame.value);\r\n                wrap.data = param;\r\n            }}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"param\"\r\n            innerJsx={<>\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Name\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={200}\r\n                            isReadOnly={!isModify}\r\n                            checkable={name}\r\n                            setCheckable={setName}\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkStringLength(value, 1, 16),\r\n                                    errorType: \"length\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => LogicUtil.checkFieldName(value),\r\n                                    errorType: \"value\"\r\n                                },\r\n                                // {\r\n                                //     checker: (value) => {\r\n                                //         const list = logicNameList.filter(name => {\r\n                                //             // 自分自身のロジック名を除外\r\n                                //             if (wrap.data != null) {\r\n                                //                 return (wrap.data as LogicUtil.NodeLogicItem).name !== name;\r\n                                //             }\r\n                                //             return true;\r\n                                //         });\r\n                                //         return !list.includes(value);\r\n                                //     },\r\n                                //     errorType: \"relation\"\r\n                                // }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Frame\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={100}\r\n                            isReadOnly={!isModify}\r\n                            isNumber\r\n                            checkable={frame}\r\n                            setCheckable={setFrame}\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n            </>}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"preview\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                {pictureJsxList}\r\n            </>}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Delete',\r\n                            isEnable: !isModify,\r\n                            callback: () => {\r\n                                removeSelf();\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                {/* 並び順入れ替えボタン */}\r\n                {LogicElementUtil.getSwapButtons(node, invalidate)}\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorThumbnailItem;\r\n\r\nconst _SampleDiv = styled.div<{}>`\r\n    display: inline-block;\r\n    /* width: ${WND_SIZE}px;\r\n    height: ${WND_SIZE}px; */\r\n    margin: 0 0 0 5px;\r\n`;\r\nconst _SampleName = styled.div<{}>`\r\n    display: block;\r\n    color: #09056c;\r\n    font-size: 14px;\r\n    font-weight: 600;\r\n    font-style: italic;\r\n    background-color: #ffffff5e;\r\n`;\r\nconst _CanvasDiv = styled.div<{}>`\r\n    display: inline-block;\r\n    width: ${WND_SIZE}px;\r\n    height: ${WND_SIZE}px;\r\n    background-color: #020202df;\r\n    border: solid 2px #ca0000;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nconst _IMG = styled.img`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n`;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ModifyOperations from \"../common/modifyOperations\";\r\nimport LogicTemplateDialog from \"../../dialog/logicTemplateDialog\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\n\r\nconst EditorSampleItem = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n    const { removeSelf, node, rootData, invalidate, setModify, isModify } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    const [name, setName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [paramForms, setParamForms] = useState<FormUtil.CheckableValue[]>([]);\r\n\r\n    const mappingForm = () => {\r\n        const param = wrap.data as LogicUtil.NodeSampleItem;\r\n        setName({ ...name, value: param.name });\r\n        setParamForms(param.values.map(value => {\r\n            return { value: value.toString(), errors: [] };\r\n        }));\r\n    };\r\n\r\n    /** 既存のサンプル名を取得（重複チェックに使用） */\r\n    // const sampleNameList = useMemo(() => {\r\n    //     const mng = (node.parent?.data as LogicUtil.WrapElement).data;\r\n    //     return LogicElementUtil.getSeedNameList(mng);\r\n    // }, [node]);\r\n\r\n    const argInfoList: LogicUtil.NodeSeedArgItem[] = useMemo(() => {\r\n        const argMng = LogicElementUtil.getInnerWrap((node.parent?.parent as TreeUtil.ElementNode).data, 'interface-mng', 'seedarg-mng');\r\n        if (argMng != null) {\r\n            return (argMng.data as LogicUtil.NodeSeedArgManager).\r\n                args.map(arg => {\r\n                    return arg.data as LogicUtil.NodeSeedArgItem;\r\n                });\r\n        } else throw new Error('argMng is undefined.');\r\n    }, [node]);\r\n\r\n    useEffect(() => {\r\n        if (wrap.data == null) {\r\n            setParamForms(argInfoList.map(arg => {\r\n                let defval = '';\r\n                if (arg.defval != undefined) defval = arg.defval.toString();\r\n                return { value: defval, errors: [] };\r\n            }));\r\n            setModify(true);\r\n        } else {\r\n            mappingForm();\r\n        }\r\n    }, [node]);\r\n\r\n    const formList = useMemo(() => {\r\n        return paramForms.map((paramForm, i) => {\r\n            const arg = argInfoList[i];\r\n            return <FormUtil.FormRecord key={i}\r\n                titleLabel={arg.name}\r\n                jsx={\r\n                    <FormUtil.TextField\r\n                        width={150}\r\n                        isReadOnly={!isModify}\r\n                        checkable={paramForm}\r\n                        setCheckable={(checkable) => {\r\n                            paramForms[i] = checkable;\r\n                            setParamForms(paramForms.slice());\r\n                        }}\r\n                        isNumber\r\n                        step={arg.step}\r\n                        validates={[\r\n                            {\r\n                                checker: (value) => ValidateUtil.checkRequired(value),\r\n                                errorType: \"required\"\r\n                            },\r\n                            {\r\n                                checker: (value) => ValidateUtil.checkNumberRange(value, arg.min, arg.max),\r\n                                errorType: \"value\"\r\n                            },\r\n                        ]}\r\n                    />\r\n                }\r\n            />\r\n\r\n        });\r\n    }, [paramForms, isModify]);\r\n\r\n    return (<>\r\n        <ModifyOperations.Component\r\n            mappingForm={mappingForm}\r\n            checkableFields={[name].concat(paramForms)}\r\n            firstRegist={() => {\r\n                const element: LogicUtil.NodeSampleItem = {\r\n                    name: name.value,\r\n                    values: []\r\n                };\r\n                paramForms.forEach((form, i) => {\r\n                    element.values[i] = Number(form.value);\r\n                });\r\n                wrap.data = element;\r\n\r\n                invalidate();\r\n                setStore({ ...store });\r\n            }}\r\n            modifyRegist={() => {\r\n                const param = wrap.data as LogicUtil.NodeSampleItem;\r\n                param.name = name.value;\r\n                paramForms.forEach((form, i) => {\r\n                    param.values[i] = Number(form.value);\r\n                });\r\n                wrap.data = param;\r\n            }}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"param\"\r\n            innerJsx={<>\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Name\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={250}\r\n                            isReadOnly={!isModify}\r\n                            checkable={name}\r\n                            setCheckable={setName}\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkStringLength(value, 1, 16),\r\n                                    errorType: \"length\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => LogicUtil.checkFieldName(value),\r\n                                    errorType: \"value\"\r\n                                },\r\n                                // {\r\n                                //     checker: (value) => {\r\n                                //         const list = sampleNameList.filter(name => {\r\n                                //             // 自分自身のロジック名を除外\r\n                                //             if (wrap.data != null) {\r\n                                //                 return (wrap.data as LogicUtil.NodeLogicItem).name !== name;\r\n                                //             }\r\n                                //             return true;\r\n                                //         });\r\n                                //         return !list.includes(value);\r\n                                //     },\r\n                                //     errorType: \"relation\"\r\n                                // }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n                {formList}\r\n            </>}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Delete',\r\n                            callback: () => {\r\n                                removeSelf();\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                {/* 並び順入れ替えボタン */}\r\n                {LogicElementUtil.getSwapButtons(node, invalidate)}\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorSampleItem;","import { useContext } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorSampleMng = () => {\r\n    const {node, setFocusNode} = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Add Sample',\r\n                        callback: () => {\r\n                            const itemWrap: LogicUtil.WrapElement = {\r\n                                type: 'sample-item',\r\n                                data: null\r\n                            };\r\n                            (wrap.data as LogicUtil.NodeSampleManager).samples.push(itemWrap);\r\n                            const newNode = TreeUtil.createNode(itemWrap, node);\r\n                            node.children.push(newNode);\r\n                            setFocusNode(newNode);\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorSampleMng;","import { useContext, useMemo } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\r\nimport LogicTemplateDialog from \"../../dialog/logicTemplateDialog\";\r\nimport SendTemplateDialog from \"../../dialog/sendTemplateDialog\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorInterfaceManager = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n    const { rootData, node, setFocusNode, invalidate } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Initialize Params',\r\n                        callback: () => {\r\n                            invalidate();\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorInterfaceManager;","import { useContext } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorSeedArgMng = () => {\r\n    const {node, setFocusNode} = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Add Argument',\r\n                        callback: () => {\r\n                            const itemWrap: LogicUtil.WrapElement = {\r\n                                type: 'seedarg-item',\r\n                                data: null\r\n                            };\r\n                            (wrap.data as LogicUtil.NodeSeedArgManager).args.push(itemWrap);\r\n                            const newNode = TreeUtil.createNode(itemWrap, node);\r\n                            node.children.push(newNode);\r\n                            setFocusNode(newNode);\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorSeedArgMng;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ModifyOperations from \"../common/modifyOperations\";\r\n\r\nconst EditorSeedArgItem = () => {\r\n    const { node, removeSelf, setModify, isModify, invalidate } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    const [name, setName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [min, setMin] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [max, setMax] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [step, setStep] = useState<FormUtil.CheckableValue>({ value: '1', errors: [] });\r\n    const [defval, setDefval] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    // const [argType, setArgType] = useState<FormUtil.CheckableValue>({ value: 'number', errors: [] });\r\n\r\n    /** 既存のパラメータ名を取得（重複チェックに使用） */\r\n    const reservedList = useMemo(() => {\r\n        const owner = (node.parent?.parent?.data as LogicUtil.WrapElement).data;\r\n        return LogicElementUtil.getParamNameList(owner);\r\n    }, [node]);\r\n\r\n    const mappingForm = () => {\r\n        const param = wrap.data as LogicUtil.NodeSeedArgItem;\r\n        setName({ ...name, value: param.name });\r\n        setMin({ ...min, value: param.min.toString() });\r\n        setMax({ ...max, value: param.max.toString() });\r\n        setStep({ ...step, value: param.step.toString() });\r\n        setDefval({ ...defval, value: param.defval == undefined ? '' : param.defval.toString() });\r\n        // setArgType({ ...argType, value: param.valueType });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (wrap.data == null) {\r\n            setModify(true);\r\n        } else {\r\n            mappingForm();\r\n        }\r\n    }, [node]);\r\n\r\n    return (<>\r\n        <ModifyOperations.Component\r\n            mappingForm={mappingForm}\r\n            checkableFields={[name, min, max, step, defval]}\r\n            firstRegist={() => {\r\n                const param: LogicUtil.NodeSeedArgItem = {\r\n                    name: name.value,\r\n                    min: Number(min.value),\r\n                    max: Number(max.value),\r\n                    step: Number(step.value),\r\n                    defval: Number(defval.value === '' ? undefined : defval.value),\r\n                    // valueType: argType.value as LogicUtil.ArgumentType\r\n                };\r\n                wrap.data = param;\r\n                // LogicElementUtil.syncArgumentAdd(node.parent?.parent as TreeUtil.ElementNode, name.value);\r\n            }}\r\n            modifyRegist={() => {\r\n                const param = wrap.data as LogicUtil.NodeSeedArgItem;\r\n                const prevName = param.name;\r\n                param.name = name.value;\r\n                param.min = Number(min.value);\r\n                param.max = Number(max.value);\r\n                param.step = Number(step.value);\r\n                param.defval = Number(defval.value === '' ? undefined : defval.value);\r\n                // param.valueType = argType.value as LogicUtil.ArgumentType;\r\n                wrap.data = param;\r\n\r\n                if (prevName !== name.value) {\r\n                    // LogicElementUtil.syncArgumentName(node.parent?.parent as TreeUtil.ElementNode, prevName, name.value);\r\n                }\r\n            }}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"param\"\r\n            innerJsx={<>\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Name\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={200}\r\n                            isReadOnly={!isModify}\r\n                            checkable={name}\r\n                            setCheckable={setName}\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkStringLength(value, 1, 16),\r\n                                    errorType: \"length\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => LogicUtil.checkFieldName(value),\r\n                                    errorType: \"value\"\r\n                                },\r\n                                // {\r\n                                //     checker: (value) => {\r\n                                //         const list = reservedList.filter(name => {\r\n                                //             // 自分自身のパラメータ名を除外\r\n                                //             if (wrap.data != null) {\r\n                                //                 return (wrap.data as LogicUtil.NodeArgumentItem).name !== name;\r\n                                //             }\r\n                                //             return true;\r\n                                //         });\r\n                                //         return !list.includes(value);\r\n                                //     },\r\n                                //     errorType: \"relation\"\r\n                                // }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Min\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={100}\r\n                            isReadOnly={!isModify}\r\n                            checkable={min}\r\n                            setCheckable={setMin}\r\n                            isNumber\r\n                            dependency={[max]}\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => Number(value) < Number(max.value),\r\n                                    errorType: \"relation\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Max\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={100}\r\n                            isReadOnly={!isModify}\r\n                            checkable={max}\r\n                            setCheckable={setMax}\r\n                            isNumber\r\n                            dependency={[min]}\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => Number(value) > Number(min.value),\r\n                                    errorType: \"relation\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Step\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={100}\r\n                            isReadOnly={!isModify}\r\n                            checkable={step}\r\n                            setCheckable={setStep}\r\n                            isNumber\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Default\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={100}\r\n                            isReadOnly={!isModify}\r\n                            checkable={defval}\r\n                            setCheckable={setDefval}\r\n                            isNumber\r\n                        />\r\n                    }\r\n                />\r\n                {/* <FormUtil.FormRecord\r\n                    titleLabel=\"Type\"\r\n                    jsx={\r\n                        <FormUtil.Combobox\r\n                            checkable={argType}\r\n                            setCheckable={setArgType}\r\n                            list={LogicUtil.ArgTypes.map(type => {\r\n                                return { value: type, labelText: type, isDisabled: type === 'color' }\r\n                            })}\r\n                            headBlank\r\n                            width={200}\r\n                            isReadOnly={!isModify}\r\n                            validates={\r\n                                [\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkRequired(value),\r\n                                        errorType: \"required\"\r\n                                    }\r\n                                ]\r\n                            }\r\n                        />\r\n                    }\r\n                /> */}\r\n            </>}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Delete',\r\n                            isEnable: !isModify,\r\n                            callback: () => {\r\n                                // LogicElementUtil.syncArgumentDel(node.parent?.parent as TreeUtil.ElementNode, name.value);\r\n                                removeSelf();\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                {/* 並び順入れ替えボタン */}\r\n                {LogicElementUtil.getSwapButtons(node, invalidate)}\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorSeedArgItem;","import { useContext, useMemo } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\r\nimport LogicTemplateDialog from \"../../dialog/logicTemplateDialog\";\r\nimport SendTemplateDialog from \"../../dialog/sendTemplateDialog\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorSeedSendMng = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n    const { rootData, node, setFocusNode, invalidate } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    // const getSendParamList = (): string[] => {\r\n    //     const connector = (node.parent?.data as LogicUtil.WrapElement).data as LogicUtil.NodeInheritConnector;\r\n    //     const isCreate = connector.method === 'create';\r\n    //     let targetWrap: LogicUtil.WrapElement | null = null;\r\n    //     if (!isCreate) {\r\n    //         const rootNode = rootData.data as LogicUtil.NodeRoot;\r\n    //         const inheritMng = rootNode.logicMng.data as LogicUtil.NodeLogicManager;\r\n    //         const dependItem = inheritMng.defs.find(wrap => {\r\n    //             return (wrap.data as LogicUtil.NodeLogicItem).name === connector.depend;\r\n    //         });\r\n    //         if (dependItem != undefined) targetWrap = dependItem;\r\n    //     } else {\r\n    //         targetWrap = (node.parent?.children[node.parent?.children.length - 1].data as LogicUtil.WrapElement)\r\n    //     }\r\n    //     if (targetWrap != null) {\r\n    //         const argWrap = (targetWrap.data as LogicUtil.NodeLogicItem).mngs[0];\r\n    //         if (argWrap.type === 'argument-mng') {\r\n    //             return (argWrap.data as LogicUtil.NodeArgumentManager).args.map(arg => {\r\n    //                 return (arg.data as LogicUtil.NodeArgumentItem).name;\r\n    //             });\r\n    //         }\r\n    //     }\r\n    //     return [];\r\n    // }\r\n\r\n    // const update = () => {\r\n    //     const sendParamList = getSendParamList();\r\n    //     const curSize = node.children.length;\r\n    //     const params = (wrap.data as LogicUtil.NodeParamManager).params;\r\n    //     // 不要なパラメータを削除\r\n    //     for (let i = curSize - 1; i >= 0; i--) {\r\n    //         const name = (params[i].data as LogicUtil.NodeParamItem).name;\r\n    //         if (!sendParamList.includes(name)) {\r\n    //             node.children.splice(i, 1);\r\n    //             params.splice(i, 1);\r\n    //         }\r\n    //     }\r\n    //     // 必要な存在しないパラメータを追加\r\n    //     const curParamList = params.map(param => {\r\n    //         return (param.data as LogicUtil.NodeParamItem).name;\r\n    //     });\r\n    //     sendParamList.forEach(param => {\r\n    //         if (!curParamList.includes(param)) {\r\n    //             const paramWrap = LogicElementUtil.createParamWrap('send-item',\r\n    //                 { name: param, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] }\r\n    //             );\r\n    //             params.push(paramWrap);\r\n    //             node.children.push(TreeUtil.createNode(paramWrap, node));\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n    return (<>\r\n    </>);\r\n}\r\n\r\nexport default EditorSeedSendMng;","import styled, { css } from \"styled-components\";\r\nimport Styles from \"../../../../base/design/styles\";\r\nimport TreeUtil from \"../../../../utils/treeUtil\";\r\nimport FactDetArgumentMng from \"../detail/logic/editorArgumentMng\";\r\nimport EditorArgumentItem from \"../detail/logic/editorArgumentItem\";\r\nimport FactDetSeedMng from \"../detail/seed/editorSeedMng\";\r\nimport EditorLogicMng from \"../detail/logic/editorLogicMng\";\r\nimport EditorLogicItem from \"../detail/logic/editorLogicItem\";\r\nimport EditorParamItem from \"../detail/logic/editorParamItem\";\r\nimport FactDetBehiviorMng from \"../detail/logic/editorBehiviorMng\";\r\nimport EditorVisualMng from \"../detail/logic/editorVisualMng\";\r\nimport ValidateUtil from \"../../../../utils/form/validateUtil\";\r\nimport EditorInheritConnMng from \"../detail/logic/editorInheritConnMng\";\r\nimport EditorInheritConnector from \"../detail/logic/editorInheritConnector\";\r\nimport EditorSendManager from \"../detail/logic/editorSendManager\";\r\nimport EditorFieldMng from \"../detail/logic/editorFieldMng\";\r\nimport EditorExtendMng from \"../detail/logic/editorExtendMng\";\r\nimport EditorSeedItem from \"../detail/seed/editorSeedItem\";\r\nimport FormUtil from \"../../../../utils/form/formUtiil\";\r\nimport LogicElementUtil from \"./logicElementUtil\";\r\nimport EditorThumbnailMng from \"../detail/seed/editorThumbnailMng\";\r\nimport EditorThumbnailItem from \"../detail/seed/editorThumbnailItem\";\r\nimport EditorSampleItem from \"../detail/seed/editorSampleItem\";\r\nimport EditorSampleMng from \"../detail/seed/editorSampleMng\";\r\nimport EditorInterfaceManager from \"../detail/seed/editorInterfaceManager\";\r\nimport EditorSeedArgMng from \"../detail/seed/editorSeedArgMng\";\r\nimport EditorSeedArgItem from \"../detail/seed/editorSeedArgItem\";\r\nimport EditorSeedSendMng from \"../detail/seed/editorSeedSendMng\";\r\n\r\nnamespace LogicUtil {\r\n\r\n    export type DetailArgs = {\r\n        rootData: LogicUtil.WrapElement;\r\n        node: TreeUtil.ElementNode;\r\n        setFocusNode: (node: TreeUtil.ElementNode) => void;\r\n        invalidate: () => void;\r\n        isModify: boolean;\r\n        setModify: (isModify: boolean) => void;\r\n        setRootData: React.Dispatch<React.SetStateAction<WrapElement>>;\r\n        removeSelf: () => void;\r\n    }\r\n\r\n    /**\r\n     * 変数名チェック\r\n     * @param str 検証する文字列\r\n     * @returns 判定結果\r\n     */\r\n    export const checkFieldName = (str: string) => {\r\n        // 1文字目が数値でないこと\r\n        const isNoHeadNumber = !['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].\r\n            includes(str.substring(0, 1));\r\n        const list = '0123456789abcdefghijklmnopqrstuvwxyz_';\r\n        return isNoHeadNumber && ValidateUtil.checkIncludesChars(str, list);\r\n    }\r\n\r\n    export type NodeType =\r\n        'root' |\r\n        'seed-mng' |\r\n        'logic-mng' |\r\n        'seed-item' |\r\n        'logic-item' |\r\n        'argument-mng' |\r\n        'argument-item' |\r\n        'field-mng' |\r\n        'field-item' |\r\n        'visual-mng' |\r\n        'behavior-mng' |\r\n        'inhfld-mng' |\r\n        'extend-mng' |\r\n        'inherit-mng' |\r\n        'connector' |\r\n        'inherit-logic' |\r\n        'send-mng' |\r\n        'send-item' |\r\n        'param-item' |\r\n        'condition-item' |\r\n        'interface-mng' |\r\n        'sample-mng' |\r\n        'sample-item' |\r\n        'thumbnail-mng' |\r\n        'thumbnail-mng' |\r\n        'thumbnail-item' |\r\n        'seedarg-mng' |\r\n        'seedsend-mng' |\r\n        'seedarg-item' |\r\n        'seedsend-item'\r\n        ;\r\n\r\n    export const ArgTypes = ['number', 'color'] as const;\r\n    export type ArgumentType = typeof ArgTypes[number];\r\n\r\n\r\n    export const ParamInputTypes = ['direct', 'constant', 'argument', 'self', 'field'] as const;\r\n    export type ParamInputType = typeof ParamInputTypes[number];\r\n\r\n    export type ParamProps = {\r\n        type: ParamInputType;\r\n        value: string;\r\n    }\r\n\r\n    export type WrapElement = {\r\n        type: NodeType;\r\n        data: any;\r\n    }\r\n\r\n    export type NodeRoot = {\r\n        seedMng: WrapElement;\r\n        logicMng: WrapElement;\r\n    }\r\n    export type NodeSeedManager = {\r\n        defs: WrapElement[];\r\n    }\r\n    export type NodeLogicManager = {\r\n        defs: WrapElement[];\r\n    }\r\n    export type NodeLogicItem = {\r\n        name: string;\r\n        mngs: WrapElement[];\r\n    }\r\n    export type NodeInterfaceMng = {\r\n        mngs: WrapElement[];\r\n    }\r\n    export type NodeInheritItem = {\r\n        mngs: WrapElement[];\r\n    }\r\n    export type NodeParamManager = {\r\n        params: WrapElement[];\r\n    }\r\n    export type NodeParamItem = {\r\n        name: string;\r\n        formulaItems: string[];\r\n        values: ParamProps[];\r\n    }\r\n\r\n    export type NodeArgumentItem = {\r\n        name: string;\r\n        valueType: ArgumentType;\r\n    }\r\n    export type NodeThumbnailItem = {\r\n        name: string;\r\n        frame: number;\r\n    }\r\n    export type NodeArgumentManager = {\r\n        args: WrapElement[];\r\n    }\r\n    export type NodeFieldManager = {\r\n        fields: WrapElement[];\r\n    }\r\n    export type NodeSampleManager = {\r\n        samples: WrapElement[];\r\n    }\r\n    export type NodeSampleItem = {\r\n        name: string;\r\n        values: number[];\r\n    }\r\n\r\n    // export type NodeExtendManager = {\r\n    //     mngs: WrapElement[];\r\n    // }\r\n    export type NodeConnectManager = {\r\n        inherits: WrapElement[];\r\n    }\r\n    export type NodeInheritConnector = {\r\n        method: InheritMethod;\r\n        depend: string;\r\n        id: string;\r\n        disable?: boolean;\r\n        mngs: WrapElement[];\r\n    }\r\n\r\n    export type NodeSeedItem = {\r\n        name: string;\r\n        entry: string;\r\n        mngs: WrapElement[];\r\n    }\r\n    export type NodeThumnailManager = {\r\n        items: WrapElement[];\r\n    }\r\n    export type NodeSeedArgManager = {\r\n        args: WrapElement[];\r\n    }\r\n    export type NodeSeedSendManager = {\r\n        params: WrapElement[];\r\n    }\r\n    export type NodeSeedArgItem = {\r\n        name: string;\r\n        min: number;\r\n        max: number;\r\n        step: number;\r\n        defval: number | undefined;\r\n    }\r\n\r\n    const COLOR_ROOT = '#a1a1a1';\r\n    const COLOR_METHOD = '#cca67b';\r\n    const COLOR_MNG = '#37a2bd';\r\n    const COLOR_LIST = '#b85f5f';\r\n    const COLOR_ITEM = '#ae628c';\r\n    const COLOR_DISABLE = '#685b79';\r\n    const COLOR_PARAM = '#8dae62';\r\n    const COLOR_FIELD = '#cec256';\r\n    const COLOR_THUMBNAIL = '#8283be';\r\n    const COLOR_CONDITION = '#56ce7e';\r\n\r\n    export const getNodeDisplayJsx = (node: TreeUtil.ElementNode, isFocus: boolean) => {\r\n        const wrap = node.data as WrapElement;\r\n        switch (wrap.type) {\r\n            case 'root': {\r\n                return <_Category backgroundColor={COLOR_ROOT}>Library</_Category>;\r\n            }\r\n            case 'seed-mng': {\r\n                return <_Category backgroundColor={COLOR_METHOD}>Seed Manager</_Category>;\r\n            }\r\n            case 'logic-mng': {\r\n                return <_Category backgroundColor={COLOR_METHOD}>Logic Manager</_Category>;\r\n            }\r\n            case 'visual-mng': {\r\n                return <_Category backgroundColor={COLOR_MNG}>Visual</_Category>;\r\n            }\r\n            case 'extend-mng': {\r\n                return <_Category backgroundColor={COLOR_MNG}>Extend</_Category>;\r\n            }\r\n            case 'seed-item': {\r\n                let name = '...';\r\n                if (wrap.data != null) {\r\n                    const data = wrap.data as NodeLogicItem;\r\n                    name = data.name;\r\n                }\r\n                return <>\r\n                    <_Category backgroundColor={COLOR_ITEM}>Seed</_Category>\r\n                    <_EditableValue>{name}</_EditableValue>\r\n                </>;\r\n            }\r\n            case 'logic-item': {\r\n                let name = '...';\r\n                if (wrap.data != null) {\r\n                    const data = wrap.data as NodeLogicItem;\r\n                    name = data.name;\r\n                }\r\n                return <>\r\n                    <_Category backgroundColor={COLOR_ITEM}>Logic</_Category>\r\n                    <_EditableValue>{name}</_EditableValue>\r\n                </>;\r\n            }\r\n            case 'inherit-logic': {\r\n                return <_Category backgroundColor={COLOR_MNG}>Logic</_Category>;\r\n            }\r\n            case 'argument-mng': {\r\n                return <_Category backgroundColor={COLOR_LIST}>Argument Manager</_Category>;\r\n            }\r\n            case 'inhfld-mng':\r\n            case 'field-mng': {\r\n                return <_Category backgroundColor={COLOR_LIST}>Field Manager</_Category>;\r\n            }\r\n            case 'behavior-mng': {\r\n                return <_Category backgroundColor={COLOR_MNG}>Behavior</_Category>;\r\n            }\r\n            case 'inherit-mng': {\r\n                return <_Category backgroundColor={COLOR_LIST}>Inherit Manager</_Category>;\r\n            }\r\n            case 'connector': {\r\n                let detailJsx = <span>...</span>;\r\n                let color = COLOR_ITEM;\r\n                let isDisable = false;\r\n                if (wrap.data != null) {\r\n                    const data = wrap.data as NodeInheritConnector;\r\n                    detailJsx = <span>{data.id}&nbsp;<_Span color=\"#ffe89ba6\">{data.method}</_Span></span>;\r\n                    if (data.method === 'depend') {\r\n                        detailJsx = <span>{data.id}&nbsp;<_Span color=\"#ffe89ba6\">{data.method}:&nbsp;</_Span><_Field>{data.depend}</_Field></span>;\r\n                    }\r\n                    if (data.disable ?? false) {\r\n                        color = COLOR_DISABLE;\r\n                        isDisable = true;\r\n                    }\r\n                }\r\n                return (<>\r\n                    <_Category backgroundColor={color} isDisable={isDisable}>Inherit</_Category>\r\n                    {detailJsx == undefined ? <></> : <_EditableValue>{detailJsx}</_EditableValue>}\r\n                </>);\r\n            }\r\n            // パラメータ要素\r\n            case 'param-item':\r\n            case 'seedsend-item':\r\n            case 'send-item': {\r\n                const data = wrap.data as NodeParamItem;\r\n                let result: JSX.Element[] = [];\r\n                let varCnt = 0;\r\n                data.formulaItems.forEach((formula, i) => {\r\n                    let str = <_Signature key={i}>{formula}</_Signature>;\r\n                    if (formula === 'var') {\r\n                        const v = data.values[varCnt];\r\n                        if (v.type !== 'direct') str = <_Field key={i}>{`$\\{${v.value}}`}</_Field>;\r\n                        else str = <span key={i}>{v.value}</span>;\r\n                        varCnt++;\r\n                    }\r\n                    result.push(str);\r\n                });\r\n                return <>\r\n                    <_Category backgroundColor={COLOR_PARAM}>Param<_Detail>&nbsp;[{data.name}]</_Detail></_Category>\r\n                    <_EditableValue>{result}</_EditableValue>\r\n                </>;\r\n            }\r\n            // 条件要素\r\n            case 'condition-item': {\r\n                const data = wrap.data as NodeParamItem;\r\n                let result: JSX.Element[] = [];\r\n                let varCnt = 0;\r\n                data.formulaItems.forEach((formula, i) => {\r\n                    let str = <_Signature key={i}>{formula}</_Signature>;\r\n                    if (formula === 'var') {\r\n                        const v = data.values[varCnt];\r\n                        if (v.type !== 'direct') str = <_Field key={i}>{`$\\{${v.value}}`}</_Field>;\r\n                        else str = <span key={i}>{v.value}</span>;\r\n                        varCnt++;\r\n                    }\r\n                    result.push(str);\r\n                });\r\n                return <>\r\n                    <_Category backgroundColor={COLOR_CONDITION}>Condition<_Detail>&nbsp;[{data.name}]</_Detail></_Category>\r\n                    <_EditableValue>{result}</_EditableValue>\r\n                </>;\r\n            }\r\n            // 変数要素\r\n            case 'field-item': {\r\n                let nameJsx = <span>...</span>;\r\n                let detailJsx = <span>...</span>;\r\n                if (wrap.data != null) {\r\n                    const data = wrap.data as NodeParamItem;\r\n                    nameJsx = <_Detail>&nbsp;[{data.name}]</_Detail>;\r\n                    let result: JSX.Element[] = [];\r\n                    let varCnt = 0;\r\n                    data.formulaItems.forEach((formula, i) => {\r\n                        let str = <_Signature key={i}>{formula}</_Signature>;\r\n                        if (formula === 'var') {\r\n                            const v = data.values[varCnt];\r\n                            if (v.type !== 'direct') str = <_Field key={i}>{`$\\{${v.value}}`}</_Field>;\r\n                            else str = <span key={i}>{v.value}</span>;\r\n                            varCnt++;\r\n                        }\r\n                        result.push(str);\r\n                    });\r\n                    detailJsx = <>{result}</>;\r\n                }\r\n                return <>\r\n                    <_Category backgroundColor={COLOR_FIELD}>Field{nameJsx}</_Category>\r\n                    <_EditableValue>{detailJsx}</_EditableValue>\r\n                </>;\r\n            }\r\n            case 'argument-item': {\r\n                let detailJsx = <span>...</span>;\r\n                if (wrap.data != null) {\r\n                    const data = wrap.data as NodeArgumentItem;\r\n                    detailJsx = <span>{data.name}<_ValueType>&nbsp;({data.valueType})</_ValueType></span>\r\n                }\r\n                return <>\r\n                    <_Category backgroundColor={COLOR_FIELD}>Argument<_Detail></_Detail></_Category>\r\n                    <_EditableValue>{detailJsx}</_EditableValue>\r\n                </>;\r\n            }\r\n            case 'send-mng': {\r\n                return <_Category backgroundColor={COLOR_MNG}>Send</_Category>;\r\n            }\r\n            case 'thumbnail-mng': {\r\n                return <_Category backgroundColor={COLOR_LIST}>Thumnail Manager</_Category>;\r\n            }\r\n            case 'thumbnail-item': {\r\n                let detailJsx = <span>...</span>;\r\n                if (wrap.data != null) {\r\n                    const data = wrap.data as NodeThumbnailItem;\r\n                    detailJsx = <span>{data.name}<_ValueType>&nbsp;({data.frame})</_ValueType></span>\r\n                }\r\n                return <>\r\n                    <_Category backgroundColor={COLOR_THUMBNAIL}>Thumbnail</_Category>\r\n                    <_EditableValue>{detailJsx}</_EditableValue>\r\n                </>;\r\n            }\r\n            case 'sample-mng': {\r\n                return <_Category backgroundColor={COLOR_LIST}>Sample Manager</_Category>;\r\n            }\r\n            case 'sample-item': {\r\n                let name = '...';\r\n                if (wrap.data != null) {\r\n                    const data = wrap.data as NodeSampleItem;\r\n                    name = data.name;\r\n                }\r\n                return <>\r\n                    <_Category backgroundColor={COLOR_ITEM}>Sample</_Category>\r\n                    <_EditableValue>{name}</_EditableValue>\r\n                </>;\r\n            }\r\n            case 'interface-mng': {\r\n                return <_Category backgroundColor={COLOR_MNG}>Interface</_Category>;\r\n            }\r\n            case 'seedarg-mng': {\r\n                return <_Category backgroundColor={COLOR_LIST}>Argument Manager</_Category>;\r\n            }\r\n            case 'seedarg-item': {\r\n                let detailJsx = <span>...</span>;\r\n                if (wrap.data != null) {\r\n                    const data = wrap.data as NodeSeedArgItem;\r\n                    detailJsx = <span>{data.name}<_ValueType>&nbsp;({data.min}～{data.max})</_ValueType></span>\r\n                }\r\n                return <>\r\n                    <_Category backgroundColor={COLOR_FIELD}>Argument<_Detail></_Detail></_Category>\r\n                    <_EditableValue>{detailJsx}</_EditableValue>\r\n                </>;\r\n            }\r\n            case 'seedsend-mng': {\r\n                return <_Category backgroundColor={COLOR_MNG}>Send</_Category>;\r\n            }\r\n        }\r\n        return <_Category backgroundColor={'#ffffff'}>XXXXX</_Category>;\r\n    }\r\n\r\n    export const getTypeName = (node: TreeUtil.ElementNode | null) => {\r\n        if (node == null) return '';\r\n        const type = (node.data as WrapElement).type;\r\n        switch (type) {\r\n            case 'root': return 'Root';\r\n            case 'seed-mng': return 'Seed Manager';\r\n            case 'logic-mng': return 'Logic Manager';\r\n            case 'seed-item': return 'Seed Item';\r\n            case 'logic-item': return 'Logic Item';\r\n            case 'argument-mng': return 'Argument Manager';\r\n            case 'inhfld-mng':\r\n            case 'field-mng': return 'Field Manager';\r\n            case 'field-item': return 'Field Item';\r\n            case 'visual-mng': return 'Visual Manager';\r\n            case 'argument-item': return 'Argument Item';\r\n            case 'extend-mng': return 'Extend Manager';\r\n            case 'behavior-mng': return 'Behavior Manager';\r\n            case 'inherit-mng': return 'Inherit Manager';\r\n            case 'connector': return 'Inherit Connector';\r\n            case 'inherit-logic': return 'Inherit Logic';\r\n            case 'send-mng': return 'Send Manager';\r\n            case 'send-item': return 'Send Item';\r\n            case 'param-item': return 'Param Item';\r\n            case 'condition-item': return 'Condition Item';\r\n            case 'interface-mng': return 'Interface Manager';\r\n            case 'thumbnail-mng': return 'Thumbnail Manager';\r\n            case 'thumbnail-item': return 'Thumbnail Item';\r\n            case 'sample-mng': return 'Sample Manager';\r\n            case 'sample-item': return 'Sample Item';\r\n            case 'seedarg-mng': return 'Argument Manager';\r\n            case 'seedsend-mng': return 'Send';\r\n        }\r\n    }\r\n\r\n    export const getDetailComponent = (node: TreeUtil.ElementNode | null) => {\r\n        if (node == null) return <></>;\r\n        const type = (node.data as WrapElement).type;\r\n        switch (type) {\r\n            case 'root': return <></>;\r\n            case 'seed-mng': return <FactDetSeedMng />;\r\n            case 'logic-mng': return <EditorLogicMng />;\r\n            case 'seed-item': return <EditorSeedItem />;\r\n            case 'logic-item': return <EditorLogicItem />;\r\n            case 'argument-mng': return <FactDetArgumentMng />;\r\n            case 'argument-item': return <EditorArgumentItem />;\r\n            case 'inhfld-mng':\r\n            case 'field-mng': return <EditorFieldMng />;\r\n            case 'visual-mng': return <EditorVisualMng />;\r\n            case 'extend-mng': return <EditorExtendMng />;\r\n            case 'behavior-mng': return <FactDetBehiviorMng />;\r\n            case 'inherit-mng': return <EditorInheritConnMng />;\r\n            case 'connector': return <EditorInheritConnector />;\r\n            case 'inherit-logic': return <EditorLogicItem />;\r\n            case 'send-mng': return <EditorSendManager />;\r\n            case 'field-item':\r\n            case 'param-item':\r\n            case 'condition-item':\r\n            case 'seedsend-item':\r\n            case 'send-item': return <EditorParamItem />;\r\n            case 'interface-mng': return <EditorInterfaceManager />;\r\n            case 'sample-mng': return <EditorSampleMng />;\r\n            case 'sample-item': return <EditorSampleItem />;\r\n            case 'thumbnail-mng': return <EditorThumbnailMng />;\r\n            case 'thumbnail-item': return <EditorThumbnailItem />;\r\n            case 'seedarg-mng': return <EditorSeedArgMng />;\r\n            case 'seedarg-item': return <EditorSeedArgItem />;\r\n            case 'seedsend-mng': return <EditorSeedSendMng />;\r\n        }\r\n    }\r\n\r\n    export const ConnectTypes = ['create', 'depend'] as const;\r\n    export type InheritMethod = typeof ConnectTypes[number];\r\n\r\n    export const getChildrenElementNode = (node: TreeUtil.ElementNode): TreeUtil.ElementNode[] => {\r\n        const wrapNode = node.data as WrapElement;\r\n        const get = (listName: string) => {\r\n            return ((wrapNode.data)[listName] as LogicUtil.WrapElement[]).map(wrap => {\r\n                const elementNode = TreeUtil.createNode(wrap, node);\r\n                elementNode.children = getChildrenElementNode(elementNode);\r\n                return elementNode;\r\n            });\r\n        }\r\n        switch (wrapNode.type) {\r\n            case 'seed-mng':\r\n            case 'logic-mng': return get('defs');\r\n            case 'seed-item':\r\n            case 'connector':\r\n            case 'inherit-logic':\r\n            case 'interface-mng':\r\n            case 'logic-item': return get('mngs');\r\n            case 'send-mng':\r\n            case 'behavior-mng':\r\n            case 'visual-mng':\r\n            case 'extend-mng':\r\n            case 'seedsend-mng':\r\n            case 'visual-mng': return get('params');\r\n            case 'inherit-mng': return get('inherits');\r\n            case 'seedarg-mng':\r\n            case 'argument-mng': return get('args');\r\n            case 'sample-mng': return get('samples');\r\n            case 'inhfld-mng':\r\n            case 'field-mng': return get('fields');\r\n            case 'thumbnail-mng': return get('items');\r\n        }\r\n        return [];\r\n    };\r\n\r\n    export const getChildrenDataNode = (wrapNode: LogicUtil.WrapElement): TreeUtil.DataNode[] => {\r\n        const get = (listName: string) => {\r\n\r\n            return ((wrapNode.data)[listName] as LogicUtil.WrapElement[]).map(wrap => {\r\n                const treeNode: TreeUtil.DataNode = {\r\n                    data: wrap,\r\n                    children: getChildrenDataNode(wrap)\r\n                };\r\n                return treeNode;\r\n            });\r\n        }\r\n        switch (wrapNode.type) {\r\n            case 'root': {\r\n                const node = wrapNode.data as LogicUtil.NodeRoot;\r\n                return [\r\n                    { data: node.seedMng, children: getChildrenDataNode(node.seedMng) },\r\n                    { data: node.logicMng, children: getChildrenDataNode(node.logicMng) }\r\n                ];\r\n            }\r\n            case 'seed-mng':\r\n            case 'logic-mng': return get('defs');\r\n            case 'seed-item':\r\n            case 'connector':\r\n            case 'inherit-logic':\r\n            case 'interface-mng':\r\n            case 'logic-item': return get('mngs');\r\n            case 'send-mng':\r\n            case 'behavior-mng':\r\n            case 'visual-mng':\r\n            case 'extend-mng':\r\n            case 'seedsend-mng':\r\n            case 'visual-mng': return get('params');\r\n            case 'inherit-mng': return get('inherits');\r\n            case 'seedarg-mng':\r\n            case 'argument-mng': return get('args');\r\n            case 'sample-mng': return get('samples');\r\n            case 'inhfld-mng':\r\n            case 'field-mng': return get('fields');\r\n            case 'thumbnail-mng': return get('items');\r\n        }\r\n        return [];\r\n    };\r\n}\r\n\r\nexport default LogicUtil;\r\n\r\nconst _Category = styled.div<{\r\n    backgroundColor: string;\r\n    isDisable?: boolean;\r\n}>`\r\n    ${Styles.CSS_LABEL_MIDIUM}\r\n    display: inline-block;\r\n    position: relative;\r\n    background-color: ${props => props.backgroundColor};\r\n    /* width: 100%; */\r\n    ${props => !(props.isDisable ?? false) ? '' : css`\r\n        text-decoration: line-through;\r\n        color: #00054dac;\r\n    `}\r\n    border-radius: 4px 0 0 4px;\r\n    margin: 5px 0 0 0;\r\n    padding: 0 10px;\r\n    border: solid 1px #000000d2;\r\n`;\r\nconst _Detail = styled.span`\r\n    color: #000b69bd;\r\n`;\r\n\r\nconst _EditableValue = styled.div`\r\n    ${Styles.CSS_LABEL_MIDIUM}\r\n    display: inline-block;\r\n    position: relative;\r\n    background-color: #0c0c0c;\r\n    color: #ebebeb;\r\n    border-radius: 0 4px 4px 0;\r\n    /* width: 100%; */\r\n    margin: 5px 0 0 0;\r\n    padding: 0 10px;\r\n`;\r\nconst _Span = styled.span<{\r\n    color: string;\r\n}>`\r\n    color: ${props => props.color};\r\n`;\r\nconst _ValueType = styled.span`\r\n    color: #fff9d6b9;\r\n`;\r\nconst _Signature = styled.span`\r\n    color: #ffffff78;\r\n`;\r\nconst _Field = styled.span`\r\n    color: #ff2d2d;\r\n`;","import { type } from \"os\";\r\nimport { createContext, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport Styles from \"../../../base/design/styles\";\r\nimport DataUtil from \"../../../utils/dataUtil\";\r\nimport FormUtil from \"../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../utils/treeUtil\";\r\nimport ConfirmDialog from \"../../dialog/confirmDialog\";\r\nimport { GlobalContext } from \"../../entry/systemEntry\";\r\nimport Common from \"../common\";\r\nimport LogicPreviewFrame from \"../preview/logicPreviewFrame\";\r\nimport LogicElementUtil from \"./util/logicElementUtil\";\r\nimport LogicUtil from \"./util/logicUtil\";\r\n\r\nexport const FactoryTreeContext = createContext({} as LogicUtil.DetailArgs);\r\n\r\nconst LogicMainteTab = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n\r\n    const [rootData, setRootData] = useState(LogicElementUtil.getInitialData());\r\n    const [focusNode, setFocusNode] = useState<TreeUtil.ElementNode | null>(null);\r\n    // const [treeDisable, setTreeDisable] = useState(false);\r\n    const [isModify, setModify] = useState<boolean>(false);\r\n    const [invalidate, setInvalidate] = useState<any>(null);\r\n\r\n    const [fileHandle, setFileHandle] = useState<FileSystemFileHandle | null>(null);\r\n\r\n    const rootDataNode: TreeUtil.DataNode = useMemo(() => {\r\n        return {\r\n            data: rootData,\r\n            children: LogicUtil.getChildrenDataNode(rootData)\r\n        }\r\n    }, [rootData]);\r\n\r\n\r\n    const loadFile = () => {\r\n        (async () => {\r\n            const [fileHandle] = await window.showOpenFilePicker();\r\n            const file = await fileHandle.getFile();\r\n            const fileContents = await file.text();\r\n            setFileHandle(fileHandle);\r\n            const text = DataUtil.unZip(fileContents);\r\n            console.log(text);\r\n            setRootData(JSON.parse(text));\r\n            store.system.dialog = <ConfirmDialog.Component message=\"Successfully file loaded!\" />;\r\n            setStore({ ...store });\r\n        })();\r\n    }\r\n\r\n    const saveFile = () => {\r\n        const options = {\r\n            types: [\r\n                {\r\n                    accept: {\r\n                        'text/plain': ['.plgc'],\r\n                    },\r\n                },\r\n            ],\r\n        };\r\n\r\n        const plainData = JSON.stringify(rootData);\r\n        if (fileHandle != null) {\r\n            (async () => {\r\n                //ファイルへ書き込むための FileSystemWritableFileStream を作成\r\n                const writable = await fileHandle.createWritable();\r\n                //テキストデータの書き込み\r\n                const text = DataUtil.gZip(plainData);\r\n                await writable.write(text);\r\n                //ファイルを閉じる\r\n                await writable.close();\r\n                setFileHandle(fileHandle);\r\n                // this.score.setScoreState({ ...state });\r\n                const file = await fileHandle.getFile();\r\n                store.system.dialog = <ConfirmDialog.Component message=\"successfully overwritten!\" />;\r\n                setStore({ ...store });\r\n            })();\r\n        } else {\r\n            window.showSaveFilePicker(options).then((handle) => {\r\n                (async () => {\r\n                    //ファイルへ書き込むための FileSystemWritableFileStream を作成\r\n                    const writable = await handle.createWritable();\r\n                    //テキストデータの書き込み\r\n                    const text = DataUtil.gZip(plainData);\r\n                    await writable.write(text);\r\n                    //ファイルを閉じる\r\n                    await writable.close();\r\n                    setFileHandle(handle);\r\n                    store.system.dialog = <ConfirmDialog.Component message=\"Successfully written to file!\" />;\r\n                    setStore({ ...store });\r\n                })();\r\n            }).catch(() => {\r\n                console.log('キャンセルされました');\r\n            });\r\n        }\r\n    }\r\n\r\n    const masterNode =  useMemo(() => {\r\n        let cur: TreeUtil.ElementNode | null = focusNode;\r\n        while (cur != null) {\r\n            const type = (cur.data as LogicUtil.WrapElement).type;\r\n            if (['logic-item', 'seed-item'].includes(type)) return cur;\r\n            cur = cur.parent;\r\n        };\r\n        return null;\r\n    }, [focusNode]);\r\n\r\n    /**\r\n     * プレビューダイアログを表示する\r\n     */\r\n    const openPreviewDialog = () => {\r\n        if(masterNode == null) return;\r\n        store.system.dialog = (\r\n            <LogicPreviewFrame.Component\r\n                node={masterNode}\r\n                rootData={rootData}\r\n            />\r\n        );\r\n        setStore({ ...store });\r\n    }\r\n\r\n    return (\r\n        <_Wrap\r\n            tabIndex={0}\r\n            onKeyDown={(e) => {\r\n                // console.log(e.key);\r\n                if (isModify || focusNode == null) return;\r\n                switch (e.key) {\r\n                    case 'ArrowRight': {\r\n                        if (focusNode.children.length > 0) {\r\n                            if (!focusNode.isOpen) focusNode.isOpen = true;\r\n                            else setFocusNode(focusNode.children[0]);\r\n                            setInvalidate({});\r\n                        }\r\n                    } break;\r\n                    case 'ArrowLeft': {\r\n                        if (focusNode.isOpen) focusNode.isOpen = false;\r\n                        else {\r\n                            if (focusNode.parent != null) setFocusNode(focusNode.parent);\r\n                        }\r\n                        setInvalidate({});\r\n                    } break;\r\n                    case 'ArrowUp': {\r\n                        if (focusNode.parent != null) {\r\n                            const list = focusNode.parent.children;\r\n                            list.forEach((n, i) => {\r\n                                if (focusNode == n) {\r\n                                    if (i === 0) {\r\n                                        setFocusNode(focusNode.parent);\r\n                                        setInvalidate({});\r\n                                    } else {\r\n                                        setFocusNode(list[i - 1]);\r\n                                        setInvalidate({});\r\n                                    }\r\n                                    return 1;\r\n                                }\r\n                            });\r\n                        }\r\n                    } break;\r\n                    case 'ArrowDown': {\r\n                        if (focusNode.parent != null) {\r\n                            const list = focusNode.parent.children;\r\n                            list.forEach((n, i) => {\r\n                                if (focusNode == n && i < list.length - 1) {\r\n                                    setFocusNode(list[i + 1]);\r\n                                    setInvalidate({});\r\n                                    return 1;\r\n                                }\r\n                            });\r\n                        }\r\n                    } break;\r\n                    case ' ': {\r\n                        if (masterNode != null) openPreviewDialog();\r\n                    } break;\r\n                }\r\n            }}\r\n        >\r\n            <_TreeDiv>\r\n                <_TreeHead>\r\n                    <_TreeHeadHalf>\r\n                        <FormUtil.ButtonRecord\r\n                            isCenter\r\n                            buttons={[\r\n                                {\r\n                                    label: 'Preview',\r\n                                    isEnable: masterNode != null,\r\n                                    callback: openPreviewDialog\r\n                                }\r\n                            ]}\r\n                        />\r\n                    </_TreeHeadHalf>\r\n                    <_TreeHeadHalf>\r\n                        <FormUtil.ButtonRecord\r\n                            isCenter\r\n                            buttons={[\r\n                                {\r\n                                    label: 'Save',\r\n                                    callback: saveFile\r\n                                },\r\n                                {\r\n                                    label: 'Load',\r\n                                    callback: loadFile\r\n                                }\r\n                            ]}\r\n                        />\r\n                    </_TreeHeadHalf>\r\n                </_TreeHead>\r\n                <_TreeBody>\r\n                    <TreeUtil.Frame\r\n                        rootDataNode={rootDataNode}\r\n                        clickEvent={(node: TreeUtil.ElementNode) => {\r\n                            setFocusNode(node);\r\n                        }}\r\n                        getLabelJsx={(node: TreeUtil.ElementNode) => {\r\n                            // console.log(focusNode);\r\n                            // console.log(node);\r\n                            // const isActive = focusNode == node || (focusNode?.depth===0 && focusNode.data == rootDataNode.data)\r\n                            return LogicUtil.getNodeDisplayJsx(node, focusNode?.data == node.data)\r\n                        }}\r\n                        invalidate={invalidate}\r\n                        focusNode={focusNode}\r\n                        isDisable={isModify}\r\n                    />\r\n                </_TreeBody>\r\n            </_TreeDiv>\r\n            <_PropsDiv>\r\n                <_DetailDiv>\r\n                    <_DetailHeader>\r\n                        <_DetailHeaderLabel>{LogicUtil.getTypeName(focusNode)}</_DetailHeaderLabel>\r\n                    </_DetailHeader>\r\n                    <FactoryTreeContext.Provider value={{\r\n                        rootData,\r\n                        node: focusNode as TreeUtil.ElementNode,\r\n                        setFocusNode: setFocusNode,\r\n                        invalidate: () => { setInvalidate({}) },\r\n                        isModify,\r\n                        setModify,\r\n                        // treeDisable,\r\n                        setRootData,\r\n                        removeSelf: () => {\r\n                            const node = focusNode as TreeUtil.ElementNode;\r\n                            let index = -1;\r\n                            node.parent?.children.forEach((n, i) => {\r\n                                if (n == node) index = i;\r\n                            });\r\n                            node.parent?.children.splice(index, 1);\r\n                            const parentWrap = node.parent?.data as LogicUtil.WrapElement;\r\n                            const listName = LogicElementUtil.getListName(parentWrap.type);\r\n                            if (listName == null) return;\r\n                            const list = parentWrap.data[listName] as LogicUtil.WrapElement[];\r\n                            list.splice(index, 1);\r\n                            setFocusNode(node.parent as TreeUtil.ElementNode);\r\n                            setInvalidate({});\r\n                        }\r\n                    }}>\r\n                        <_DetailMainDiv>{LogicUtil.getDetailComponent(focusNode)}</_DetailMainDiv>\r\n                    </FactoryTreeContext.Provider>\r\n                </_DetailDiv>\r\n            </_PropsDiv>\r\n        </_Wrap >\r\n    );\r\n}\r\n\r\nexport default LogicMainteTab;\r\n\r\nconst PROPS_DIV_WIDTH = 460;\r\n\r\nconst _Wrap = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    background-color: #6c8186;\r\n    width: 100%;\r\n    height: 100%;\r\n`;\r\n\r\nconst _TreeDiv = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    background-color: #d5d4d87b;\r\n    width: calc(100% - ${PROPS_DIV_WIDTH}px);\r\n    height: 100%;\r\n    vertical-align: top;\r\n`;\r\n\r\nconst _TreeHead = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    /* background-color: #d5d4d8; */\r\n    width: 100%;\r\n    height: 40px;\r\n`;\r\nconst _TreeHeadHalf = styled.div`\r\n    display: inline-block;\r\n    width: 50%;\r\n`;\r\n\r\nconst _TreeBody = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    background-color: #7fbdb47a;\r\n    height: calc(100% - 40px);\r\n`;\r\n\r\nconst _PropsDiv = styled.div`\r\n    display: inline-block;\r\n    /* position: relative; */\r\n    background-color: #9fa9b6;\r\n    width: ${PROPS_DIV_WIDTH}px;\r\n    height: 100%;\r\n    vertical-align: top;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nconst _DetailDiv = styled.div`\r\n    display: inline-block;\r\n    /* position: relative; */\r\n    background-color: #c0c9c4;\r\n    width: calc(100% - 4px);\r\n    height: calc(100% - 4px);\r\n    margin: 2px 0 0 2px;\r\n`;\r\nconst _DetailHeader = styled.div`\r\n    display: inline-block;\r\n    /* position: relative; */\r\n    /* background-color: #b4b29e; */\r\n    width: 100%;\r\n    height: 40px;\r\n`;\r\nconst _DetailHeaderLabel = styled.div`\r\n    ${Styles.CSS_LABEL_MIDIUM}\r\n    color: #a10000;\r\n    /* background-color: #bbd0d3; */\r\n    border: solid 1px #a10000;\r\n    box-sizing: border-box;\r\n    width: calc(100% - 20px);\r\n    margin: 5px 0 0 10px;\r\n    border-radius: 4px;\r\n`;\r\n\r\nconst _DetailMainDiv = styled.div`\r\n    width: calc(100% - 8px);\r\n    height: calc(100% - 44px);\r\n    margin: 0 0 0 4px;\r\n    background-color: #cfd3cc;\r\n    border: solid 1px #0026a1;\r\n    box-sizing: border-box;\r\n    border-radius: 4px;\r\n`;\r\n\r\nconst _Blind = styled.div<{\r\n    isVisible: boolean;\r\n}>`\r\n    display: inline-block;\r\n    ${props => props.isVisible ? '' : css`\r\n        display: none;\r\n    `}\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    z-index: 10;\r\n    background-color: #0012616c;\r\n    width: 100%;\r\n    height: 100%;\r\n`;","\r\nconst ManageTab = () => {\r\n\r\n    return (<></>);\r\n}\r\n\r\nexport default ManageTab;","import { type } from \"os\";\r\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport TreeUtil from \"../../../utils/treeUtil\";\r\nimport Common from \"../common\";\r\nimport TimelineUtil from \"./timelineUtil\";\r\n\r\nconst LauncherTab = () => {\r\n\r\n    return (\r\n        <_Wrap\r\n            tabIndex={0}\r\n        >\r\n            <_TreeDiv>\r\n                <_TreeHead>\r\n                    {/* <HierarchyNavi cur={focusNode}/> */}\r\n                </_TreeHead>\r\n                <_TreeBody>\r\n                </_TreeBody>\r\n            </_TreeDiv>\r\n            <_PropsDiv>\r\n            </_PropsDiv>\r\n            {/* <_Blind isVisible={isBackingWnd}>\r\n                    <_Contents>{!isBackingWnd ? <></> : <BackingEditorFrame />}</_Contents>\r\n                </_Blind> */}\r\n        </_Wrap >\r\n    );\r\n}\r\n\r\nexport default LauncherTab;\r\n\r\n\r\nconst PROPS_DIV_WIDTH = 460;\r\n\r\nconst _Wrap = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    background-color: #c3d8dd;\r\n    width: 100%;\r\n    height: 100%;\r\n`;\r\n\r\nconst _TreeDiv = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    /* background-color: #d5d4d8; */\r\n    width: calc(100% - ${PROPS_DIV_WIDTH}px);\r\n    height: 100%;\r\n    vertical-align: top;\r\n`;\r\n\r\nconst _TreeHead = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    /* background-color: #d5d4d8; */\r\n    width: 100%;\r\n    height: 40px;\r\n`;\r\n\r\nconst _TreeBody = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    height: calc(100% - 40px);\r\n`;\r\n\r\nconst _PropsDiv = styled.div`\r\n    display: inline-block;\r\n    /* position: relative; */\r\n    /* background-color: #532fc0; */\r\n    width: ${PROPS_DIV_WIDTH}px;\r\n    height: 100%;\r\n    vertical-align: top;\r\n    box-sizing: border-box;\r\n    padding: 6px 6px 6px 0;\r\n`;\r\n\r\nconst _TabContWrap = styled.div`\r\n    display: inline-block;\r\n    /* position: relative; */\r\n    background-color: #c0c9c4;\r\n    width: calc(100% - 4px);\r\n    height: calc(100% - 4px);\r\n    margin: 2px 0 0 2px;\r\n`;\r\n\r\nconst _Blind = styled.div<{\r\n    isVisible: boolean;\r\n}>`\r\n    display: inline-block;\r\n    ${props => props.isVisible ? '' : css`\r\n        display: none;\r\n    `}\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    z-index: 10;\r\n    background-color: #0012616c;\r\n    width: 100%;\r\n    height: 100%;\r\n`;\r\n\r\nconst _Contents = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    width: 630px;\r\n    /* height: 400px; */\r\n    background-color: #a3a3a3;\r\n    /* opacity: 0.9; */\r\n    overflow: hidden;\r\n`;","import { useContext, useEffect, useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { TabbedPane } from \"../../base/components/tab/tabbedPane\";\r\nimport Styles, { _CSS_LABEL_MIDIUM } from \"../../base/design/styles\";\r\nimport { SCORE_TAB_MARGIN } from \"../../utils/systemConst\";\r\nimport { GlobalContext } from \"../entry/systemEntry\";\r\nimport LogicMainteTab from \"./factory/logicMainteTab\";\r\nimport ManageTab from \"./manage/manageTab\";\r\nimport PreviewTab from \"./manage/manageTab\";\r\nimport LauncherTab from \"./launcher/launcherTab\";\r\nimport Timeline from \"./launcher/launcherTab\";\r\n\r\n\r\nconst CreateChannel = () => {\r\n\r\n    const { store, setStore } = useContext(GlobalContext);\r\n\r\n    return (\r\n        <_Wrap>\r\n            <TabbedPane\r\n                tabElements={[\r\n                    { name: 'Manage', enable: false, cont: <ManageTab /> },\r\n                    { name: 'Launcher', enable: true, cont: <LauncherTab /> },\r\n                    { name: 'Library', enable: true, cont: <LogicMainteTab /> }\r\n                ]}\r\n                activeNo={2}\r\n            // selectTabIndex={(index: number) => dispatcher.score.setScoreTabIndex(index)}\r\n            />\r\n        </_Wrap>\r\n    );\r\n}\r\nexport default CreateChannel;\r\n\r\nconst _Wrap = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    margin: ${SCORE_TAB_MARGIN}px 0 0 ${SCORE_TAB_MARGIN}px;\r\n    width: calc(100% - ${SCORE_TAB_MARGIN * 2}px);\r\n    height: calc(100% - ${SCORE_TAB_MARGIN * 2}px);\r\n    background-color: transparent;\r\n    /* background-color: #c3d8dd6f; */\r\n    /* border: solid 1px black;\r\n    border-radius: 5px; */\r\n    /* box-shadow: 0 2px 14px 4px #000b3a48; */\r\n`;\r\n\r\n","import { Redirect } from \"react-router-dom\";\r\nimport DataUtil from \"../../utils/dataUtil\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport { GlobalContext } from \"./systemEntry\";\r\n\r\nconst DirectView = (props: {\r\n    hashKey: string;\r\n}) => {\r\n\r\n    const { store, setStore } = useContext(GlobalContext);\r\n    const conteseq = DataUtil.getDecryptionedScoreSeq(props.hashKey);\r\n\r\n    // const setScoreData = (owner: string, dispnam: string, data: ScoreData) => {\r\n    //     store.scoreState.focusIndex = 2;\r\n    //     store.scoreState.distIndex = store.scoreState.focusIndex;\r\n    //     dispatcher.score.setScoreState({ ...store.scoreState });\r\n    //     // dispatcher.score.setScoreTabIndex(1);\r\n    //     dispatcher.score.setScoreData(data);\r\n    //     // キャッシュの更新\r\n    //     store.scoreData = data;\r\n    //     CacheUtil.updateHarmonizeCache(store, dispatcher);\r\n    //     store.systemState.mainChannelIndex = 5;\r\n    //     store.systemState.scoreTabIndex = 0;\r\n    //     store.systemState.directScore = {\r\n    //         owner, name: dispnam\r\n    //     };\r\n    //     dispatcher.system.setState(store.systemState);\r\n    // };\r\n\r\n    useEffect(() => {\r\n        // DataUtil.findScore(conteseq).then(resList => {\r\n        //     if (resList.length > 0) {\r\n        //         const source = resList[0]['data'];\r\n        //         const owner = resList[0]['owner'];\r\n        //         const dispnam = resList[0]['dispnam'];\r\n        //         const text = DataUtil.unZip(source);\r\n        //         setScoreData(owner, dispnam, JSON.parse(text));\r\n        //     }\r\n        // });\r\n    }, []);\r\n    // if (store.systemState.directScore == null) {\r\n    //     return <></>;\r\n    // } else {\r\n    //     return <Redirect to=\"/\" />;\r\n    //     // return <MainFrame />;\r\n    // }\r\n    return <Redirect to=\"/\" />;\r\n}\r\n\r\nexport default DirectView;","import { Redirect } from \"react-router-dom\";\r\nimport DataUtil from \"../../utils/dataUtil\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport { GlobalContext } from \"./systemEntry\";\r\n\r\nconst DirectLogin = (props: {\r\n    hashKey: string;\r\n}) => {\r\n\r\n    const { store, setStore } = useContext(GlobalContext);\r\n\r\n    useEffect(() => {\r\n        const seq = DataUtil.getDecryptionedUserSeq(props.hashKey);\r\n        console.log(seq);\r\n        DataUtil.findUserInfoFromSeq(seq).then(resList => {\r\n            console.log(resList);\r\n            if (resList.length > 0) {\r\n                const loginProps = resList[0];\r\n                // store.userEnv.login = loginProps;\r\n                // dispatcher.system.setUserEnv(store.userEnv);\r\n            }\r\n        });\r\n    }, []);\r\n    // if (store.userEnv.login == null) {\r\n    //     return <></>;\r\n    // } else {\r\n    //     return <Redirect to=\"/\" />;\r\n    //     // return <MainFrame />;\r\n    // }\r\n    return <Redirect to=\"/\" />;\r\n}\r\n\r\nexport default DirectLogin;","\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Styles from \"../../base/design/styles\";\r\nimport DataUtil from \"../../utils/dataUtil\";\r\nimport { HOME_USER_DIV_HEIGHT } from \"../../utils/systemConst\";\r\nimport { GlobalContext } from \"../entry/systemEntry\";\r\n\r\n\r\ntype NotePorp = {\r\n    version: string;\r\n    date: string;\r\n    note: string;\r\n}\r\n\r\nconst ReleaseNote = () => {\r\n    const { store } = useContext(GlobalContext);\r\n\r\n    const [jsx, setJsx] = useState<JSX.Element[]>([]);\r\n    useEffect(() => {\r\n        fetch('assets/release_note.json')\r\n            .then(response => response.json()) // (2) レスポンスデータを取得\r\n            .then(json => { // (3)レスポンスデータを処理\r\n                const list = json as NotePorp[];\r\n\r\n                setJsx(list.map((item, i) => {\r\n                    const record = item.note.split('\\n').map((r, i) => <span key={i}>{r}<br /></span>);\r\n                    return (\r\n                        <_Item key={i}>\r\n                            <_Header>v{item.version} ({item.date})</_Header>\r\n                            <_Detail>{record}</_Detail>\r\n                        </_Item>\r\n                    );\r\n                }));\r\n            });\r\n    }, []);\r\n\r\n    return (<_ListFrame>{jsx}</_ListFrame>);\r\n}\r\n\r\nexport default ReleaseNote;\r\n\r\nconst _ListFrame = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    width: calc(100% - 8px);\r\n    /* height: calc(100% - ${HOME_USER_DIV_HEIGHT + 90}px); */\r\n    height: calc(100% - 48px);\r\n    margin: 4px 0 0 4px;\r\n    background-color: #d3d3c5;\r\n    border: 1px solid #e60000;\r\n    border-radius: 4px;\r\n    box-sizing: border-box;\r\n    overflow-y: auto;\r\n`;\r\n\r\nconst _Item = styled.div`\r\n    display: inline-block;\r\n    width: calc(100% - 8px);\r\n    margin: 4px 0 0 4px;\r\n    background-color: #bfcace;\r\n    border: 1px solid #9b9b9b;\r\n    border-radius: 6px;\r\n`;\r\n\r\nconst _Header = styled.div`\r\n    display: inline-block;\r\n    width: calc(100% - 8px);\r\n    height: 20px;\r\n    font-size: ${Styles.FONT_SMALL}px;\r\n    margin: 2px 0 0 4px;\r\n    font-weight: 600;\r\n    /* background-color: #8bdbf8; */\r\n    color: #494975;\r\n`;\r\n\r\nconst _Detail = styled.div`\r\n    display: inline-block;\r\n    width: calc(100% - 8px);\r\n    font-size: ${Styles.FONT_SMALL}px;\r\n    margin: 2px 0 0 4px;\r\n    /* background-color: #dafce4; */\r\n    color: #754949;\r\n`;","import { useContext, useEffect, useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport Styles, { _CSS_LABEL_MIDIUM } from \"../../base/design/styles\";\r\nimport DataUtil from \"../../utils/dataUtil\";\r\nimport { HOME_USER_DIV_HEIGHT } from \"../../utils/systemConst\";\r\nimport { GlobalContext } from \"../entry/systemEntry\";\r\nimport ReleaseNote from \"./releaseNote\";\r\n\r\ntype scoreProps = {\r\n    dispnam: string;\r\n    seq: number;\r\n    owner: string;\r\n    lastmod: string;\r\n}\r\n\r\nconst HomeChannel = () => {\r\n\r\n    const { store, setStore } = useContext(GlobalContext);\r\n\r\n    const [userCount, setUserCount] = useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n    }, []);\r\n\r\n\r\n    return (<_Wrap>\r\n        <_Left>\r\n            <_MessageRecord>{userCount} users have created accounts.</_MessageRecord>\r\n            <ReleaseNote />\r\n        </_Left>\r\n        <_Right>\r\n            <_MessageRecord>{0} arts have been published.</_MessageRecord>\r\n        </_Right>\r\n    </_Wrap>);\r\n}\r\n\r\nexport default HomeChannel;\r\n\r\nexport const countUsers = async () => {\r\n    const response = await DataUtil.sendQueryRequestToAPI('select', `SELECT count(*) cnt FROM user_tbl`);\r\n    const results = await response.json();\r\n    return (results as any[])[0]['cnt'] as number;\r\n};\r\n\r\nexport const findAllScore = async () => {\r\n    const response = await DataUtil.sendQueryRequestToAPI('select', `\r\n        SELECT seq, (select id from user_tbl where seq = score.user_seq) as owner, dispnam, lastmod\r\n        FROM scoretbl score\r\n        WHERE share <> 'url'\r\n        ORDER BY lastmod desc\r\n    `);\r\n    const results = await response.json();\r\n    return results as any[];\r\n};\r\n\r\nconst _Wrap = styled.div`\r\n    display: inline-block;\r\n    width: calc(100% - 8px);\r\n    height: calc(100% - 8px);\r\n    margin: 4px 0 0 4px;\r\n    background-color: #ccc;\r\n`;\r\n\r\nconst _Left = styled.div`\r\n    display: inline-block;\r\n    width: 50%;\r\n    height: 100%;\r\n    background-color: #bbcac7;\r\n`;\r\n\r\n\r\nconst _MessageRecord = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 40px;\r\n    font-size: 22px;\r\n    font-weight: 600;\r\n    color: #cd0202;\r\n    background-color: #ffffff3d;\r\n    padding: 0 0 0 10px;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nconst _ListInfoDiv = styled.div<{\r\n    isEnable: boolean;\r\n}>`\r\n    display: inline-block;\r\n    width: calc(100% - 8px);\r\n    height: ${HOME_USER_DIV_HEIGHT}px;\r\n    margin: 4px 0 4px 4px;\r\n    background-color: #acacac;\r\n    border: solid 1px #1b00b3;\r\n    ${props => props.isEnable ? '' : css`\r\n        opacity: 0.3;\r\n        pointer-events: none;\r\n    `}\r\n    border-radius: 4px;\r\n    box-sizing: border-box;\r\n    color: #060053;\r\n`;\r\n\r\nconst _TitleLabel = styled.div`\r\n    display: inline-block;\r\n    height: 40px;\r\n    font-size: 30px;\r\n    font-weight: 600;\r\n    color: #1c2c95;\r\n    /* background-color: #3f80cf57; */\r\n    padding: 0 10px;\r\n`;\r\nconst _Recored = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 35px;\r\n    /* background-color: #3fcf7b56; */\r\n    padding: 4px 0 0 10px;\r\n`;\r\n\r\nconst _ItemnLabel = styled.div`\r\n    display: inline-block;\r\n    height: calc(100% - 4px);\r\n    width: 140px;\r\n    font-size: 24px;\r\n    line-height: 24px;\r\n    font-weight: 600;\r\n    color: #08106e;\r\n    border: solid 1px #1b00b3;\r\n    box-sizing: border-box;\r\n    /* background-color: #85a2c5; */\r\n    background: linear-gradient(to bottom, #8a98a7, #a3bbd2, #8a98a7);\r\n    border-radius: 4px;\r\n    text-align: center;\r\n`;\r\n\r\nconst _ItemnValue = styled.div`\r\n    display: inline-block;\r\n    height: calc(100% - 4px);\r\n    width: calc(100% - 170px);\r\n    margin-left: 10px;\r\n    font-size: 24px;\r\n    line-height: 30px;\r\n    user-select: text;\r\n    /* font-weight: 600; */\r\n    color: #ffffff;\r\n    padding: 0 5px;\r\n    box-sizing: border-box;\r\n    background-color: #808080;\r\n    text-align: left;\r\n`;\r\n\r\nconst _ItemnForm = styled.input`\r\n    display: inline-block;\r\n    height: calc(100% - 4px);\r\n    width: calc(100% - 170px);\r\n    margin-left: 10px;\r\n    font-size: 24px;\r\n    line-height: 24px;\r\n    /* font-weight: 600; */\r\n    color: #1a1a1a;\r\n    padding: 0 5px;\r\n    box-sizing: border-box;\r\n    background-color: #e9e9e9;\r\n    text-align: left;\r\n`;\r\n\r\nconst _ButtonsDiv = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 40px;\r\n    /* background-color: #888888; */\r\n    box-sizing: border-box;\r\n    text-align: left;\r\n`;\r\n\r\nconst _Button = styled.div<{\r\n    isEnable: boolean;\r\n}>`\r\n    ${_CSS_LABEL_MIDIUM}\r\n    /* width: 160px; */\r\n    padding: 0 40px;\r\n    /* line-height: 25px; */\r\n    box-sizing: border-box;\r\n    background-color: #a8a8a8;\r\n    background: linear-gradient(to bottom, #787878, #b4b4b4, #787878);\r\n    border: 1px solid #1a2b3f;\r\n    color: #1a2b3f;\r\n    border-radius: 4px;\r\n    margin: 5px 0 0 4px;\r\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\r\n    &:hover {\r\n        /* background-color: #98bfc2; */\r\n    background: linear-gradient(to bottom, #989898, #b4b4b4, #989898);\r\n    }\r\n`;\r\n\r\n\r\n\r\nconst _Right = styled.div`\r\n    display: inline-block;\r\n    width: 50%;\r\n    height: 100%;\r\n    background-color: #bbbfca;\r\n    vertical-align: top;\r\n`;\r\nconst _ListFrame = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    width: calc(100% - 8px);\r\n    height: calc(100% - 42px);\r\n    margin: 4px 0 0 4px;\r\n    background-color: #d3d3c5;\r\n    border: 1px solid #e60000;\r\n    border-radius: 4px;\r\n    box-sizing: border-box;\r\n    overflow-y: auto;\r\n`;\r\nconst _CloudItem = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    /* height: 60px; */\r\n    border-bottom: 1px solid #888888;\r\n    /* background-color: white; */\r\n    background: linear-gradient(to bottom, transparent, #b6b6b684);\r\n    margin: 2px 0 0 0;\r\n    padding: 0 0 0 4px;\r\n    box-sizing: border-box;\r\n    /* padding-left: 4px; */\r\n    &:hover {\r\n        background: linear-gradient(to bottom, transparent, #ffffff5c);\r\n    }\r\n`;\r\n\r\nconst _Owner = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 20px;\r\n    line-height: 21px;\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n    color: #c9494f;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n`;\r\nconst _CName = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    width: calc(100% - 250px);\r\n    height: 35px;\r\n    font-size: 24px;\r\n    line-height: 36px;\r\n    font-weight: 600;\r\n    color: #47417c;\r\n    /* background-color: #f8f8e8; */\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n`;\r\nconst _CDate = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    width: 250px;\r\n    height: 35px;\r\n    font-size: 24px;\r\n    line-height: 36px;\r\n    font-weight: 600;\r\n    color: #417c49;\r\n    /* background-color: #f8f8e8; */\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n`;","import { useContext, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { ChannelPane } from \"../../base/components/tab/channelPane\";\r\nimport { TabbedPane } from \"../../base/components/tab/tabbedPane\";\r\nimport { MAIN_FRAME_MARGIN } from \"../../utils/systemConst\";\r\nimport { GlobalContext } from \"./systemEntry\";\r\nimport { AiFillHome } from 'react-icons/ai';\r\nimport { CgOptions, CgPiano } from 'react-icons/cg';\r\nimport { VscGitPullRequestCreate } from 'react-icons/vsc';\r\nimport { HashRouter, Redirect, Route, Switch, useLocation } from \"react-router-dom\";\r\nimport CreateChannel from \"../create/createChannel\";\r\nimport DirectView from \"./directView\";\r\nimport DirectLogin from \"./directLogin\";\r\nimport HomeChannel from \"../home/homeChannel\";\r\n\r\nconst MainFrame = () => {\r\n\r\n    const { store, setStore } = useContext(GlobalContext);\r\n\r\n    return (\r\n        <HashRouter basename={process.env.PUBLIC_URL}>\r\n            <RouterManage />\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default MainFrame;\r\n\r\nconst RouterManage = () => {\r\n\r\n    const { store, setStore } = useContext(GlobalContext);\r\n\r\n    const query = new URLSearchParams(useLocation().search);\r\n    const str = query.get('v') as string;\r\n\r\n    return (\r\n        <Switch>\r\n            <Route path=\"/\" exact>\r\n                <_Wrap>\r\n                    <ChannelPane\r\n                        tabElements={[\r\n                            { name: 'Home', icon: <AiFillHome />, isEnable: true, cont: <HomeChannel /> },\r\n                            { name: 'Create', icon: <VscGitPullRequestCreate />, isEnable: true, cont: <CreateChannel/> },\r\n                        ]}\r\n                        activeNo={0}\r\n                    // selectTabIndex={(index: number) => dispatcher.system.setMainTabIndex(index)}\r\n                    />\r\n                </_Wrap>\r\n            </Route>\r\n            <Route path=\"/test\" exact >\r\n                <_Wrap>\r\n                </_Wrap>\r\n            </Route>\r\n            <Route path=\"/preview\" exact >\r\n                <DirectView hashKey={str} />\r\n            </Route>\r\n            <Route path=\"/user\" exact >\r\n                <DirectLogin hashKey={str} />\r\n            </Route>\r\n        </Switch>\r\n    );\r\n}\r\n\r\n\r\n\r\nconst _Wrap = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    margin: ${MAIN_FRAME_MARGIN}px 0 0 ${MAIN_FRAME_MARGIN}px;\r\n    width: calc(100% - ${MAIN_FRAME_MARGIN * 2}px);\r\n    height: calc(100% - ${MAIN_FRAME_MARGIN * 2}px);\r\n    background-color: transparent;\r\n    /* background-color: #c3d8dd6f; */\r\n    /* border: solid 1px black;\r\n    border-radius: 5px; */\r\n    /* box-shadow: 0 2px 14px 4px #000b3a48; */\r\n`;","\r\nimport { useEffect, useState } from 'react';\r\nimport styled, { css, keyframes } from 'styled-components';\r\n\r\nconst Splash = (props: {\r\n    remove: () => void\r\n}) => {\r\n    const [isSwitch, setSwitch] = useState<boolean>(false);\r\n    const [timerId, setTimerId] = useState<NodeJS.Timeout>();\r\n\r\n    useEffect(() => {\r\n        setTimerId(setTimeout(() => {\r\n            setSwitch(true);\r\n        }, 3000));\r\n    }, []);\r\n    useEffect(() => {\r\n        if (isSwitch) {\r\n            setTimeout(() => {\r\n                props.remove();\r\n            }, 500);\r\n        }\r\n    }, [isSwitch]);\r\n\r\n    return (\r\n\r\n        <_Blind isSwitch={isSwitch} onClick={(e) => {\r\n            clearTimeout(timerId as NodeJS.Timeout);\r\n            setSwitch(true);\r\n        }}>\r\n            <_Frame>\r\n                <_Title>\r\n                    <span>L</span>iCreSia\r\n                </_Title>\r\n                <_NowLoading>Now Loading...</_NowLoading>\r\n                <_Copylight>Copyright © 2022 Licresia All Rights Reserved.</_Copylight>\r\n            </_Frame>\r\n        </_Blind>\r\n    );\r\n}\r\n\r\nexport default Splash;\r\n\r\nconst _Blind = styled.div<{\r\n    isSwitch: boolean;\r\n}>`\r\n    display: inline-block;\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    z-index: 10;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #000f3a86;\r\n    opacity: ${props => props.isSwitch ? '0' : '1'};\r\n    transition: opacity 500ms;\r\n`;\r\nconst _Frame = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    position: relative;\r\n    left: calc(50% - 450px);\r\n    top: calc(50% - 300px);\r\n    z-index: 11;\r\n    width: 900px;\r\n    height: 600px;\r\n    background: radial-gradient(#868686, #ffffff);\r\n    border-radius: 8px;\r\n    border: solid 2px #cfcfcf;\r\n    box-sizing: border-box;\r\n    transition: opacity 500ms;\r\n`;\r\n\r\n\r\nconst fadeIn = keyframes`\r\n  0%, 100% {\r\n    opacity: 0.4;\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst _Title = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    margin-top: 10%;\r\n    width: 100%;\r\n    /* height: 400px; */\r\n    /* background-color: #0003b69e; */\r\n    background: linear-gradient(to bottom, #99999913, #ffffff13,#ffffff13,#ffffff13, #99999913);\r\n    color: white;\r\n    font-size: 130px;\r\n    font-weight: 600;\r\n    text-align: center;\r\n    text-shadow: 1px 2px 22px #0000003d;\r\n    /* line-height: 350px; */\r\n    animation: ${fadeIn} 3s linear infinite;\r\n    /* -webkit-box-reflect:below 1px; */\r\n    -webkit-box-reflect: below 1px -webkit-gradient(\r\n      linear,left top,left bottom,\r\n      from(transparent),\r\n      color-stop(0.6, transparent),\r\n      to(#f80000));\r\n    & span {\r\n        color: red;\r\n        font-size: 160px;\r\n    }\r\n`;\r\n\r\nconst _NowLoading = styled.div`\r\n    display: inline-block;\r\n    position: absolute;\r\n    bottom: 80px;\r\n    width: 100%;\r\n    left: 20px;\r\n    color: #ffffff;\r\n    font-size: 42px;\r\n    font-weight: 600;\r\n    text-align: center;\r\n`;\r\n\r\nconst _Copylight = styled.div`\r\n    display: inline-block;\r\n    position: absolute;\r\n    bottom: 5px;\r\n    left: 20px;\r\n    color: #636363;\r\n    font-size: 22px;\r\n    font-weight: 600;\r\n    text-align: left;\r\n`;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport CanvasUtil from \"../../../utils/canvasUtil\";\r\nimport DataUtil from \"../../../utils/dataUtil\";\r\nimport FormUtil from \"../../../utils/form/formUtiil\";\r\nimport ValidateUtil from \"../../../utils/form/validateUtil\";\r\nimport { GlobalContext } from \"../../entry/systemEntry\";\r\nimport AccountFrame from \"../accountFrame\";\r\nimport ConfirmDialog from \"../confirmDialog\";\r\n\r\nconst LoginCreateAccount = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n\r\n    const [isRegist, setRegist] = useState(false);\r\n\r\n    const [userId, setUserId] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [password, setPassword] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [passwordConfirm, setPasswordConfirm] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [messageList, setMessageList] = useState<string[]>([]);\r\n\r\n    const [userIdList, setUserIdList] = useState<string[]>([]);\r\n\r\n    const createAuthText = () => {\r\n        // const list = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n        // const list = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n        const list = '0123456789';\r\n        let text = '';\r\n        for (let i = 0; i < 6; i++) {\r\n            text += list.charAt(Math.random() * list.length);\r\n        }\r\n        return text;\r\n    };\r\n\r\n    /** 既存のユーザIDリストを格納 */\r\n    useEffect(() => {\r\n        DataUtil.findUserIdList().then(list => {\r\n            setUserIdList(list);\r\n        });\r\n\r\n        // fetch('https://api.ipify.org/?format=json').then(res => {\r\n        //     res.json().then(data => {\r\n        //         alert(data['ip']);\r\n        //     });\r\n        // });\r\n    }, []);\r\n\r\n    const [authCollation, setAuthCollation] = useState<string>(createAuthText());\r\n    const [authInput, setAuthInput] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n\r\n    /** キャッシュした認証画像 */\r\n    const authPicture = useMemo(() => {\r\n        return CanvasUtil.getAuthTextURL(authCollation);\r\n\r\n    }, [authCollation]);\r\n\r\n    useEffect(() => {\r\n        const list: string[] = [];\r\n        if (userId.errors.length > 0) {\r\n            switch (userId.errors[0]) {\r\n                case 'required': list.push('[user id] is required.'); break;\r\n                case 'length': list.push('[user id] set a value between 4 and 20.'); break;\r\n                case 'value': list.push('[user id] accepts only half-width alphanumeric characters.'); break;\r\n                case 'relation': list.push('[user id] already in use.'); break;\r\n            }\r\n        }\r\n        if (password.errors.length > 0) {\r\n            switch (password.errors[0]) {\r\n                case 'required': list.push('[password] is required.'); break;\r\n                case 'length': list.push('[password] set a value between 4 and 20.'); break;\r\n                case 'relation': list.push('[password] does not match confirm.'); break;\r\n            }\r\n        }\r\n        if (passwordConfirm.errors.length > 0) {\r\n            switch (passwordConfirm.errors[0]) {\r\n                case 'length': list.push('[password *] set a value between 4 and 20.'); break;\r\n            }\r\n        }\r\n        setMessageList(list);\r\n    }, [userId, password]);\r\n\r\n    const registAction = () => {\r\n\r\n        (async () => {\r\n            let response = await DataUtil.sendQueryRequestToAPI('select', `SELECT count(*) as cnt FROM user_tbl where id = '${userId}'`);\r\n            let results = await response.json();\r\n            console.log(JSON.stringify(results[0].cnt));\r\n            const isExist = results[0].cnt > 0;\r\n            if (isExist) {\r\n                setMessageList(['That user id has already been recorded.']);\r\n            } else {\r\n                const nextSeq = await DataUtil.getNextUserSeq();\r\n                console.log(nextSeq);\r\n                await DataUtil.sendQueryRequestToAPI('update', `INSERT INTO user_tbl(seq, id, password) VALUES(${nextSeq}, '${userId.value}', '${password.value}')`)\r\n                store.system.dialog = (<ConfirmDialog.Component\r\n                    message='You have successfully created an account!'\r\n                    buttons={[\r\n                        {\r\n                            label: 'OK',\r\n                            callback: () => {\r\n                                // store.userEnv.login = {\r\n                                //     seq: nextSeq,\r\n                                //     id: userId.value,\r\n                                //     password: password.value,\r\n                                //     email: '',\r\n                                // };\r\n                                // dispatcher.system.setUserEnv(store.userEnv);\r\n                                // dispatcher.system.setDialog(<AccountFrame />);\r\n                            }\r\n                        }\r\n                    ]}\r\n                />);\r\n            }\r\n        })();\r\n    }\r\n\r\n    const isLoginInfoOK = () => {\r\n        return userId.errors.length === 0 && password.errors.length === 0 && passwordConfirm.errors.length === 0;\r\n    }\r\n    const isAuthOK = () => {\r\n        return authInput.errors.length === 0 && authCollation === authInput.value;\r\n    }\r\n\r\n    return (<>\r\n\r\n        <_Frame isVisible={!isRegist}>\r\n            <FormUtil.BorderPanel\r\n                title=\"Login information\"\r\n                innerJsx={<>\r\n                    <FormUtil.Message\r\n                        message={'Please, enter User ID/Pass (Confirm).'}\r\n                    />\r\n                    <FormUtil.InputTextFormBak\r\n                        placeholder={'user id'}\r\n                        checkable={userId}\r\n                        setCheckable={setUserId}\r\n                        validates={[\r\n                            {\r\n                                checker: (value) => ValidateUtil.checkRequired(value),\r\n                                errorType: \"required\"\r\n                            },\r\n                            {\r\n                                checker: (value) => ValidateUtil.checkStringLength(value, 4, 20),\r\n                                errorType: \"length\"\r\n                            },\r\n                            {\r\n                                checker: (value) => ValidateUtil.checkAsciiChars(value),\r\n                                errorType: \"value\"\r\n                            },\r\n                            {\r\n                                checker: (value) => !userIdList.includes(value),\r\n                                errorType: \"relation\"\r\n                            },\r\n                        ]}\r\n                        width={300}\r\n                        isCenter\r\n                    />\r\n                    <FormUtil.InputTextFormBak\r\n                        placeholder={'password'}\r\n                        isPassword\r\n                        checkable={password}\r\n                        setCheckable={setPassword}\r\n                        validates={[\r\n                            {\r\n                                checker: (value) => ValidateUtil.checkRequired(value),\r\n                                errorType: \"required\"\r\n                            },\r\n                            {\r\n                                checker: (value) => ValidateUtil.checkStringLength(value, 4, 20),\r\n                                errorType: \"length\"\r\n                            },\r\n                            {\r\n                                checker: (value) => value === passwordConfirm.value,\r\n                                errorType: \"relation\"\r\n                            }\r\n                        ]}\r\n                        dependency={[passwordConfirm]}\r\n                        width={300}\r\n                        isCenter\r\n                    />\r\n                    <FormUtil.InputTextFormBak\r\n                        placeholder={'password*'}\r\n                        isPassword\r\n                        checkable={passwordConfirm}\r\n                        setCheckable={setPasswordConfirm}\r\n                        validates={[\r\n                            {\r\n                                checker: (value) => ValidateUtil.checkRequired(value),\r\n                                errorType: \"required\"\r\n                            },\r\n                            {\r\n                                checker: (value) => ValidateUtil.checkStringLength(value, 4, 20),\r\n                                errorType: \"length\"\r\n                            },\r\n                            {\r\n                                checker: (value) => value === password.value,\r\n                                errorType: \"relation\"\r\n                            }\r\n                        ]}\r\n                        dependency={[password]}\r\n                        width={300}\r\n                        isCenter\r\n                    />\r\n                    <FormUtil.InfoFrame textRecords={messageList} />\r\n                    <FormUtil.ButtonRecord\r\n                        buttons={[\r\n                            {\r\n                                label: 'Enter', isEnable: isLoginInfoOK(), callback: () => {\r\n                                    setRegist(true);\r\n                                }\r\n                            },\r\n                        ]}\r\n                    />\r\n                </>}\r\n            />\r\n        </_Frame>\r\n        <_Frame isVisible={isRegist}>\r\n            <FormUtil.BorderPanel\r\n                title=\"Proof not a robot\"\r\n                innerJsx={<>\r\n                    <FormUtil.Message\r\n                        message={'Please, input the same 6 number as the picture.'}\r\n                    />\r\n                    <_AuthText src={authPicture} />\r\n                    <FormUtil.ButtonRecord\r\n                        buttons={[\r\n                            {\r\n                                label: 'Change', callback: () => {\r\n                                    setAuthCollation(createAuthText());\r\n                                    setAuthInput({ value: '', errors: [] });\r\n                                }\r\n                            },\r\n                        ]}\r\n                    />\r\n                    {/* 照合する文字列 */}\r\n                    <FormUtil.InputTextFormBak\r\n                        placeholder={'6 numbers'}\r\n                        checkable={authInput}\r\n                        setCheckable={setAuthInput}\r\n                        width={300}\r\n                        isCenter\r\n                    />\r\n                    <FormUtil.ButtonRecord\r\n                        buttons={[\r\n                            { label: 'Regist', isEnable: isAuthOK(), callback: registAction },\r\n                        ]}\r\n                    />\r\n                </>}\r\n            />\r\n            <FormUtil.MessageLink\r\n                message=\"Return to login information.\"\r\n                clickAction={() => {\r\n                    setRegist(false);\r\n                }}\r\n            />\r\n        </_Frame>\r\n    </>);\r\n};\r\n\r\nexport default LoginCreateAccount;\r\n\r\nconst _Frame = styled.div<{\r\n    isVisible: boolean;\r\n}>`\r\n    display: ${props => props.isVisible ? 'block' : 'none'};\r\n`;\r\n\r\nconst _AuthText = styled.img<{\r\n}>`\r\n    display: block;\r\n    text-align: center;\r\n    margin: 4px auto;\r\n    background-color: #f7f0f0;\r\n    border: 1px solid #888888;\r\n    box-sizing: border-box;\r\n`;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport Styles from \"../../../base/design/styles\";\r\nimport DataUtil from \"../../../utils/dataUtil\";\r\nimport FormUtil from \"../../../utils/form/formUtiil\";\r\nimport ValidateUtil from \"../../../utils/form/validateUtil\";\r\nimport { GlobalContext } from \"../../entry/systemEntry\";\r\nimport ConfirmDialog from \"../confirmDialog\";\r\n\r\nconst LoginLogin = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n\r\n    const [isForget, setForget] = useState(false);\r\n\r\n    const [userId, setUserId] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [password, setPassword] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [email, setEmail] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [messageList, setMessageList] = useState<string[]>([]);\r\n\r\n    useEffect(() => {\r\n        const list: string[] = [];\r\n        if (userId.errors.length > 0) {\r\n            switch (userId.errors[0]) {\r\n                case 'required': list.push('[user id] is required.'); break;\r\n                case 'length': list.push('[user id] set a value between 4 and 20.'); break;\r\n                case 'value': list.push('[user id] accepts only half-width alphanumeric characters.'); break;\r\n                case 'relation': list.push('[user id] already in use.'); break;\r\n            }\r\n        }\r\n        if (password.errors.length > 0) {\r\n            switch (password.errors[0]) {\r\n                case 'required': list.push('[password] is required.'); break;\r\n                case 'length': list.push('[password] set a value between 4 and 20.'); break;\r\n            }\r\n        }\r\n        setMessageList(list);\r\n    }, [userId, password]);\r\n\r\n    /**\r\n     * Enterボタン押下時の処理\r\n     */\r\n    const enterAction = () => {\r\n        // alert(`Confirmation passwords don't match.`);\r\n        (async () => {\r\n            const results = await DataUtil.findUserInfoLogin(userId.value, password.value);\r\n            console.log(JSON.stringify(results));\r\n            if (results.length > 0) {\r\n                store.system.user = {\r\n                    seq: results[0].seq,\r\n                    id: results[0].id,\r\n                    password: results[0].password,\r\n                    email: results[0].email,\r\n                };\r\n                store.system.dialog = <ConfirmDialog.Component\r\n                    message=\"Login successful!\"\r\n                />;\r\n                setStore({...store});\r\n            } else {\r\n                setMessageList(['Incorrect user id or password.']);\r\n                // setPassword({ ...password, value: '' });\r\n            }\r\n        })();\r\n    }\r\n\r\n    const isLoginInfoOK = () => {\r\n        return userId.errors.length === 0 && password.errors.length === 0;\r\n    }\r\n\r\n    return (<>\r\n        <_Frame isVisible={!isForget}>\r\n            <FormUtil.BorderPanel\r\n                title=\"Login information\"\r\n                innerJsx={<>\r\n                    <FormUtil.Message\r\n                        message={'Please, enter User ID/Pass.'}\r\n                    />\r\n                    <FormUtil.InputTextFormBak\r\n                        placeholder={'user id'}\r\n                        checkable={userId}\r\n                        setCheckable={setUserId}\r\n                        validates={[\r\n                            {\r\n                                checker: (value) => ValidateUtil.checkRequired(value),\r\n                                errorType: \"required\"\r\n                            },\r\n                            {\r\n                                checker: (value) => ValidateUtil.checkStringLength(value, 4, 20),\r\n                                errorType: \"length\"\r\n                            },\r\n                            {\r\n                                checker: (value) => ValidateUtil.checkAsciiChars(value),\r\n                                errorType: \"value\"\r\n                            }\r\n                        ]}\r\n                        width={300}\r\n                        isCenter\r\n                    />\r\n                    <FormUtil.InputTextFormBak\r\n                        placeholder={'password'}\r\n                        isPassword\r\n                        checkable={password}\r\n                        setCheckable={setPassword}\r\n                        validates={[\r\n                            {\r\n                                checker: (value) => ValidateUtil.checkRequired(value),\r\n                                errorType: \"required\"\r\n                            },\r\n                            {\r\n                                checker: (value) => ValidateUtil.checkStringLength(value, 4, 20),\r\n                                errorType: \"length\"\r\n                            }\r\n                        ]}\r\n                        width={300}\r\n                        isCenter\r\n                    />\r\n                    <FormUtil.InfoFrame textRecords={messageList} />\r\n                    <FormUtil.ButtonRecord\r\n                        buttons={[\r\n                            { label: 'Enter', isEnable: isLoginInfoOK(), callback: enterAction },\r\n                        ]}\r\n                    />\r\n                </>}\r\n            />\r\n            <FormUtil.MessageLink\r\n                message=\"Forgot your login information?\"\r\n                clickAction={() => {\r\n                    setForget(true);\r\n                }}\r\n            />\r\n        </_Frame>\r\n        <_Frame isVisible={isForget}>\r\n            <FormUtil.BorderPanel\r\n                title=\"Email\"\r\n                innerJsx={<>\r\n                    <FormUtil.Message\r\n                        message={'Submit login information to account address.'}\r\n                    />\r\n                    <FormUtil.InputTextFormBak\r\n                        placeholder={'email'}\r\n                        checkable={email}\r\n                        setCheckable={setEmail}\r\n                        validates={[\r\n                            {\r\n                                checker: (value) => ValidateUtil.checkRequired(value),\r\n                                errorType: \"required\"\r\n                            },\r\n                            {\r\n                                checker: (value) => ValidateUtil.checkStringLength(value, 4, 40),\r\n                                errorType: \"length\"\r\n                            },\r\n                            {\r\n                                checker: (value) => {\r\n                                    return value.length === 0 || value.split('@').length === 2;\r\n                                },\r\n                                errorType: \"value\"\r\n                            }\r\n                        ]}\r\n                        width={500}\r\n                        isCenter\r\n                    />\r\n                    <FormUtil.ButtonRecord\r\n                        buttons={[\r\n                            {\r\n                                label: 'Send', isEnable: email.errors.length === 0, callback: () => {\r\n                                    DataUtil.findUserInfoFromEmail(email.value).then((list) => {\r\n                                        if (list.length > 0) {\r\n                                            const info = list[0];\r\n                                            const hash = DataUtil.getHashedFromUserSeq(info.seq);\r\n                                            const url = `https://demo-app.licresia.com/#/user?v=${hash}`;\r\n                                            DataUtil.sendQueryRequestToMailAPI({\r\n                                                from: 'info@licresia.com',\r\n                                                to: email.value,\r\n                                                subject: '【LiCreSia】support',\r\n                                                text: `Your login information is as follows.\\n\\nURL: ${url}\\nUSR ID: ${info.id}`\r\n                                            });\r\n                                            // dispatcher.system.setDialog(<ConfirmDialog.Component message=\"Your login information has been sent!\" />);\r\n                                        } else {\r\n                                            // dispatcher.system.setDialog(<ConfirmDialog.Component message=\"This email address is not registered.\" />);\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                        ]}\r\n                    />\r\n                </>}\r\n            />\r\n            <FormUtil.MessageLink\r\n                message=\"Return to login information.\"\r\n                clickAction={() => {\r\n                    setForget(false);\r\n                }}\r\n            />\r\n        </_Frame>\r\n    </>);\r\n};\r\n\r\nexport default LoginLogin;\r\n\r\n\r\nconst _Frame = styled.div<{\r\n    isVisible: boolean;\r\n}>`\r\n    display: ${props => props.isVisible ? 'block' : 'none'};\r\n`;\r\n","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport Styles from \"../../../base/design/styles\";\r\nimport CanvasUtil from \"../../../utils/canvasUtil\";\r\nimport FormUtil from \"../../../utils/form/formUtiil\";\r\nimport ValidateUtil from \"../../../utils/form/validateUtil\";\r\nimport { GlobalContext } from \"../../entry/systemEntry\";\r\nimport LoginCreateAccount from \"./loginCreateAccount\";\r\nimport LoginLogin from \"./loginLogin\";\r\n\r\nconst WIDTH = 600;\r\nconst HEIGHT = 500;\r\n\r\n/**\r\n * ログインフレームのコンポーネント\r\n * @returns \r\n */\r\nconst LoginFrame = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n\r\n    const [isCreate, setCreate] = useState(false);\r\n\r\n    const logo = useMemo(() => {\r\n        return CanvasUtil.getLogoURL();\r\n    }, []);\r\n\r\n    return (\r\n        <_Frame\r\n            width={WIDTH} height={HEIGHT}\r\n        >\r\n            <_LogoDiv>\r\n                <img src={logo} />\r\n            </_LogoDiv>\r\n            <_Header>\r\n                <_TypeSwitch isActive={!isCreate} onClick={() => {\r\n                    setCreate(false);\r\n                }}>Login</_TypeSwitch>\r\n                <_TypeSwitch isActive={isCreate} onClick={() => {\r\n                    setCreate(true);\r\n                }}>Create Account</_TypeSwitch>\r\n            </_Header>\r\n            {!isCreate ? <LoginLogin /> : <LoginCreateAccount />}\r\n            {/* <_Footer>\r\n                <FormUtil.ButtonRecord\r\n                    buttons={[\r\n                        { name: 'Close', callback: closeAction },\r\n                        { name: 'Enter', callback: enterAction },\r\n                    ]}\r\n                />\r\n            </_Footer> */}\r\n        </_Frame>\r\n    );\r\n}\r\n\r\nexport default LoginFrame;\r\n\r\nconst _Frame = styled.div<{\r\n    width: number;\r\n    height: number;\r\n}>`\r\n    display: inline-block;\r\n    position: absolute;\r\n    z-index: 11;\r\n    top: calc(50% - ${props => props.height / 2}px);\r\n    left: calc(50% - ${props => props.width / 2}px);\r\n    width: ${props => props.width}px;\r\n    height: ${props => props.height}px;\r\n    background-color: #e7e7e7e2;\r\n    border: 1px solid #9e9e9e;\r\n    border-radius: 4px;\r\n`;\r\n\r\nconst _LogoDiv = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 80px;\r\n    background-color: #eeeaea;\r\n    text-align: center;\r\n`;\r\nconst _Header = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 50px;\r\n    /* background-color: #d1d1d1; */\r\n    text-align: center;\r\n`;\r\n\r\nconst _TypeSwitch = styled.div<{\r\n    isActive: boolean;\r\n}>`\r\n    ${Styles.CSS_LABEL_MIDIUM};\r\n    background-color: #bf808075;\r\n    ${props => !props.isActive ? '' : css`\r\n        background-color: #c7a73e;\r\n    `}\r\n    color: white;\r\n    width: 250px;\r\n    margin: 10px 10px;\r\n    text-align: center;\r\n    &:hover {\r\n    background-color: #bf8080a2;\r\n        ${props => !props.isActive ? '' : css`\r\n            background-color: #c7a73e;\r\n        `}\r\n    }\r\n`;\r\nconst _Record = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    margin: 2px 0 0 0;\r\n    width: 100%;\r\n    height: 50px;\r\n    /* background-color: #e6e3c1; */\r\n    text-align: left;\r\n`;\r\n\r\nconst _Label = styled.div<{\r\n}>`\r\n    ${Styles.CSS_LABEL_MIDIUM};\r\n    /* background-color: #80e45832; */\r\n    color: #bd2d2d;\r\n    width: 150px;\r\n    margin: 10px 0 0 5px;\r\n    text-align: center;\r\n`;\r\n\r\nconst _TextField = styled.input<{\r\n}>`\r\n    ${Styles.CSS_LABEL_MIDIUM};\r\n    background-color: #f7f09787;\r\n    width: 300px;\r\n    margin: 10px 0 0 15px;\r\n    text-align: center;\r\n    border: solid 1px #5e5e5e;\r\n    text-align: left;\r\n    box-sizing: border-box;\r\n    border-radius: 4px;\r\n`;\r\n\r\nconst _Footer = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    position: absolute;\r\n    left: 0;\r\n    bottom: 0;\r\n    padding: 6px 4px 0 0;\r\n    box-sizing: border-box;\r\n    width: 100%;\r\n    height: 50px;\r\n    background-color: #d1d1d1;\r\n    text-align: right;\r\n`;\r\n\r\nconst _ExecutableButton = styled.div<{\r\n    isEnable: boolean;\r\n}>`\r\n    ${Styles.CSS_LABEL_MIDIUM};\r\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE};\r\n    background-color: #5c9253;\r\n    width: 150px;\r\n    margin: 10px 5px 0 0;\r\n    text-align: center;\r\n    &:hover {\r\n        background-color: #7eaf75;\r\n    }\r\n`;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport { GiTurret } from \"react-icons/gi\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { TabbedPane } from \"../../base/components/tab/tabbedPane\";\r\nimport Styles from \"../../base/design/styles\";\r\nimport StoreSystem from \"../../redux/store/storeSystem\";\r\nimport CanvasUtil from \"../../utils/canvasUtil\";\r\nimport DataUtil from \"../../utils/dataUtil\";\r\nimport FormUtil from \"../../utils/form/formUtiil\";\r\nimport ValidateUtil from \"../../utils/form/validateUtil\";\r\nimport ConfirmDialog from \"../dialog/confirmDialog\";\r\nimport { GlobalContext } from \"../entry/systemEntry\";\r\n\r\nconst WIDTH = 750;\r\nconst HEIGHT = 600;\r\n/**\r\n * アカウントフレームのコンポーネント\r\n * @returns \r\n */\r\nconst AccountFrame = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n\r\n    const [tabIndex, setTabIndex] = useState(0);\r\n\r\n    const [userId, setUserId] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [oldPass, setOldPass] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [newPass, setNewPass] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [newPassConfirm, setNewPassConfirm] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [email, setEmail] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n\r\n\r\n    const [userIdList, setUserIdList] = useState<string[]>([]);\r\n    const [emailList, setEmailList] = useState<string[]>([]);\r\n\r\n    const [isModify, setModify] = useState(false);\r\n    const loginProps = store.system.user as StoreSystem.User;\r\n\r\n    const reloadInfo = () => {\r\n        setUserId({ ...userId, value: loginProps.id });\r\n        setNewPass({ ...newPass, value: '' });\r\n        setNewPassConfirm({ ...newPassConfirm, value: '' });\r\n        setEmail({ ...email, value: loginProps.email });\r\n        setOldPass({ ...oldPass, value: loginProps.password });\r\n    }\r\n\r\n    useEffect(() => {\r\n        DataUtil.findUserInfoList().then(list => {\r\n\r\n            const userIdList: string[] = [];\r\n            const emailList: string[] = [];\r\n            list.forEach(info => {\r\n                if (info.id !== loginProps.id) userIdList.push(info.id);\r\n                if (info.email !== '') emailList.push(info.email);\r\n            });\r\n            setUserIdList(userIdList);\r\n            setEmailList(emailList);\r\n        });\r\n\r\n        const hash = DataUtil.getHashedFromUserSeq(loginProps.seq);\r\n\r\n        // ユーザページのURLに変更する。\r\n        window.history.replaceState('', '', `/#/user?v=${hash}`);\r\n\r\n        reloadInfo();\r\n\r\n        // 閉じる際にURLを元に戻す\r\n        return () => {\r\n            // alert('destroy');\r\n            window.history.replaceState('', '', `/#/`);\r\n        }\r\n    }, []);\r\n\r\n    const userTabJsx: JSX.Element = (\r\n        <_Wrap>\r\n\r\n            <FormUtil.InputTextFormBak\r\n                titleLabel={'user id'}\r\n                checkable={userId}\r\n                setCheckable={setUserId}\r\n                validates={[\r\n                    {\r\n                        checker: (value) => ValidateUtil.checkStringLength(value, 4, 20),\r\n                        errorType: \"length\"\r\n                    },\r\n                    {\r\n                        checker: (value) => ValidateUtil.checkAsciiChars(value),\r\n                        errorType: \"value\"\r\n                    },\r\n                    {\r\n                        checker: (value) => !userIdList.includes(value),\r\n                        errorType: \"relation\"\r\n                    },\r\n                ]}\r\n                width={300}\r\n                marginTop={5}\r\n                isReadOnly={!isModify}\r\n            />\r\n            <FormUtil.InputTextFormBak\r\n                titleLabel={'new pass'}\r\n                isPassword\r\n                checkable={newPass}\r\n                setCheckable={setNewPass}\r\n                validates={[\r\n                    {\r\n                        checker: (value) => ValidateUtil.checkStringLength(value, 4, 20),\r\n                        errorType: \"length\"\r\n                    },\r\n                    {\r\n                        checker: (value) => value === newPassConfirm.value,\r\n                        errorType: \"relation\"\r\n                    }\r\n                ]}\r\n                dependency={[newPassConfirm]}\r\n                width={300}\r\n                marginTop={5}\r\n                isReadOnly={!isModify}\r\n            />\r\n            <FormUtil.InputTextFormBak\r\n                titleLabel={'new pass*'}\r\n                isPassword\r\n                checkable={newPassConfirm}\r\n                setCheckable={setNewPassConfirm}\r\n                validates={[\r\n                    {\r\n                        checker: (value) => ValidateUtil.checkStringLength(value, 4, 20),\r\n                        errorType: \"length\"\r\n                    },\r\n                    {\r\n                        checker: (value) => value === newPass.value,\r\n                        errorType: \"relation\"\r\n                    }\r\n                ]}\r\n                dependency={[newPass]}\r\n                width={300}\r\n                marginTop={5}\r\n                isReadOnly={!isModify}\r\n            />\r\n            <FormUtil.InputTextFormBak\r\n                titleLabel={'email'}\r\n                checkable={email}\r\n                setCheckable={setEmail}\r\n                validates={[\r\n                    {\r\n                        checker: (value) => ValidateUtil.checkStringLength(value, 4, 40),\r\n                        errorType: \"length\"\r\n                    },\r\n                    {\r\n                        checker: (value) => {\r\n                            return value.length === 0 || value.split('@').length === 2;\r\n                        },\r\n                        errorType: \"value\"\r\n                    },\r\n                    {\r\n                        checker: (value) => !emailList.includes(value),\r\n                        errorType: \"relation\"\r\n                    },\r\n                ]}\r\n                // width={500}\r\n                marginTop={5}\r\n                isReadOnly={!isModify}\r\n            />\r\n            <FormUtil.InputTextFormBak\r\n                titleLabel={'old pass'}\r\n                isPassword\r\n                checkable={oldPass}\r\n                setCheckable={setOldPass}\r\n                validates={[\r\n                    {\r\n                        checker: (value) => value === loginProps.password,\r\n                        errorType: \"relation\"\r\n                    }\r\n                ]}\r\n                // dependency={[passwordConfirm]}\r\n                width={300}\r\n                marginTop={55}\r\n                isReadOnly={!isModify}\r\n            />\r\n        </_Wrap>\r\n    );\r\n\r\n    // 登録ボタンの活性状態\r\n    const permitRegist = (\r\n        userId.errors.length === 0\r\n        && newPass.errors.length === 0\r\n        && newPassConfirm.errors.length === 0\r\n        && email.errors.length === 0\r\n        && oldPass.errors.length === 0\r\n    );\r\n\r\n    const updateUserInfo = () => {\r\n        const passwordStr = newPass.value.length === 0 ? '' : `,password = '${newPass.value}'`;\r\n        DataUtil.sendQueryRequestToAPI('update',\r\n            `UPDATE user_tbl SET id = '${userId.value}', email = '${email.value}'${passwordStr}\r\n            WHERE seq = ${loginProps?.seq}`\r\n        ).then(() => {\r\n            loginProps.id = userId.value;\r\n            if (newPass.value.length > 0) {\r\n                loginProps.password = newPass.value;\r\n            }\r\n            loginProps.email = email.value;\r\n            // dispatcher.system.setUserEnv({ ...store.userEnv, login: { ...loginProps } });\r\n            // dispatcher.system.setDialog(<ConfirmDialog.Component message=\"Modify successful!\" />);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <_Frame\r\n            width={WIDTH} height={HEIGHT}\r\n        >\r\n            <_Header>\r\n                <FormUtil.Message\r\n                    message=\"If you bookmark this page, you can easily login by URL.\"\r\n                />\r\n            </_Header>\r\n            <_Body>\r\n                <TabbedPane\r\n                    tabElements={[\r\n                        { name: 'User', enable: false, cont: userTabJsx },\r\n                        { name: 'Security', enable: false, cont: <></> },\r\n                    ]}\r\n                    activeNo={tabIndex}\r\n                    selectTabIndex={(index: number) => setTabIndex(index)}\r\n                />\r\n            </_Body>\r\n            <_Footer>\r\n                <FormUtil.ButtonRecord\r\n                    buttons={[\r\n                        {\r\n                            label: 'Close',\r\n                            callback: () => {\r\n                                // dispatcher.system.closeDialog();\r\n                            }\r\n                        },\r\n                        {\r\n                            label: 'Cancel',\r\n                            isEnable: isModify,\r\n                            callback: () => {\r\n                                setModify(false);\r\n                                reloadInfo();\r\n                            }\r\n                        },\r\n                        {\r\n                            label: !isModify ? 'Modify' : 'Regist',\r\n                            isEnable: !isModify || permitRegist,\r\n                            callback: () => {\r\n                                if (!isModify) {\r\n                                    setModify(true);\r\n                                    setOldPass({ ...oldPass, value: '' });\r\n                                }\r\n                                else {\r\n                                    updateUserInfo();\r\n                                }\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n            </_Footer>\r\n        </_Frame>\r\n    );\r\n}\r\n\r\n\r\nexport default AccountFrame;\r\n\r\nconst _Frame = styled.div<{\r\n    width: number;\r\n    height: number;\r\n}>`\r\n    display: inline-block;\r\n    position: absolute;\r\n    z-index: 11;\r\n    top: calc(50% - ${props => props.height / 2}px);\r\n    left: calc(50% - ${props => props.width / 2}px);\r\n    width: ${props => props.width}px;\r\n    height: ${props => props.height}px;\r\n    background-color: #e7e7e7eb;\r\n    border: 1px solid #9e9e9e;\r\n    border-radius: 4px;\r\n`;\r\n\r\nconst _LogoDiv = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 80px;\r\n    background-color: #eeeaea;\r\n    text-align: center;\r\n`;\r\nconst _Header = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 50px;\r\n    /* background-color: #d1d1d1; */\r\n    /* text-align: center; */\r\n`;\r\nconst _Body = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: calc(100% - 100px);\r\n    padding: 4px;\r\n    box-sizing: border-box;\r\n    /* background-color: #d1d1d1; */\r\n    text-align: center;\r\n`;\r\n\r\n\r\nconst _Footer = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    position: absolute;\r\n    left: 0;\r\n    bottom: 0;\r\n    padding: 6px 4px 0 0;\r\n    box-sizing: border-box;\r\n    width: 100%;\r\n    height: 50px;\r\n    background-color: #d1d1d1;\r\n    text-align: right;\r\n`;\r\n\r\n\r\nconst _Wrap = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #cecece;\r\n`;","import styled, { css } from \"styled-components\";\r\nimport { TOTAL_HEADER_WIDTH } from \"../../utils/systemConst\";\r\nimport { ImUser } from 'react-icons/im'\r\nimport { MdOutlineLanguage } from 'react-icons/md'\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { GlobalContext } from \"./systemEntry\";\r\nimport DataUtil from \"../../utils/dataUtil\";\r\nimport ConfirmDialog from \"../dialog/confirmDialog\";\r\nimport LoginFrame from \"../dialog/login/loginFrame\";\r\nimport AccountFrame from \"../dialog/accountFrame\";\r\n\r\nconst TotalHeader = () => {\r\n\r\n    const { store, setStore } = useContext(GlobalContext);\r\n\r\n    const user = store.system.user;\r\n\r\n    const [userId, setUserId] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (user != null) {\r\n            setUserId('@' + user.id);\r\n        }\r\n    }, [user]);\r\n\r\n    const authButtonJsx = user == null ? (\r\n        <_LoginButton onClick={() => {\r\n            store.system.dialog = <LoginFrame />;\r\n            setStore({ ...store });\r\n            console.log(window.location.origin);\r\n        }}>\r\n            <div><ImUser /></div>\r\n            Login / Sign up\r\n        </_LoginButton>\r\n    ) : (<>\r\n        <_UserName\r\n            isEntry={user != null}\r\n            onClick={() => {\r\n                store.system.dialog = <AccountFrame />;\r\n                setStore({ ...store });\r\n            }}\r\n        >{userId}</_UserName>\r\n        <_LoginButton onClick={() => {\r\n            store.system.user = null;\r\n\r\n            store.system.dialog = <ConfirmDialog.Component\r\n                message={'Logout.\\nSee you next time!'}\r\n            />;\r\n            setStore({ ...store });\r\n        }}>\r\n            <div><ImUser /></div>\r\n            Logout\r\n        </_LoginButton>\r\n    </>);\r\n    return (\r\n        <_Wrap>\r\n            <_Label>\r\n                <_ACCENT>Partice</_ACCENT>&nbsp;<_NORMAL>Simulator</_NORMAL>\r\n            </_Label>\r\n            <_Menu>\r\n                {authButtonJsx}\r\n                <_Language>\r\n                    <div><MdOutlineLanguage /></div>\r\n                </_Language>\r\n            </_Menu>\r\n        </_Wrap>\r\n    );\r\n}\r\n\r\nexport default TotalHeader;\r\n\r\nconst _Wrap = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    height: ${TOTAL_HEADER_WIDTH}px;\r\n    background: linear-gradient(to bottom, #192f7e, #000540, #192f7e);\r\n    /* background-color: #c2c2c2; */\r\n    box-shadow: 0 0 8px 0 #000b3a48;\r\n`;\r\n\r\nconst _Label = styled.div`\r\n    display: inline-block;\r\n    margin: 2px 0 0 10px;\r\n    width: 200px;\r\n    height: calc(100% - 4px);\r\n    /* background-color: #00000013; */\r\n    font-size: 34px;\r\n    font-weight: 600;\r\n    line-height: 36px;\r\n    font-style: italic;\r\n    text-shadow: 1px 2px 3px #dbdbdb6a;\r\n`;\r\n\r\nconst _NORMAL = styled.span`\r\n    color: #9fc2d1;\r\n`;\r\nconst _ACCENT = styled.span`\r\n    font-size: 34px;\r\n    color: #ececec;\r\n`;\r\n\r\n\r\n\r\nconst _Menu = styled.div`\r\n    display: inline-block;\r\n    /* width: 300px; */\r\n    height: 100%;\r\n    position: absolute;\r\n    right: 30px;\r\n    /* background-color: #ff00002b; */\r\n`\r\n\r\nconst _MenuItem = styled.div`\r\n    background-color: #c9c7c7;\r\n    &:hover {\r\n        background-color: #cf9bae;\r\n    }\r\n    transition: background-color 800ms;\r\n`\r\n\r\nconst _LoginButton = styled(_MenuItem)`\r\n    display: inline-block;\r\n    /* width: 240px; */\r\n    padding: 0 30px;\r\n    margin: 5px 10px 0 0;\r\n    height: calc(100% - 10px);\r\n    border-radius: 20px;\r\n    /* background: linear-gradient(to bottom, #e9baba, #d39d9d, #e9baba); */\r\n    /* background-color: #adadad; */\r\n    /* border: 1px solid #7e7e7e; */\r\n    /* box-shadow: 0 0 8px 0 #000b3a48; */\r\n    /* text-shadow: 1px 2px 3px #808080ba; */\r\n    text-align: center;\r\n    font-size: 22px;\r\n    font-weight: 600;\r\n    line-height: 28px;\r\n    color: #ffffff;\r\n    vertical-align: top;\r\n\r\n    & div {\r\n        display: inline-block;\r\n        /* background-color: #0000007d; */\r\n        margin: 2px 5px 0 0;\r\n        vertical-align: top;\r\n    }\r\n`;\r\n\r\nconst _UserName = styled.div<{\r\n    isEntry: boolean;\r\n}>`\r\n    display: inline-block;\r\n    /* width: 240px; */\r\n    margin: 5px 20px 0 0;\r\n    height: calc(100% - 10px);\r\n    text-align: center;\r\n    font-size: 22px;\r\n    font-weight: 600;\r\n    line-height: 28px;\r\n    color: #9afff292;\r\n    ${props => props.isEntry ? '' : css`\r\n        color: #ff393983;\r\n    `}\r\n    vertical-align: top;\r\n`;\r\n\r\nconst _Language = styled(_MenuItem)`\r\n    display: inline-block;\r\n    width: ${TOTAL_HEADER_WIDTH - 6}px;\r\n    height: ${TOTAL_HEADER_WIDTH - 6}px;\r\n    margin: 3px 0 0 0;\r\n    border-radius: 50%;\r\n    /* background: linear-gradient(to bottom, #e9baba, #d39d9d, #e9baba); */\r\n    /* background-color: #48aa9d; */\r\n    /* border: 1px solid #7e7e7e; */\r\n    /* box-shadow: 0 0 8px 0 #000b3a48; */\r\n    /* text-shadow: 1px 2px 3px #808080ba; */\r\n    /* text-align: center; */\r\n    font-size: 28px;\r\n    font-weight: 600;\r\n    color: #ffffff;\r\n    & div {\r\n        display: inline-block;\r\n        margin: 2px 0 0 5px;\r\n        /* background-color: #0000007d; */\r\n        vertical-align: top;\r\n    }\r\n`;","import { createContext, useCallback, useEffect, useReducer, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { initialStore, Store } from '../../redux/store/store';\r\nimport { MAIN_FRAME_MARGIN, TOTAL_HEADER_WIDTH } from '../../utils/systemConst';\r\nimport GloballDialog from '../dialog/globalDialog';\r\nimport MainFrame from './mainFrame';\r\nimport Splash from './splash';\r\nimport TotalHeader from './totalHeader';\r\n\r\n\r\ntype GlobalContextType = {\r\n    store: Store;\r\n    setStore: React.Dispatch<React.SetStateAction<Store>>;\r\n}\r\n\r\nexport const GlobalContext = createContext({} as GlobalContextType);\r\n\r\nconst SystemEntry = () => {\r\n\r\n    const [store, setStore] = useState(initialStore);\r\n    return (\r\n        <GlobalContext.Provider value={{ store, setStore }}>\r\n            <>\r\n                {!store.system.isSplash ? <></> :\r\n                    <Splash\r\n                        remove={() => {\r\n                            setStore({...store, system: {\r\n                                ...store.system, isSplash: false\r\n                            }});\r\n                        }}\r\n                    />}\r\n                <_Wrap>\r\n                    <GloballDialog />\r\n                    <TotalHeader />\r\n                    <_MainDiv>\r\n                        <MainFrame />\r\n                    </_MainDiv>\r\n                </_Wrap>\r\n            </>\r\n        </GlobalContext.Provider>\r\n    );\r\n}\r\n\r\nexport default SystemEntry;\r\n\r\nconst _Wrap = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #364887;\r\n`;\r\n\r\nconst _MainDiv = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: calc(100% - ${TOTAL_HEADER_WIDTH}px);\r\n    /* background-color: #c2c2c2; */\r\n`;","import React, { useEffect } from 'react';\nimport SystemEntry from './system/contents/entry/systemEntry';\n\nfunction App() {\n\n  useEffect(() => {\n    // 右クリック無効\n    document.oncontextmenu = function () { return false; }\n\n    // window.addEventListener(\"keydown\", function (e) {\n    //   // space and arrow keys\n    //   if ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {\n    //     e.preventDefault();\n    //   }\n    // }, false);\n\n    document.onkeydown = (e) => {\n      // if (!['F5'].includes(e.key)) {\n      //   return false;\n      // }\n      if (e.ctrlKey && ['f', 's'].includes(e.key)) {\n        return false;\n      }\n    }\n\n  }, []);\n  return (\n    <SystemEntry />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst REACT_APP_AUTH0_DOMAIN = 'dev-a0p0m4lr.us.auth0.com';\nconst REACT_APP_AUTH0_CLIENT_ID = 'ABaWpYVBZwTr3tkyxhq1kWh2YwT4epew';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}