{"version":3,"sources":["system/utils/dataUtil.tsx","system/redux/store/store.tsx","system/utils/systemConst.tsx","system/contents/dialog/globalDialog.tsx","system/base/design/styles.tsx","system/base/components/tab/channelPane.tsx","system/base/components/tab/tabbedPane.tsx","system/utils/form/formUtiil.tsx","system/utils/treeUtil.tsx","system/contents/dialog/confirmDialog.tsx","system/utils/form/validateUtil.tsx","system/utils/canvasUtil.tsx","system/contents/graphic/particle.tsx","system/contents/graphic/drawUtil.tsx","system/contents/graphic/vectorUtil.tsx","system/contents/create/factory/util/paramUtil.tsx","system/contents/create/preview/modulateBuilder.tsx","system/contents/create/preview/previewUtil.tsx","system/contents/create/preview/logicPreviewFrame.tsx","system/contents/create/factory/util/logicElementUtil.tsx","system/contents/create/factory/detail/logic/editorArgumentMng.tsx","system/contents/create/factory/detail/common/modifyOperations.tsx","system/contents/create/factory/detail/logic/editorParamItem.tsx","system/contents/create/factory/detail/logic/editorArgumentItem.tsx","system/contents/create/factory/detail/seed/editorSeedMng.tsx","system/contents/create/factory/detail/logic/editorLogicMng.tsx","system/contents/create/factory/detail/logic/editorLogicItem.tsx","system/contents/create/factory/detail/logic/editorBehiviorMng.tsx","system/contents/create/factory/detail/logic/editorVisualMng.tsx","system/contents/create/factory/detail/logic/editorInheritConnMng.tsx","system/contents/create/factory/detail/logic/editorInheritConnector.tsx","system/contents/create/factory/dialog/sendTemplateDialog.tsx","system/contents/create/factory/detail/logic/editorSendManager.tsx","system/contents/create/factory/detail/logic/editorFieldMng.tsx","system/contents/create/factory/detail/logic/editorExtendMng.tsx","system/contents/create/factory/detail/seed/editorSeedItem.tsx","system/contents/create/factory/detail/seed/editorThumbnailMng.tsx","system/contents/create/factory/detail/seed/editorSampleItem.tsx","system/contents/create/factory/detail/seed/editorSampleMng.tsx","system/contents/create/factory/detail/seed/editorInterfaceManager.tsx","system/contents/create/factory/detail/seed/editorSeedArgMng.tsx","system/contents/create/factory/detail/seed/editorSeedArgItem.tsx","system/contents/create/factory/detail/seed/editorSeedSendMng.tsx","system/contents/create/factory/util/logicUtil.tsx","system/contents/create/factory/logicMainteTab.tsx","system/contents/create/manage/manageTab.tsx","system/contents/create/launcher/launcherTab.tsx","system/contents/create/createChannel.tsx","system/contents/entry/directView.tsx","system/contents/entry/directLogin.tsx","system/contents/home/releaseNote.tsx","system/contents/home/homeChannel.tsx","system/contents/entry/mainFrame.tsx","system/contents/entry/splash.tsx","system/contents/entry/totalHeader.tsx","system/contents/entry/systemEntry.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DB_SERVER_DOMAIN","APP_SERVER_DOMAIN","getUserHashBuilder","Hashids","getScoreHashBuilder","seq","hash","encode","Base64","hashedSeq","hashids","Number","decode","getHashedFromScoreSeq","sendQueryRequestToAPI","scoreSeq","hashedKey","json","fetch","mode","method","headers","Accept","body","JSON","stringify","createSendMailRequestInit","queryType","sql","createQueryRequestInit","findUserInfoList","a","response","results","map","res","id","email","password","nextSeq","DataUtil","userSeq","val","content","encodeURIComponent","zlib","gzipSync","toString","buffer","Buffer","from","result","unzipSync","decodeURIComponent","date","year_str","getFullYear","month_str","getMonth","day_str","getDate","hour_str","getHours","minute_str","getMinutes","second_str","getSeconds","format_str","replace","initialStore","system","isSplash","user","dialog","SystemConst","GloballDialog","useContext","GlobalContext","store","setStore","_Blind","onClick","styled","div","FONT_SMALL","FONT_MIDIUM","CSS_LABEL","css","Styles","_CSS_LABEL_MIDIUM","ChannelPane","props","useState","activeNo","setActiveNo","useEffect","_LabelList","tabElements","tab","index","name","icon","isActive","isEnable","selectTab","undefined","selectTabIndex","_ContList","cont","ChannelLabel","_Item","_Icon","_Label","ChannelContents","_Contents","CSS_BUTTON_DISABLE","TabbedPane","tabRecordNum","enable","TabLabel","_TabLabel","TabContents","FormUtil","checkables","forEach","checkable","errors","length","type","isPassword","validaters","validates","dependency","dep","value","getErrors","validater","checker","push","errorType","setCheckable","isVisible","textAlign","isCenter","marginTop","titleLabel","_ItemnLabel","_ItemnInputBak","hasTitle","width","placeholder","onChange","e","target","readOnly","isReadOnly","jsx","labelWidth","isNumber","concat","_ItemnInput","onBlur","marginLeft","headBlank","list","slice","unshift","labelText","_ItemCombobox","item","i","_Option","disabled","isDisabled","buttons","button","_Button","callback","label","_Message","message","isLink","clickAction","_BorderText","title","_BorderPanel","innerJsx","height","_InfoDiv","color","textRecords","text","isRelation","isUse","_Switch","find","_Record","CSS_LABEL_MIDIUM","input","select","option","CSS_LABEL_SMALL","TreeUtil","data","parent","depth","isOpen","children","node","parentNode","isDisable","focusNode","ref","useRef","buildElementNodeFromData","build","dataNode","child","rootDataNode","rootElementNode","setRootElementNode","jsxList","useMemo","buildJsxRecords","element","spaceList","isCurrent","current","scrollWidth","tempNode","isRelationNode","space","lines","_LineFull","_LineTop","_LineRight","_Space","_Branch","_Jsx","clickEvent","onDoubleClick","getLabelJsx","invalidate","_Wrap","ConfirmDialog","_Frame","_Main","_Inner","split","msg","Message","ButtonRecord","str","min","max","checkIncludesChars","ch","charAt","indexOf","isNaN","conditions","ValidateUtil","createURL","draw","canvas","document","createElement","ctx","getContext","toDataURL","CanvasUtil","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","font","fillStyle","fillText","adjust","measureText","save","WIDTH","AUTH_TEXT_WIDTH","SIZE","AUTH_TEXT_HEIGHT","rotate","Math","PI","char","fontRand","random","alphaRand","Particle","owner","pos","prevPos","vec","frame","limit","isLive","drawer","extend","update","x","xy","y","this","param","radiusBase","radius","self","shrinkStartRate","start","floor","g","createRadialGradient","grads","rgba","convertRgbaFromColorCode","r","b","offset","convertColorCodeFromRgba","grad","addColorStop","globalAlpha","disappearStartRate","beginPath","arc","fill","code","parseInt","substring","rate","DrawUtil","VectorUtil","rad","len","syncFromXY","sqrt","atan2","syncFromRad","cos","sin","VisualParamType","BehaviorParamType","Object","values","SelfParamType","ExtendParamType","EffectParamType","ModulateParamType","ConstantType","ParamUtil","ModulateBuilder","extendList","decayRate","decayLimit","gravity","gravityLimit","SCREEN_WIDTH","SCREEN_HEIGHT","searchElement","origin","rootData","sends","createParticleRec","cur","valueMapList","ConstantValueMap","fieldMng","mngs","fields","field","paramItem","convertFormulaToValue","visualParams","params","behaviorParams","getVisualParam","convertParamsToValue","getBehaviorParam","LIMIT","POS_X","POS_Y","Vector","VEC_X","VEC_Y","VEC_RAD","VEC_LEN","connectMng","inherits","connect","connector","disable","logicItem","wrap","logicMng","defs","def","searchDependLogic","depend","addValueMap","FRAME","loopCnt","extendParams","loopCntVal","LOOP_COUNT","convertParamsToBoolean","INVOKE","iterateValueMap","LOOP_ITERATE","sendValueMapList","Instance","DECAY_LIMIT","DECAY_RATE","GRAVITY_VAL","GRAVITY_LIMIT","RADIUS","colorR","COLOR_R","colorG","COLOR_G","colorB","COLOR_B","colorA","COLOR_A","disappearStart","DISAPPEAR_START","shrinkStart","SHRINK_START","createGradDrawer","warpList","formula","v","valueMap","m","formulaStr","varCnt","formulaItems","Function","convertFormulaToBoolean","RADIAN_ROUND","PreviewUtil","LogicPreviewFrame","formList","setFormList","sceens","setSceens","frameCnt","setFrameCnt","tabIndex","setTabIndex","setCur","isBuild","setBuild","isPlay","setPlay","setTimeout","argMapList","argWrap","args","arg","key","getMapList","formListJsx","form","FormRecord","TextField","checkRequired","buildLogicProps","par","splice","isInputOK","buildTabJsx","_FormDiv","previewTabJsx","_CanvasDiv","_IMG","src","_ProgressDiv","clickX","pageX","clientRect","getBoundingClientRect","left","window","pageXOffset","_ProgressVal","onKeyDown","_CloseButton","img","wrapElement","insertChild","listPos","listName","getListName","newNode","createNode","size","ownerChildren","ownDataChildren","curNo","some","it","swapNode","swapData","getNamableProps","createParamWrapList","paramDataList","createVisualParams","createBehaviorParams","syncArgumentCallback","items","samples","seedMng","mng","nameList","seed","logic","idList","inherit","curLogicOwner","VisualParams","BehaviorParams","SelfParams","ExtendParams","EffectParams","ModulateParams","Constants","argMng","prefix","num","console","log","sendNode","sendParamList","dependItem","getSendParamList","curParamList","includes","paramWrap","LogicElementUtil","createParamWrap","logicMngNode","prevName","newName","runRec","inhMng","inh","conn","logicNode","syncFormula","varItem","visualMng","behaviorMng","syncParamName","sendMng","inhMngNode","newArgName","delArgName","delIndex","EditorArgumentMng","FactoryTreeContext","setFocusNode","BorderPanel","addChild","ModifyOperations","isModify","setModify","removeSelf","isComplete","isCompleteCheck","checkableFields","mappingForm","firstRegist","modifyRegist","Level","EditorArgumentItem","setName","argType","setArgType","reservedList","getParamNameList","valueType","Component","syncArgumentAdd","syncArgumentName","checkStringLength","LogicUtil","checkFieldName","filter","Combobox","ArgTypes","syncArgumentDel","getSwapButtons","EditorSeedMng","itemWrap","EditorLogicMng","EditorLogicItem","el","isConnect","hasArgNode","hasFieldNode","hasConnectNode","logicNameList","getLogicNameList","toggleElement","hasNode","removeChild","getDefaultLogicMngs","syncLogicName","Record","Switch","EditorParamItem","setFormulaItems","varFormList","setVarFormList","isField","isCondition","inputType","level","FIELD","INITIAL","CONNECT_EXTEND","CONNECT_SEND","argumentList","fieldKeys","parentType","getLogicNode","filedMng","fieldName","fieldKeyList","paramNameList","addNum","delNum","parenthesisBalance","formJsxList","ParamInputTypes","getValueForm","isLastVar","isFormulaOK","hasFormError","varForm","getFormulaItem","syncFieldName","_Formula","isInvalid","_Var","_Sig","getFormulaJsx","span","EditorBehiviorMng","isVector","hasDecayParam","hasGravityParam","exchangeVectorMethod","flag","trueParamElements","falseParamElements","exchangeElements","toggleElements","paramElements","EditorVisualMng","drawMethod","THICKNESS","hasDisappearParam","hasShrinkParam","EditorInheritConnMng","EditorInheritConnector","identify","setIdentify","setMethod","setDepend","defaultName","getNumberingOnPrefixName","isCreate","logicList","getInheritIdList","initConnectorNode","inheritNode","initSendParams","isChange","ConnectTypes","dependLogic","newWrap","parse","getChildrenElementNode","rootNode","clone","COMPONENT_WIDTH","xName","setXName","yName","setYName","checkItems","argNode","behaviorNode","setParamValue","prpName","argName","targetParam","paramList","xParam","yParam","SendTemplateDialog","EditorSendManager","isDepend","ConnectParentPosition","SetParentPosition","EditorFieldMng","EditorExtendMng","hasLoopParam","hasInvokeParam","EditorSeedItem","setOrigin","entry","seedNameList","getSeedNameList","getDefaultSeedMngs","interfaceData","interfaceNode","EditorThumbnailMng","LogicTreeContext","EditorSampleItem","EditorSampleMng","EditorInterfaceManager","EditorSeedArgMng","EditorSeedArgItem","setMin","setMax","step","setStep","defval","setDefval","EditorSeedSendMng","COLOR_METHOD","COLOR_MNG","COLOR_LIST","COLOR_ITEM","isFocus","_Category","backgroundColor","_EditableValue","detailJsx","_Span","_Field","_Signature","_Detail","nameJsx","_ValueType","wrapNode","get","elementNode","getChildrenDataNode","isHead","swapOrder","isTail","createContext","LogicMainteTab","getInitialData","setRootData","setInvalidate","fileHandle","setFileHandle","originNode","getMaster","openPreviewDialog","n","_TreeDiv","_TreeHead","_TreeHeadHalf","plainData","createWritable","writable","gZip","write","close","getFile","showSaveFilePicker","types","accept","then","handle","catch","showOpenFilePicker","file","fileContents","unZip","_TreeBody","Frame","getNodeDisplayJsx","_PropsDiv","_DetailDiv","_DetailHeader","_DetailHeaderLabel","getTypeName","Provider","parentWrap","_DetailMainDiv","getDetailComponent","ManageTab","LauncherTab","CreateChannel","SCORE_TAB_MARGIN","DirectView","getDecryptionedScoreSeq","hashKey","to","DirectLogin","getDecryptionedUserSeq","findUserInfoFromSeq","resList","ReleaseNote","setJsx","record","note","_Header","version","_ListFrame","HOME_USER_DIV_HEIGHT","HomeChannel","userCount","_Left","_MessageRecord","_Right","MainFrame","basename","process","RouterManage","URLSearchParams","useLocation","search","path","exact","MAIN_FRAME_MARGIN","Splash","isSwitch","setSwitch","timerId","setTimerId","remove","clearTimeout","_Title","_NowLoading","_Copylight","fadeIn","keyframes","TotalHeader","setUserId","_ACCENT","_NORMAL","_Menu","_Language","_MenuItem","isEntry","TOTAL_HEADER_WIDTH","SystemEntry","_MainDiv","App","oncontextmenu","onkeydown","ctrlKey","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.96f7365f.chunk.js","sourcesContent":["import zlib from \"zlib\";\r\n// import { createClient } from \"@supabase/supabase-js\";\r\nimport { Base64 } from \"js-base64\";\r\nimport Hashids from 'hashids';\r\n\r\n// const SUPABASE_URL = \"https://rxjdrbdnfvfdbjvaljsp.supabase.co\";\r\n// const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ4amRyYmRuZnZmZGJqdmFsanNwIiwicm9sZSI6ImFub24iLCJpYXQiOjE2NTQxNTQwMTgsImV4cCI6MTk2OTczMDAxOH0.Iq-ilL7ayVatIsG--Lq4WpdL_o1h-6RpR4KjWBdr24M';\r\n\r\n// const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);\r\n\r\nnamespace DataUtil {\r\n\r\n    // export const DB_SERVER_DOMAIN = 'http://localhost:5000';\r\n    export const DB_SERVER_DOMAIN = 'https://licresia-demo01-server.glitch.me';\r\n    // export const DB_SERVER_DOMAIN = 'https://licresia-server.glitch.me';\r\n\r\n    // export const APP_SERVER_DOMAIN = 'http://localhost:4000';\r\n    // export const APP_SERVER_DOMAIN = 'https://cyber-kohno.github.io/licresia_demo_app';\r\n    export const APP_SERVER_DOMAIN = 'https://demo-app.licresia.com';\r\n\r\n    // const fetchData = async () => {\r\n    //     try {\r\n    //         // sampleテーブルから全カラムのデータをid順に取得\r\n    //         // dataに入る型はそのままだとany[]となるため.from<T>で指定\r\n    //         const { data, error } = await supabase.from<Table>('test').select().order('data');\r\n\r\n    //         if (error) {\r\n    //             throw error;\r\n    //         }\r\n    //         if (data) {\r\n    //             console.log(data);\r\n    //         }\r\n    //     } catch (error: any) {\r\n    //         alert(error.message);\r\n    //     } finally {\r\n\r\n    //     }\r\n    // };\r\n\r\n    const getUserHashBuilder = () => {\r\n        return new Hashids('licresia-demo-user', 8);\r\n    }\r\n\r\n    export const getHashedFromUserSeq = (seq: number) => {\r\n        const hashids = getUserHashBuilder();\r\n        const hash = hashids.encode(seq);\r\n        const hashedKey = Base64.encode(hash, true);\r\n        return hashedKey;\r\n    }\r\n\r\n    export const getDecryptionedUserSeq = (hashedSeq: string) => {\r\n        const hashids = getUserHashBuilder();\r\n        const decryptioned = Number(hashids.decode(Base64.decode(hashedSeq)));\r\n        return decryptioned;\r\n    }\r\n\r\n    const getScoreHashBuilder = () => {\r\n        return new Hashids('licresia-demo', 8);\r\n    }\r\n\r\n    export const getHashedFromScoreSeq = (seq: number) => {\r\n        const hashids = getScoreHashBuilder();\r\n        const hash = hashids.encode(seq);\r\n        const hashedKey = Base64.encode(hash, true);\r\n        return hashedKey;\r\n    }\r\n\r\n    export const getDecryptionedScoreSeq = (hashedSeq: string) => {\r\n        const hashids = getScoreHashBuilder();\r\n        const decryptioned = Number(hashids.decode(Base64.decode(hashedSeq)));\r\n        return decryptioned;\r\n    }\r\n\r\n    export const getPreviewURL = (scoreSeq: number) => {\r\n        const hashedKey = getHashedFromScoreSeq(scoreSeq);\r\n        const url = `${APP_SERVER_DOMAIN}/#/preview?v=${hashedKey}`;\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * クエリリクエストを生成する\r\n     * @param sql \r\n     * @returns \r\n     */\r\n    const createQueryRequestInit = (sql: string): RequestInit => {\r\n        return {\r\n            mode: 'cors',\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ sql })\r\n        }\r\n    }\r\n\r\n    export type SendMailParam = {\r\n        from: string,\r\n        to: string,\r\n        subject: string,\r\n        text: string\r\n    }\r\n\r\n    const createSendMailRequestInit = (json: SendMailParam): RequestInit => {\r\n        return {\r\n            mode: 'cors',\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(json)\r\n        }\r\n    }\r\n\r\n    export const sendQueryRequestToMailAPI = (json: SendMailParam): Promise<Response> => {\r\n        return fetch(DB_SERVER_DOMAIN + '/mail',\r\n            createSendMailRequestInit(json)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * select/updateを指定してSQLを実行する。<br>\r\n     * selectの場合、結果をjsonで返す。\r\n     * @param queryType\r\n     * @param sql \r\n     * @returns \r\n     */\r\n    export const sendQueryRequestToAPI = (queryType: 'select' | 'update', sql: string): Promise<Response> => {\r\n        return fetch(DB_SERVER_DOMAIN + '/' + queryType,\r\n            createQueryRequestInit(sql)\r\n        );\r\n    }\r\n\r\n    export const findUserInfoList = async () => {\r\n        const response = await sendQueryRequestToAPI('select', `SELECT id, email FROM user_tbl`);\r\n        const results = await response.json();\r\n        return results as { id: string, email: string}[];\r\n    };\r\n\r\n    export const findUserIdList = async () => {\r\n        const results = await findUserInfoList();\r\n        return (results as { id: string}[]).map(res => res.id);\r\n    };\r\n\r\n    export const findUserInfoFromEmail = async (email: string) => {\r\n        const response = await sendQueryRequestToAPI('select', `SELECT seq, id FROM user_tbl WHERE email = '${email}'`);\r\n        const results = await response.json();\r\n        return results as { seq: number, id: string }[];\r\n    };\r\n\r\n    export const findUserInfoFromSeq = async (seq: number) => {\r\n        const response = await sendQueryRequestToAPI('select', `SELECT seq, id, password, email FROM user_tbl WHERE seq = ${seq}`);\r\n        const results = await response.json();\r\n        return results as { seq: number, id: string, password: string, email: string }[];\r\n    };\r\n\r\n    export const findUserInfoLogin = async (id: string, password: string) => {\r\n        const response = await sendQueryRequestToAPI('select', `SELECT seq, id, password, email FROM user_tbl WHERE id = '${id}' and password = '${password}'`);\r\n        const results = await response.json();\r\n        return results as { seq: number, id: string, password: string, email: string }[];\r\n    };\r\n\r\n    export const getNextUserSeq = async () => {\r\n        const response = await sendQueryRequestToAPI('select', `SELECT seq FROM sqlite_sequence WHERE name = 'user_tbl'`);\r\n        const results = await response.json();\r\n        const nextSeq = (results[0]['seq'] as number) + 1;\r\n        DataUtil.sendQueryRequestToAPI('update', `update sqlite_sequence set seq = seq + 1 where name='user_tbl'`);\r\n\r\n        return nextSeq;\r\n    };\r\n\r\n    export const findUserScoreList = async (userSeq: number) => {\r\n        const response = await DataUtil.sendQueryRequestToAPI('select', `SELECT seq, dispnam, share FROM scoretbl WHERE user_seq = ${userSeq}`);\r\n        const results = await response.json();\r\n        return results as any[];\r\n    };\r\n\r\n    export const findScore = async (scoreSeq: number) => {\r\n        const response = await DataUtil.sendQueryRequestToAPI('select', `SELECT (select id from user_tbl where seq = score.user_seq) as owner, dispnam, data FROM scoretbl score WHERE seq = ${scoreSeq}`);\r\n        const results = await response.json();\r\n        return results as any[];\r\n    };\r\n\r\n    /**\r\n     * 文字列を圧縮する\r\n     * @param val 圧縮前の文字列\r\n     * @returns 圧縮後の文字列\r\n     */\r\n    export const gZip = (val: string) => {\r\n        // エンコード\r\n        const content = encodeURIComponent(val);\r\n        // 圧縮\r\n        const result = zlib.gzipSync(content);\r\n        // Buffer => base64変換\r\n        const value = result.toString('base64');\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * 圧縮された文字列を複号する\r\n     * @param val 圧縮された文字列\r\n     * @returns 複号後の文字列\r\n     */\r\n    export const unZip = (val: string) => {\r\n        // base64 => Bufferに変換\r\n        const buffer = Buffer.from(val, 'base64')\r\n        // 復号化\r\n        const result = zlib.unzipSync(buffer)\r\n        // デコード\r\n        const str = decodeURIComponent(result.toString())\r\n        return str;\r\n    }\r\n\r\n    /**\r\n     * Date型の日時を文字列に変換する\r\n     * @param date Date型の日時\r\n     * @returns 文字列の日時\r\n     */\r\n    export const getStringFromDate = (date: Date) => {\r\n\r\n        const year_str = date.getFullYear().toString();\r\n        //月だけ+1すること\r\n        const month_str = (1 + date.getMonth()).toString();\r\n        const day_str = date.getDate().toString();\r\n        const hour_str = date.getHours().toString();\r\n        const minute_str = date.getMinutes().toString();\r\n        const second_str = date.getSeconds().toString();\r\n\r\n        let format_str = 'YYYY-MM-DD hh:mm:ss';\r\n        format_str = format_str.replace(/YYYY/g, year_str);\r\n        format_str = format_str.replace(/MM/g, month_str);\r\n        format_str = format_str.replace(/DD/g, day_str);\r\n        format_str = format_str.replace(/hh/g, hour_str);\r\n        format_str = format_str.replace(/mm/g, minute_str);\r\n        format_str = format_str.replace(/ss/g, second_str);\r\n\r\n        return format_str;\r\n    };\r\n}\r\n\r\nexport default DataUtil;","import StoreSystem from \"./storeSystem\";\r\n\r\n/**\r\n * システムで使用するステート群\r\n */\r\nexport type Store = {\r\n    system: StoreSystem.Param;\r\n}\r\n\r\nexport const initialStore: Store = {\r\n    system: {\r\n        isSplash: false,\r\n        user: null,\r\n        dialog: null,\r\n    },\r\n}","\r\nnamespace SystemConst {\r\n    export const AUTH_TEXT_WIDTH = 350;\r\n    export const AUTH_TEXT_HEIGHT = 70;\r\n}\r\n\r\nexport default SystemConst;\r\n\r\nexport const APP_MIN_WIDTH = 800;\r\nexport const APP_MIN_HEIGHT = 600;\r\n\r\nexport const TOTAL_HEADER_WIDTH = 44;\r\n\r\nexport const MAIN_FRAME_MARGIN = 15;\r\nexport const SCORE_TAB_MARGIN = 8;\r\n\r\nexport const BUTTON_SMALL_HEIGHT = 18;\r\nexport const BUTTON_MIDIUM_HEIGHT = 28;\r\nexport const BUTTON_LARGE_HEIGHT = 34;\r\n\r\n\r\n// ホームチャンネル\r\nexport const HOME_USER_DIV_HEIGHT = 400;\r\n\r\n// ハーモナイズタブ\r\n\r\nexport const FIRST_CHORD_INDEX = 3;\r\n\r\nexport const HARMONIZE_RIGHT_WIDTH = 220;\r\nexport const HARMONIZE_HEAD_WIDTH = 35;\r\nexport const HARMONIZE_FOOT_WIDTH = 80;\r\nexport const HARMONIZE_STRUCT_WIDTH = 380;\r\nexport const HARMONIZE_SECTIONS_WIDTH = 110;\r\n\r\nexport const ELEMENT_HEIGHT = 134;\r\nexport const ELEMENT_HEAD_WIDTH = 15;\r\nexport const ELEMENT_FOOT_WIDTH = 60;\r\nexport const ELEMENT_SIDE_PADDING = 8;\r\nexport const ELEMENT_NOTE_PADDING_LEN = 10;\r\nexport const ELEMENT_NOTE_PADDING_SID = 30;\r\nexport const ELEMENT_POS_INFO_WIDTH = 50;\r\nexport const ELEMENT_OPERATIONS_WIDTH = 20;\r\n\r\nexport const TIMELINE_BEAT_WIDTH = 80;\r\n\r\n\r\nexport const TUNE_HEADER_WIDTH = 80;\r\nexport const TUNE_TIMELINE_WIDTH = 70;\r\nexport const TUNE_PITCH_WIDTH = 100;\r\nexport const TUNE_PITCH_HEIGHT = 30;\r\n\r\n\r\n\r\nexport const PATTERN_OPERATION_HEIGHT = 30;\r\nexport const PATTERN_HEADER_HEIGHT = 50;\r\nexport const PATTERN_BODY_HEIGHT = 240;\r\nexport const PATTERN_FOOTER_HEIGHT = 50;\r\nexport const PATTERN_FRAME_HEIGHT = PATTERN_OPERATION_HEIGHT + PATTERN_HEADER_HEIGHT + PATTERN_BODY_HEIGHT + PATTERN_FOOTER_HEIGHT;\r\n\r\n\r\nexport const NOTES_1BAR_WIDTH = 480;","import { useContext, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { GlobalContext } from \"../entry/systemEntry\";\r\n\r\n\r\nconst GloballDialog = () => {\r\n\r\n    const { store, setStore } = useContext(GlobalContext);\r\n\r\n    const dialog = store.system.dialog;\r\n\r\n    if (dialog == null) return <></>;\r\n    return (<>\r\n        <_Blind onClick={() => {\r\n            // store.system.dialog = null;\r\n            // setStore({...store});\r\n        }} />\r\n        {dialog}\r\n    </>);\r\n}\r\n\r\nexport default GloballDialog;\r\n\r\nconst _Blind = styled.div<{\r\n}>`\r\n    display: block;\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #000329a2;\r\n    z-index: 10;\r\n    text-align: center;\r\n`;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nnamespace Styles {\r\n\r\n    export const FONT_SMALL = 16;\r\n    export const FONT_MIDIUM = 22;\r\n    export const FONT_LARGE = 32;\r\n\r\n    export const CSS_LABEL = css`\r\n        display: inline-block;\r\n        font-weight: 600;\r\n        text-align: center;\r\n        color: black;\r\n        box-sizing: border-box;\r\n    `;\r\n\r\n    export const CSS_LABEL_SMALL = css`\r\n        ${CSS_LABEL}\r\n        height: 22px;\r\n        font-size: ${FONT_SMALL}px;\r\n        line-height: 18px;\r\n    `;\r\n\r\n    export const CSS_LABEL_MIDIUM = css`\r\n        ${CSS_LABEL}\r\n        height: 30px;\r\n        font-size: ${FONT_MIDIUM}px;\r\n        line-height: 26px;\r\n    `;\r\n\r\n    export const CSS_BUTTON_DISABLE = css`\r\n        pointer-events: none;\r\n        opacity: 0.5;\r\n    `;\r\n}\r\nexport default Styles;\r\n\r\nexport const _WrapperFrame = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 100%;\r\n`;\r\n\r\nexport const _Object = styled.div`\r\n    display: inline-block;\r\n`;\r\n\r\nexport const _Record = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n`;\r\n\r\nexport const _CSS_LABEL_SMALL = css`\r\n    display: inline-block;\r\n    height: 22px;\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n    color: black;\r\n    line-height: 18px;\r\n`;\r\n\r\n\r\nexport const _CSS_LABEL_MIDIUM = css`\r\n    display: inline-block;\r\n    height: 30px;\r\n    font-size: ${Styles.FONT_MIDIUM}px;\r\n    font-weight: 600;\r\n    text-align: center;\r\n    color: black;\r\n    line-height: 24px;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nexport const _CSS_DISABLE = css`\r\n    opacity: 0.6;\r\n    pointer-events: none;\r\n`;\r\n\r\n","import { useEffect, useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport Styles from \"../../design/styles\";\r\n\r\ntype ChannelPaneProps = {\r\n    activeNo: number;\r\n    tabElements: ChannelElements[];\r\n    selectTabIndex?: Function;\r\n}\r\n\r\ntype ChannelElements = {\r\n    name: string;\r\n    icon: JSX.Element;\r\n    isEnable: boolean;\r\n    cont: JSX.Element;\r\n}\r\n\r\nexport const ChannelPane = (props: ChannelPaneProps) => {\r\n    const [activeNo, setActiveNo] = useState(props.activeNo);\r\n\r\n    // タブ押下時の処理\r\n    const selectTabIndex = (index: number) => {\r\n        if (props.selectTabIndex != undefined) {\r\n            props.selectTabIndex(index);\r\n        } else {\r\n            setActiveNo(index);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setActiveNo(props.activeNo);\r\n    }, [props.activeNo]);\r\n\r\n    return (\r\n        <>\r\n            <_LabelList>\r\n                {\r\n                    props.tabElements.map((tab, index) => {\r\n                        return <ChannelLabel\r\n                            key={index} name={tab.name} icon={tab.icon} isActive={index == activeNo} isEnable={tab.isEnable}\r\n                            selectTab={() => selectTabIndex(index)}\r\n                        />\r\n                    })\r\n                }\r\n            </_LabelList>\r\n            <_ContList>\r\n                {\r\n                    props.tabElements.map((tab, index) => {\r\n                        return <ChannelContents key={index} cont={tab.cont} isActive={index === activeNo} />\r\n                    })\r\n                }\r\n            </_ContList>\r\n        </>\r\n    );\r\n}\r\n\r\nconst ChannelLabel = (props: {\r\n    name: string;\r\n    icon: JSX.Element;\r\n    isEnable: boolean;\r\n    isActive: boolean;\r\n    selectTab: Function;\r\n}) => {\r\n    return (\r\n        <_Item\r\n            isEnable={props.isEnable}\r\n            isActive={props.isActive}\r\n            onClick={() => props.selectTab()}\r\n        >\r\n            <_Icon>{props.icon}</_Icon>\r\n            <_Label>{props.name}</_Label>\r\n        </_Item>\r\n    );\r\n}\r\n\r\nconst ChannelContents = (props: {\r\n    isActive: boolean;\r\n    cont: JSX.Element;\r\n}) => {\r\n    return (\r\n        <_Contents isActive={props.isActive}>\r\n            {props.cont}\r\n        </_Contents>\r\n    );\r\n}\r\n\r\nconst _LabelList = styled.div`\r\n    display: inline-block;\r\n    width: 100px;\r\n    margin-right: 5px;\r\n    height: 100%;\r\n    background-color: #b9b9b9;\r\n    border: 1px solid #707070;\r\n    box-sizing: border-box;\r\n    border-radius: 10px 0 0 10px;\r\n    vertical-align: top;\r\n    box-shadow: 1px 2px 12px #aaaaaa;\r\n`;\r\nconst _ContList = styled.div`\r\n    display: inline-block;\r\n    background-color: #b9b9b9;\r\n    border: 1px solid #707070;\r\n    box-sizing: border-box;\r\n    width: calc(100% - 105px);\r\n    height: 100%;\r\n    border-radius: 0 6px 6px 0;\r\n    box-shadow: 1px 2px 12px #aaaaaa;\r\n`;\r\n\r\nconst _Contents = styled.div<{\r\n    isActive: boolean;\r\n}>`\r\n    /* margin: 3px 0 0 3px;\r\n    width: calc(100% - 6px);\r\n    height: calc(100% - 6px); */\r\n    width: 100%;\r\n    height: 100%;\r\n    /* background-color: #ece6e6; */\r\n    ${props => !props.isActive ? css`display: none;` : css`display: inline-block;`}\r\n`;\r\n\r\nconst _Item = styled.div<{\r\n    isEnable: boolean;\r\n    isActive: boolean;\r\n}>`\r\n    display: inline-block;\r\n    width: 90px;\r\n    height: 90px;\r\n    margin: 5px 0 0 5px;\r\n    border-radius: 10px;\r\n    ${props => {\r\n        if (props.isActive) {\r\n            return css`\r\n                background-color: #e4e3e1;\r\n                border: 1px solid #949494\r\n            `;\r\n        } else {\r\n            return css`\r\n                background-color: #d1d1d1;\r\n                opacity: 0.8;\r\n            `;\r\n        }\r\n    }}\r\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\r\n    transition: background-color 500ms;\r\n    & *{\r\n        transition: color 150ms;\r\n    }\r\n    // アクティブじゃない時だけhover要素を付加\r\n    ${props => props.isActive ? '' : css`\r\n        &:hover {\r\n            & *{\r\n                transition: color 150ms;\r\n                /* background-color: #e2d6d6; */\r\n                text-shadow: 1px 2px 22px #f7f7f7ea;\r\n                color: #a7a7a7;\r\n            }\r\n        }\r\n    `}\r\n`;\r\n\r\nconst IconHover = css`\r\n    text-shadow: 1px 2px 22px #f7f7f7cf;\r\n    color: #a3a3a3;\r\n`;\r\n\r\nconst _Icon = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 60px;\r\n    /* background-color: #df828221; */\r\n    font-size: 50px;\r\n    color: #757575;\r\n    text-align: center;\r\n    padding-top: 5px;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nconst _Label = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 30px;\r\n    /* background-color: #8482df20; */\r\n    font-size: 20px;\r\n    font-weight: 600;\r\n    color: #757575;\r\n    text-align: center;\r\n`;","import { useEffect, useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\ntype TabbedPaneProps = {\r\n    activeNo: number;\r\n    tabElements: TabElements[];\r\n    selectTabIndex?: Function;\r\n    tabRecordNum?: number;\r\n}\r\n\r\ntype TabElements = {\r\n    name: string;\r\n    enable: boolean;\r\n    cont: JSX.Element;\r\n}\r\n\r\nexport const TabbedPane = (props: TabbedPaneProps) => {\r\n    const [activeNo, setActiveNo] = useState(props.activeNo);\r\n\r\n    // タブ押下時の処理\r\n    const selectTabIndex = (index: number) => {\r\n        if (props.selectTabIndex != undefined) {\r\n            props.selectTabIndex(index);\r\n        } else {\r\n            setActiveNo(index);\r\n        }\r\n    };\r\n\r\n    const tabRecordNum = props.tabRecordNum ?? 1;\r\n\r\n    useEffect(() => {\r\n        setActiveNo(props.activeNo);\r\n    }, [props.activeNo]);\r\n\r\n    return (\r\n        <>\r\n            <_LabelList tabRecordNum={tabRecordNum}>\r\n                {/* {tabList} */}\r\n                {\r\n                    props.tabElements.map((tab, index) => {\r\n                        return <TabLabel\r\n                            key={index} name={tab.name} isActive={index == activeNo} isEnable={tab.enable}\r\n                            selectTab={() => selectTabIndex(index)}\r\n                        />\r\n                    })\r\n                }\r\n            </_LabelList>\r\n            <_ContList tabRecordNum={tabRecordNum}>\r\n                {/* {contList} */}\r\n                {\r\n                    props.tabElements.map((tab, index) => {\r\n                        return <TabContents key={index} cont={tab.cont} isActive={index === activeNo} />\r\n                    })\r\n                }\r\n            </_ContList>\r\n        </>\r\n    );\r\n}\r\n\r\nconst TabLabel = (props: {\r\n    name: string;\r\n    isActive: boolean;\r\n    isEnable: boolean;\r\n    selectTab: Function;\r\n}) => {\r\n    return (\r\n        <_TabLabel\r\n            isEnable={props.isEnable}\r\n            isActive={props.isActive}\r\n            onClick={() => props.selectTab()}>\r\n            {props.name}\r\n        </_TabLabel>\r\n    );\r\n}\r\n\r\nconst TabContents = (props: {\r\n    isActive: boolean;\r\n    cont: JSX.Element;\r\n}) => {\r\n    // return props.isActive ?\r\n    //     <div className=\"tab-cont\">{props.cont}</div>\r\n    //     :\r\n    //     <></>\r\n    //     ;\r\n    return (\r\n        <_Contents isActive={props.isActive}>\r\n            {props.cont}\r\n        </_Contents>\r\n    );\r\n}\r\n\r\nconst _LabelList = styled.div<{\r\n    tabRecordNum: number;\r\n}>`\r\n    display: inline-block;\r\n    height: ${props => 35 * props.tabRecordNum}px;\r\n    text-align: left;\r\n    /* background-color: #ac3b3b; */\r\n    width: 100%;\r\n`;\r\nconst _ContList = styled.div<{\r\n    tabRecordNum: number;\r\n}>`\r\n    display: block;\r\n    background-color: #999999;\r\n    height: calc(100% - ${props => props.tabRecordNum * 35}px);\r\n    border-radius: 0 6px 6px 6px;\r\n    box-shadow: 0 2px 0 0 #000b3a48;\r\n    text-align: left;\r\n`;\r\n\r\nconst _Contents = styled.div<{\r\n    isActive: boolean;\r\n}>`\r\n    margin: 3px 0 0 3px;\r\n    width: calc(100% - 6px);\r\n    height: calc(100% - 6px);\r\n    ${props => !props.isActive ? css`display: none;` : css`display: inline-block;`}\r\n`;\r\n\r\nconst _TabLabel = styled.div<{\r\n    isEnable: boolean;\r\n    isActive: boolean;\r\n}>`\r\n    display: inline-block;\r\n    /* width: 100px; */\r\n    padding: 0 10px;\r\n    \r\n    ${props => {\r\n        if (props.isActive) {\r\n            return css`\r\n                color: #ebebeb;\r\n                padding: 0 35px;\r\n                background-color: #999999;\r\n                height: 35px;\r\n                font-size: 24px;\r\n                border-radius: 3px 15px 0 0;\r\n                text-shadow: 1px 2px 3px #00000065;\r\n            `;\r\n        } else {\r\n            return css`\r\n                height: 100%;\r\n                color: #555;\r\n                /* background-color: #90909b; */\r\n                background: linear-gradient(to bottom, #999999, #7a7a7a);\r\n                height: 30px;\r\n                font-size: 18px;\r\n                margin-top: 5px;\r\n                border-radius: 3px 10px 0 0;\r\n                ${props.isEnable ? '' : css`\r\n                    pointer-events: none;\r\n                    opacity: 0.7;\r\n                `}\r\n            `;\r\n        }\r\n    }}\r\n    /* opacity: 0.7; */\r\n    user-select: none;\r\n    margin-right: 6px;\r\n    font-weight: 600;\r\n    box-sizing: border-box;\r\n    line-height: 30px;\r\n    vertical-align: bottom;\r\n    transition: padding 100ms;\r\n`;","import styled, { css } from \"styled-components\";\r\nimport Styles, { _CSS_LABEL_MIDIUM } from \"../../base/design/styles\";\r\nimport ValidateUtil from \"./validateUtil\";\r\nimport { useEffect } from \"react\";\r\n\r\nnamespace FormUtil {\r\n\r\n    export type CheckableValue = {\r\n        value: string;\r\n        errors: ValidateUtil.ErrorType[];\r\n    }\r\n\r\n    export const isCompleteCheck = (checkables: CheckableValue[]) => {\r\n        let result = true;\r\n        checkables.forEach(checkable => {\r\n            if (checkable.errors.length > 0) {\r\n                result = false;\r\n                return 1;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    export const InputTextFormBak = (props: {\r\n        titleLabel?: string;\r\n        checkable: CheckableValue;\r\n        setCheckable: (value: CheckableValue) => void;\r\n        isEnable?: boolean;\r\n        placeholder?: string;\r\n        isCenter?: boolean;\r\n        width?: number;\r\n        isPassword?: boolean;\r\n        validates?: ValidateUtil.Validate[];\r\n        dependency?: CheckableValue[];\r\n        marginTop?: number;\r\n        isReadOnly?: boolean;\r\n        marginBottom?: number;\r\n    }) => {\r\n        const type = props.isPassword ?? false ? 'password' : 'text';\r\n\r\n        const validaters = props.validates ?? [];\r\n        const errors = props.checkable.errors;\r\n        const dependency = (props.dependency ?? []).map(dep => dep.value);\r\n\r\n        const getErrors = (value: string) => {\r\n            const errors: ValidateUtil.ErrorType[] = [];\r\n            validaters.forEach(validater => {\r\n                if (!validater.checker(value)) {\r\n                    errors.push(validater.errorType);\r\n                }\r\n            });\r\n            return errors;\r\n        }\r\n        useEffect(() => {\r\n            props.checkable.errors = getErrors(props.checkable.value);\r\n            props.setCheckable({ ...props.checkable });\r\n        }, dependency);\r\n        return (\r\n            <_Record\r\n                isEnable={props.isEnable ?? true}\r\n                isVisible={true}\r\n                textAlign={(props.isCenter ?? false) ? 'center' : 'left'}\r\n                marginTop={props.marginTop ?? 0}\r\n            >\r\n                {props.titleLabel == undefined ? <></> : <_ItemnLabel>{props.titleLabel}</_ItemnLabel>}\r\n                <_ItemnInputBak\r\n                    type={type}\r\n                    value={props.checkable.value}\r\n                    hasTitle={props.titleLabel != undefined}\r\n                    width={props.width}\r\n                    isCenter={props.isCenter ?? false}\r\n                    placeholder={props.placeholder}\r\n                    onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        props.checkable.value = value;\r\n                        props.checkable.errors = getErrors(value);\r\n                        props.setCheckable({ ...props.checkable });\r\n                    }}\r\n                    errorType={errors.length === 0 ? undefined : errors[0]}\r\n                    readOnly={props.isReadOnly}\r\n                />\r\n            </_Record>\r\n        );\r\n    }\r\n\r\n\r\n    export const Record = (props: {\r\n        isEnable?: boolean;\r\n        textAlign?: 'left' | 'center' | 'right';\r\n        marginTop?: number;\r\n        jsx: JSX.Element;\r\n    }) => {\r\n        return (\r\n            <_Record\r\n                isEnable={props.isEnable ?? true}\r\n                isVisible={true}\r\n                textAlign={props.textAlign ?? 'left'}\r\n                marginTop={props.marginTop ?? 0}\r\n            >\r\n                {props.jsx}\r\n            </_Record>\r\n        );\r\n    }\r\n\r\n    export const FormRecord = (props: {\r\n        titleLabel?: string;\r\n        labelWidth?: number;\r\n        isEnable?: boolean;\r\n        isVisible?: boolean;\r\n        textAlign?: 'left' | 'center' | 'right';\r\n        marginTop?: number;\r\n        jsx: JSX.Element;\r\n    }) => {\r\n        return (\r\n            <_Record\r\n                isEnable={props.isEnable ?? true}\r\n                isVisible={props.isVisible ?? true}\r\n                textAlign={props.textAlign ?? 'left'}\r\n                marginTop={props.marginTop ?? 0}\r\n            >\r\n                {props.titleLabel == undefined ? <></> : <_ItemnLabel labelWidth={props.labelWidth}>{props.titleLabel}</_ItemnLabel>}\r\n                {props.jsx}\r\n            </_Record>\r\n        );\r\n    }\r\n\r\n    export const TextField = (props: {\r\n        checkable: CheckableValue;\r\n        setCheckable: (value: CheckableValue) => void;\r\n        isEnable?: boolean;\r\n        placeholder?: string;\r\n        width?: number;\r\n        isPassword?: boolean;\r\n        validates?: ValidateUtil.Validate[];\r\n        dependency?: CheckableValue[];\r\n        isReadOnly?: boolean;\r\n        isNumber?: boolean;\r\n        marginLeft?: number;\r\n    }) => {\r\n        let type = props.isPassword ?? false ? 'password' : 'text';\r\n        if (props.isNumber ?? false) {\r\n            type = 'number';\r\n        }\r\n\r\n        const validaters = props.validates ?? [];\r\n        const errors = props.checkable.errors;\r\n        const dependency = (props.dependency ?? []).map(dep => dep.value);\r\n\r\n        const getErrors = (value: string) => {\r\n            const errors: ValidateUtil.ErrorType[] = [];\r\n            validaters.forEach(validater => {\r\n                if (!validater.checker(value)) {\r\n                    errors.push(validater.errorType);\r\n                }\r\n            });\r\n            return errors;\r\n        }\r\n        useEffect(() => {\r\n            props.checkable.errors = getErrors(props.checkable.value);\r\n            props.setCheckable({ ...props.checkable });\r\n        }, dependency.concat(props.checkable.value));\r\n\r\n        const value = props.checkable.value;\r\n        // if (type === 'number' && value === '') value = '0';\r\n        return (\r\n            <_ItemnInput\r\n                type={type}\r\n                value={value}\r\n                width={props.width ?? 100}\r\n                placeholder={props.placeholder}\r\n                onChange={(e) => {\r\n                    // if (type === 'number' && value === '') value = '0';\r\n                    // props.checkable.value = type !== 'number' ? value : Number(value).toString();\r\n                    props.checkable.value =  e.target.value;\r\n                    // props.checkable.errors = getErrors(value);\r\n                    props.setCheckable({ ...props.checkable });\r\n                }}\r\n                onBlur={()=>{\r\n                    if(type === 'number') {\r\n                        props.checkable.value = Number(value).toString();\r\n                        props.setCheckable({ ...props.checkable });\r\n                    }\r\n                }}\r\n                errorType={errors.length === 0 ? undefined : errors[0]}\r\n                readOnly={props.isReadOnly}\r\n                marginLeft={props.marginLeft}\r\n            />\r\n        );\r\n    }\r\n\r\n    export type ComboboxItemProps = { value: string, labelText: string, isDisabled?: boolean };\r\n    export const Combobox = (props: {\r\n        list: ComboboxItemProps[];\r\n        headBlank?: boolean;\r\n        checkable: CheckableValue;\r\n        setCheckable: (value: CheckableValue) => void;\r\n        isEnabled?: boolean;\r\n        placeholder?: string;\r\n        width?: number;\r\n        validates?: ValidateUtil.Validate[];\r\n        dependency?: CheckableValue[];\r\n        isReadOnly?: boolean;\r\n        marginLeft?: number;\r\n    }) => {\r\n        const validaters = props.validates ?? [];\r\n        const errors = props.checkable.errors;\r\n        const dependency = (props.dependency ?? []).map(dep => dep.value);\r\n        const headBlank = props.headBlank ?? false;\r\n        const list = props.list.slice();\r\n        if (headBlank) list.unshift({ value: '', labelText: '' });\r\n\r\n        const getErrors = (value: string) => {\r\n            const errors: ValidateUtil.ErrorType[] = [];\r\n            validaters.forEach(validater => {\r\n                if (!validater.checker(value)) {\r\n                    errors.push(validater.errorType);\r\n                }\r\n            });\r\n            return errors;\r\n        }\r\n\r\n        useEffect(() => {\r\n            // console.log('value: ' + props.checkable.value);\r\n            props.checkable.errors = getErrors(props.checkable.value);\r\n            props.setCheckable({ ...props.checkable });\r\n        }, dependency.concat(props.checkable.value));\r\n\r\n        return (\r\n            <_ItemCombobox\r\n                value={props.checkable.value}\r\n                width={props.width ?? 100}\r\n                placeholder={props.placeholder}\r\n                onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    props.checkable.value = value;\r\n                    // props.checkable.errors = getErrors(value);\r\n                    props.setCheckable({ ...props.checkable });\r\n\r\n                }}\r\n                errorType={errors.length === 0 ? undefined : errors[0]}\r\n                readOnly={props.isReadOnly}\r\n                marginLeft={props.marginLeft}\r\n            >{list.map((item, i) => {\r\n                return (\r\n                    <_Option key={i}\r\n                        value={item.value}\r\n                        disabled={item.isDisabled ?? false}\r\n                        isDisabled={item.isDisabled ?? false}\r\n                    >{item.labelText}</_Option>\r\n                );\r\n            })}</_ItemCombobox>\r\n        );\r\n    }\r\n\r\n    export type ButtonProps = {\r\n        label: string;\r\n        isEnable?: boolean;\r\n        width?: number;\r\n        callback: () => void;\r\n    }\r\n\r\n    export const ButtonRecord = (props: {\r\n        buttons: ButtonProps[],\r\n        isCenter?: boolean;\r\n        marginTop?: number;\r\n        marginBottom?: number;\r\n    }) => {\r\n        return (\r\n            <_Record\r\n                isEnable={true}\r\n                isVisible={true}\r\n                textAlign={(props.isCenter ?? false) ? 'center' : 'right'}\r\n                marginTop={props.marginTop ?? 0}\r\n            >\r\n                {props.buttons.map((button, i) => {\r\n                    return (\r\n                        <_Button\r\n                            key={i}\r\n                            isCenter={props.isCenter ?? false}\r\n                            isEnable={button.isEnable ?? true}\r\n                            width={button.width}\r\n                            onClick={button.callback}\r\n                        >{button.label}</_Button>\r\n                    );\r\n                })}\r\n            </_Record>\r\n        );\r\n    }\r\n\r\n    export const Message = (props: {\r\n        message: string,\r\n        isCenter?: boolean;\r\n        marginTop?: number;\r\n        marginBottom?: number;\r\n    }) => {\r\n        return (\r\n            <_Record\r\n                isEnable={true}\r\n                isVisible={true}\r\n                textAlign={(props.isCenter ?? false) ? 'center' : 'left'}\r\n                marginTop={props.marginTop ?? 0}\r\n            >\r\n                <_Message\r\n                    isCenter={props.isCenter ?? false}\r\n                >{props.message}</_Message>\r\n            </_Record>\r\n        );\r\n    }\r\n\r\n    export const MessageLink = (props: {\r\n        message: string,\r\n        isCenter?: boolean;\r\n        clickAction: () => void;\r\n        marginTop?: number;\r\n        marginBottom?: number;\r\n    }) => {\r\n        return (\r\n            <_Record\r\n                isEnable={true}\r\n                isVisible={true}\r\n                textAlign={(props.isCenter ?? false) ? 'center' : 'left'}\r\n                marginTop={props.marginTop ?? 0}\r\n            >\r\n                <_Message\r\n                    isLink={true}\r\n                    onClick={props.clickAction}\r\n                    isCenter={props.isCenter ?? false}\r\n                >{props.message}</_Message>\r\n            </_Record>\r\n        );\r\n    }\r\n\r\n    export const BorderPanel = (props: {\r\n        title: string;\r\n        isEnable?: boolean;\r\n        innerJsx: JSX.Element;\r\n    }) => {\r\n        // const title = props.title ?? 'title pl';\r\n        return (<>\r\n            <_BorderText>{props.title}</_BorderText>\r\n            <_BorderPanel isEnable={props.isEnable ?? true}>{props.innerJsx}</_BorderPanel>\r\n        </>);\r\n    }\r\n\r\n    export const InfoFrame = (props: {\r\n        height?: number;\r\n        textRecords: string[];\r\n    }) => {\r\n        const height = props.height ?? 70;\r\n        const color = '#1a9900';\r\n        return (<>\r\n            <_InfoDiv height={height} color={color}>\r\n                {props.textRecords.map((text, i) => {\r\n                    return <span key={i}>{text}<br /></span>;\r\n                })}\r\n            </_InfoDiv>\r\n        </>);\r\n    };\r\n\r\n    export const Switch = (props: {\r\n        label: string;\r\n        isUse: boolean;\r\n        isEnable?: boolean;\r\n        width?: number;\r\n        isRelation?: boolean;\r\n        callback: () => void;\r\n    }) => {\r\n        const isRelation = props.isRelation ?? false;\r\n        const callback = isRelation && props.isUse ? () => { } : props.callback;\r\n        return (\r\n            <_Switch\r\n                isRelation={isRelation}\r\n                isUse={props.isUse}\r\n                isEnable={props.isEnable ?? true}\r\n                width={props.width}\r\n                onClick={callback}\r\n            >{props.label}</_Switch>\r\n        );\r\n    }\r\n\r\n    export const checkItems = (list: CheckableValue[]) => {\r\n        return list.find(item => item.errors.length > 0) == undefined;\r\n    }\r\n}\r\n\r\nexport default FormUtil;\r\n\r\n\r\nconst _Record = styled.div<{\r\n    isEnable: boolean;\r\n    isVisible: boolean;\r\n    textAlign: 'left' | 'center' | 'right';\r\n    marginTop: number;\r\n}>`\r\n    display: inline-block;\r\n    ${props => props.isVisible ? '' : css`\r\n        display: none;\r\n    `}\r\n    width: 100%;\r\n    height: 40px;\r\n    margin-top: ${props => props.marginTop}px;\r\n    /* background-color: #b3b4c4; */\r\n    /* border: 1px solid #000; */\r\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\r\n    text-align: ${props => props.textAlign};\r\n`;\r\n\r\nconst _ItemnLabel = styled.div<{\r\n    labelWidth?: number;\r\n}>`\r\n    display: inline-block;\r\n    height: calc(100% - 4px);\r\n    width: ${props => props.labelWidth ?? 140}px;\r\n    ${Styles.CSS_LABEL_MIDIUM}\r\n    color: #585858;\r\n    border: solid 1px #7a7a7abf;\r\n    box-sizing: border-box;\r\n    /* background-color: #85a2c5; */\r\n    background: linear-gradient(to bottom, #c3c3c3fc, #d8d8d8, #c3c3c3fc);\r\n    border-radius: 4px;\r\n    text-align: center;\r\n    vertical-align: top;\r\n    margin: 5px 4px 0 4px;\r\n`;\r\n\r\nconst _ItemnInputBak = styled.input<{\r\n    readOnly?: boolean;\r\n    isCenter: boolean;\r\n    hasTitle: boolean;\r\n    width?: number;\r\n    errorType?: ValidateUtil.ErrorType;\r\n}>`\r\n    display: inline-block;\r\n    height: calc(100% - 4px);\r\n    ${props => !props.hasTitle ? css`\r\n    ` : css`\r\n        width: calc(100% - 152px);\r\n    `}\r\n    ${props => props.width == undefined ? '' : css`\r\n        width: ${props.width}px;\r\n    `}\r\n    margin-top: 2px;\r\n    font-size: 24px;\r\n    line-height: 32px;\r\n    /* font-weight: 600; */\r\n    color: #3d3d3d;\r\n    border: solid 1px #959595;\r\n    border-radius: 4px;\r\n    padding: 0 5px;\r\n    box-sizing: border-box;\r\n    background-color: ${props => {\r\n        if (props.errorType == undefined) return '#ececec';\r\n        else {\r\n            switch (props.errorType) {\r\n                case 'required': return '#dbd7b3';\r\n                case 'length': return '#dbb3b3';\r\n                case 'value': return '#b3b3db';\r\n                case 'relation': return '#b3dbb3';\r\n            }\r\n        }\r\n    }};\r\n    text-align: left;\r\n    vertical-align: top;\r\n    user-select: text;\r\n    /* ${props => !props.isCenter ? css`\r\n        margin-left: 4px;\r\n    ` : css``\r\n    } */\r\n    ${props => !props.readOnly ? '' : css`\r\n        color: #020075;\r\n        /* border: none; */\r\n        outline: none;\r\n        background-color: transparent;\r\n    `}\r\n    ::placeholder {\r\n        color: #00000050;\r\n        font-style: italic;\r\n    }\r\n`;\r\n\r\nconst _ItemnInput = styled.input<{\r\n    readOnly?: boolean;\r\n    width?: number;\r\n    errorType?: ValidateUtil.ErrorType;\r\n    marginLeft?: number;\r\n}>`\r\n    display: inline-block;\r\n    height: calc(100% - 4px);\r\n    width: ${props => props.width}px;\r\n    margin-top: 2px;\r\n    margin-left: ${props => props.marginLeft ?? 0}px;\r\n    font-size: 24px;\r\n    line-height: 32px;\r\n    /* font-weight: 600; */\r\n    color: #3d3d3d;\r\n    border: solid 1px #959595;\r\n    border-radius: 4px;\r\n    padding: 0 5px;\r\n    box-sizing: border-box;\r\n    background-color: ${props => {\r\n        if (props.errorType == undefined) return '#ececec';\r\n        else {\r\n            switch (props.errorType) {\r\n                case 'required': return '#dbd7b3';\r\n                case 'length': return '#dbb3b3';\r\n                case 'value': return '#b3b3db';\r\n                case 'relation': return '#b3dbb3';\r\n            }\r\n        }\r\n    }};\r\n    text-align: left;\r\n    vertical-align: top;\r\n    user-select: text;\r\n    ${props => !props.readOnly ? '' : css`\r\n        color: #020075;\r\n        /* border: none; */\r\n        outline: none;\r\n        background-color: transparent;\r\n    `}\r\n    ::placeholder {\r\n        color: #00000050;\r\n        font-style: italic;\r\n    }\r\n`;\r\n\r\nconst _ItemCombobox = styled.select<{\r\n    readOnly?: boolean;\r\n    width?: number;\r\n    errorType?: ValidateUtil.ErrorType;\r\n    marginLeft?: number;\r\n}>`\r\n    display: inline-block;\r\n    height: calc(100% - 4px);\r\n    width: ${props => props.width}px;\r\n    margin-top: 2px;\r\n    margin-left: ${props => props.marginLeft ?? 0}px;\r\n    font-size: 24px;\r\n    line-height: 32px;\r\n    /* font-weight: 600; */\r\n    color: #3d3d3d;\r\n    border: solid 1px #959595;\r\n    border-radius: 4px;\r\n    padding: 0 5px;\r\n    box-sizing: border-box;\r\n    background-color: ${props => {\r\n        if (props.errorType == undefined) return '#ececec';\r\n        else {\r\n            switch (props.errorType) {\r\n                case 'required': return '#dbd7b3';\r\n                case 'length': return '#dbb3b3';\r\n                case 'value': return '#b3b3db';\r\n                case 'relation': return '#b3dbb3';\r\n            }\r\n        }\r\n    }};\r\n    text-align: left;\r\n    vertical-align: top;\r\n    user-select: text;\r\n    ${props => !props.readOnly ? '' : css`\r\n        color: #020075;\r\n        /* border: none; */\r\n        outline: none;\r\n        background-color: transparent;\r\n        pointer-events: none;\r\n    `}\r\n    ::placeholder {\r\n        color: #00000050;\r\n        font-style: italic;\r\n    }\r\n`;\r\n\r\nconst _Option = styled.option<{\r\n    isDisabled: boolean;\r\n}>`\r\n    ${props => !props.isDisabled ? '' : css`\r\n        color: #0000004b;\r\n    `}\r\n`;\r\n\r\nconst _Message = styled.div<{\r\n    isLink?: boolean;\r\n    isCenter: boolean;\r\n}>`\r\n    display: inline-block;\r\n    height: calc(100% - 4px);\r\n    margin-top: 2px;\r\n    font-size: ${Styles.FONT_MIDIUM}px;\r\n    line-height: 32px;\r\n    /* font-weight: 600; */\r\n    color: #002c52;\r\n    border-radius: 4px;\r\n    padding: 0 5px;\r\n    box-sizing: border-box;\r\n    /* background-color: #d37878; */\r\n    text-align: left;\r\n    vertical-align: top;\r\n    user-select: text;\r\n    ${props => !props.isCenter ? css`\r\n        margin-left: 4px;\r\n    ` : css``\r\n    }\r\n    ${props => !props.isLink ? '' : css`\r\n        color: #0459a3;\r\n        user-select: none;\r\n        text-decoration: underline;\r\n        &:hover {\r\n            color: #68a4d8;\r\n        }\r\n    `}\r\n`;\r\n\r\nconst _ButtonsDiv = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 40px;\r\n    /* background-color: #888888; */\r\n    box-sizing: border-box;\r\n    text-align: left;\r\n    white-space: nowrap;\r\n`;\r\n\r\nconst _Button = styled.div<{\r\n    isEnable: boolean;\r\n    isCenter: boolean;\r\n    width?: number;\r\n}>`\r\n    ${Styles.CSS_LABEL_MIDIUM}\r\n    ${props => props.width == undefined ? css`\r\n        padding: 0 40px;\r\n    ` : css`\r\n        width: ${props.width}px;\r\n    `}\r\n    /* line-height: 25px; */\r\n    box-sizing: border-box;\r\n    /* background-color: #a8a8a8; */\r\n    background: linear-gradient(to bottom, #cdcdcd, #ebebeb, #cdcdcd);\r\n    border: 1px solid #747474;\r\n    color: #515151;\r\n    border-radius: 4px;\r\n    ${props => !props.isCenter ? css`\r\n        margin-left: 4px;\r\n    ` : css``\r\n    }\r\n    margin: 5px 0 0 4px;\r\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\r\n    &:hover {\r\n        /* background-color: #98bfc2; */\r\n        background: linear-gradient(to bottom, #989898, #b4b4b4, #989898);\r\n    }\r\n`;\r\n\r\nconst _Switch = styled.div<{\r\n    isUse: boolean;\r\n    isEnable: boolean;\r\n    width?: number;\r\n    isRelation: boolean;\r\n}>`\r\n    ${Styles.CSS_LABEL_MIDIUM}\r\n    ${props => props.width == undefined ? css`\r\n        padding: 0 40px;\r\n    ` : css`\r\n        width: ${props.width}px;\r\n    `}\r\n    /* line-height: 25px; */\r\n    box-sizing: border-box;\r\n    background-color: #a8a8a8;\r\n    color: #515151;\r\n    border: 1px solid #747474;\r\n    ${props => !props.isRelation ? css<{ isUse: boolean }>`\r\n        background-color: ${props => !props.isUse ? '#e7e7e779' : '#e4f67e'};\r\n    ` : css<{ isUse: boolean }>`\r\n        background-color: ${props => !props.isUse ? '#ddc1d979' : '#d898b3'};\r\n        color: ${props => !props.isUse ? '#515151' : '#9c2626'};\r\n    `}\r\n    border-radius: 4px;\r\n    margin: 5px 0 0 4px;\r\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\r\n    &:hover {\r\n        ${props => !props.isRelation ? css<{ isUse: boolean }>`\r\n            background-color: ${props => !props.isUse ? '#edefb286' : '#b5be7f'};\r\n        ` : css<{ isUse: boolean }>`\r\n            background-color: ${props => !props.isUse ? '#d3a1cb79' : '#d898b3'};\r\n            color: ${props => !props.isUse ? '#515151' : '#9c2626'};\r\n        `}\r\n    }\r\n`;\r\n\r\nconst _BorderText = styled.div<{\r\n}>`\r\n    ${Styles.CSS_LABEL_SMALL}\r\n    color: #990000;\r\n    /* background-color: #0a0a0a40; */\r\n    font-style: italic;\r\n    margin: 4px 0 0 8px;\r\n`;\r\nconst _BorderPanel = styled.div<{\r\n    isEnable: boolean;\r\n}>`\r\n    display: inline-block;\r\n    margin: 0 0 0 6px;\r\n    padding: 4px;\r\n    width: calc(100% - 12px);\r\n    background-color: #dcddce;\r\n    border: 1px solid #000;\r\n    box-sizing: border-box;\r\n    border-radius: 4px;\r\n    text-align: left;\r\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\r\n`;\r\n\r\nconst _InfoDiv = styled.div<{\r\n    height: number;\r\n    color: string;\r\n}>`\r\n    margin: 4px 0 0 0;\r\n    display: inline-block;\r\n    background-color: #e7e5e561;\r\n    border: solid 1px #949494;\r\n    width: 100%;\r\n    height: ${props => props.height}px;\r\n    padding: 2px;\r\n    box-sizing: border-box;\r\n    text-align: left;\r\n    font-size: ${Styles.FONT_SMALL}px;\r\n    color: ${props => props.color};\r\n    overflow-y: auto;\r\n`;","import { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nnamespace TreeUtil {\r\n\r\n    export type ElementNode = {\r\n        // jsx: JSX.Element;\r\n        isOpen: boolean;\r\n        // index: number;\r\n        depth: number;\r\n        data: any;\r\n        children: ElementNode[];\r\n        parent: null | ElementNode;\r\n    }\r\n\r\n    export type DataNode = {\r\n        data: any;\r\n        children: DataNode[];\r\n    }\r\n\r\n    export const createNode = (data: any, parent: ElementNode): ElementNode => {\r\n        // parent.isOpen = true;\r\n        return {\r\n            data, parent, depth: parent.depth + 1,\r\n            isOpen: false,\r\n            children: [],\r\n        };\r\n    }\r\n\r\n    export const getChildIndex = (node: TreeUtil.ElementNode) => {\r\n        const parentNode = node.parent;\r\n        if (parentNode != null) {\r\n            for (let i = 0; i < parentNode.children.length; i++) {\r\n                if (node == parentNode.children[i]) return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    export const Frame = (props: {\r\n        rootDataNode: DataNode;\r\n        clickEvent: (node: ElementNode) => void;\r\n        getLabelJsx: (node: ElementNode) => JSX.Element;\r\n        invalidate: any;\r\n        isDisable?: boolean;\r\n        focusNode?: ElementNode | null;\r\n    }) => {\r\n        const isDisable = props.isDisable ?? false;\r\n        const focusNode = props.focusNode ?? null;\r\n\r\n        const ref = useRef({} as HTMLDivElement);\r\n\r\n        /**\r\n         * データを元に再帰的に以下のツリーを構成する。\r\n         * @returns ツリー\r\n         */\r\n        const buildElementNodeFromData = () => {\r\n            const build = (depth: number, dataNode: DataNode, parent: null | ElementNode): ElementNode => {\r\n                const node: ElementNode = {\r\n                    data: dataNode.data,\r\n                    depth: depth,\r\n                    // index: count,\r\n                    isOpen: false,\r\n                    children: [],\r\n                    parent\r\n                };\r\n                node.children = (() => {\r\n                    return dataNode.children.map(child => {\r\n                        return build(depth + 1, child, node);\r\n                    });\r\n                })();\r\n                return node;\r\n            }\r\n            return build(0, props.rootDataNode, null);\r\n        }\r\n        const [rootElementNode, setRootElementNode] = useState<ElementNode>(buildElementNodeFromData());\r\n\r\n        useEffect(() => {\r\n            setRootElementNode(buildElementNodeFromData());\r\n        }, [props.rootDataNode]);\r\n\r\n        useEffect(() => {\r\n            if (focusNode != null && focusNode.parent != null) {\r\n                focusNode.parent.isOpen = true;\r\n            }\r\n        }, [focusNode]);\r\n\r\n        const jsxList = useMemo(() => {\r\n            // console.log(rootElementNode);\r\n            const list: JSX.Element[] = [];\r\n            const buildJsxRecords = (element: ElementNode, spaceList: boolean[]) => {\r\n\r\n                const getSpaces = () => {\r\n                    return spaceList.map((space, i) => {\r\n                        const lines: JSX.Element[] = [];\r\n                        if (spaceList.length - 1 === i || space) lines.push(space ? <_LineFull key={lines.length} /> : <_LineTop key={lines.length} />);\r\n                        if (spaceList.length - 1 === i) lines.push(<_LineRight key={lines.length} />);\r\n                        return <_Space key={i}>{lines}</_Space>;\r\n                    });\r\n                }\r\n\r\n                const isRelationNode = () => {\r\n                    let result = false;\r\n                    let tempNode = focusNode;\r\n                    // 親判定\r\n                    while (tempNode != null) {\r\n                        if (element.parent == null || element == tempNode) {\r\n                            result = true;\r\n                            break;\r\n                        }\r\n                        tempNode = tempNode.parent;\r\n                    }\r\n                    // 兄弟判定\r\n                    if (result === false && focusNode != null && focusNode.parent != null) {\r\n                        result = focusNode.parent.children.find(node => node == element) != undefined;\r\n                    }\r\n                    return result;\r\n                }\r\n                const isCurrent = element.data == focusNode?.data;\r\n                list.push(\r\n                    <_Record\r\n                        key={list.length}\r\n                        width={ref.current.scrollWidth}\r\n                        isActive={isCurrent}\r\n                        isRelation={!isDisable && isRelationNode()}\r\n                        isDisable={isCurrent && isDisable}\r\n                    >\r\n                        {getSpaces()}\r\n                        {element.children.length === 0 ? <></> : <_Branch\r\n                            onClick={() => {\r\n                                element.isOpen = !element.isOpen;\r\n                                setRootElementNode({ ...rootElementNode });\r\n                                // alert(element.isOpen);\r\n                            }}\r\n                        >{element.isOpen ? '-' : '+'}</_Branch>}\r\n                        <_Jsx\r\n                            onClick={() => {\r\n                                props.clickEvent(element);\r\n                                setRootElementNode({ ...rootElementNode });\r\n                            }}\r\n                            onDoubleClick={() => {\r\n                                element.isOpen = !element.isOpen;\r\n                                setRootElementNode({ ...rootElementNode });\r\n                            }}\r\n                        >\r\n                            {props.getLabelJsx(element)}\r\n                        </_Jsx>\r\n                    </_Record>\r\n                );\r\n                if (element.isOpen) {\r\n                    element.children.forEach((child, i) => {\r\n                        buildJsxRecords(child, spaceList.slice().concat(element.children.length - 1 !== i));\r\n                    });\r\n                }\r\n            }\r\n            buildJsxRecords(rootElementNode, []);\r\n            // rootJsxNode.forEach((el) => {\r\n            //     addElement(el, []);\r\n            // });\r\n            return list;\r\n        }, [rootElementNode, props.invalidate, isDisable]);\r\n\r\n        return (\r\n            <_Wrap\r\n                ref={ref}\r\n                isDisable={isDisable}>\r\n                {jsxList}\r\n            </_Wrap>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TreeUtil;\r\n\r\nconst _Wrap = styled.div<{\r\n    isDisable: boolean;\r\n}>`\r\n    display: inline-block;\r\n    position: relative;\r\n    background-color: #374a54;\r\n    width: calc(100% - 10px);\r\n    height: calc(100% - 10px);\r\n    box-sizing: border-box;\r\n    border: solid 1px #000;\r\n    margin: 5px;\r\n    overflow: auto;\r\n    ${props => !props.isDisable ? '' : css`\r\n        pointer-events: none;\r\n        background-color: #1f3642;\r\n    `}\r\n`;\r\n\r\nconst _Record = styled.div<{\r\n    width: number;\r\n    isActive: boolean;\r\n    isRelation: boolean;\r\n    isDisable: boolean;\r\n}>`\r\n    display: inline-block;\r\n    /* position: relative; */\r\n    ${props => !props.isDisable ? '' : css`\r\n        background-color: #459cff46;\r\n    `}\r\n    opacity: 0.3;\r\n    ${props => !props.isRelation ? '' : css`\r\n        background-color: #ffffff28;\r\n        opacity: 1;\r\n    `}\r\n    ${props => !props.isActive ? '' : css`\r\n        background-color: #b4d9dd83;\r\n        opacity: 1;\r\n    `}\r\n    width: ${props => props.width}px;\r\n    height: 40px;\r\n    box-sizing: border-box;\r\n    white-space: nowrap;\r\n    /* border: solid 1px #000;\r\n    margin: 5px; */\r\n    & *{\r\n        vertical-align: top;\r\n    }\r\n    &:hover {\r\n        opacity: 1;\r\n    }\r\n`;\r\n\r\nconst _Space = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    /* background-color: #b6d5be; */\r\n    width: 40px;\r\n    height: 100%;\r\n    box-sizing: border-box;\r\n    /* border: solid 1px #000; */\r\n`;\r\nconst _LineTop = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    background-color: #b60000;\r\n    width: 4px;\r\n    height: 22px;\r\n    box-sizing: border-box;\r\n    margin: 0 0 0 20px;\r\n`;\r\nconst _LineFull = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    background-color: #b60000;\r\n    width: 4px;\r\n    height: 100%;\r\n    box-sizing: border-box;\r\n    margin: 0 0 0 20px;\r\n`;\r\nconst _LineRight = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    background-color: #b60000;\r\n    width: 16px;\r\n    height: 4px;\r\n    box-sizing: border-box;\r\n    margin: 18px 0 0 0;\r\n`;\r\n\r\nconst _Branch = styled.div`\r\n    display: inline-block;\r\n    /* position: relative; */\r\n    background-color: #d1d1d1;\r\n    width: 30px;\r\n    height: calc(100% - 10px);\r\n    border: solid 1px #000;\r\n    margin: 5px 0 0 3px;\r\n    box-sizing: border-box;\r\n    font-size: 30px;\r\n    /* font-weight: 600; */\r\n    color: #6d1717;\r\n    line-height: 20px;\r\n    padding-left: 3px;\r\n`;\r\nconst _Jsx = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    /* background-color: #ffffff3c; */\r\n    min-width: 100px;\r\n    height: 100%;\r\n    margin: 0 0  0 3px;\r\n    box-sizing: border-box;\r\n`;\r\n","import styled from \"styled-components\";\r\nimport FormUtil from \"../../utils/form/formUtiil\";\r\nimport { GlobalContext } from \"../entry/systemEntry\";\r\nimport { useContext } from \"react\";\r\n\r\nnamespace ConfirmDialog {\r\n\r\n    export const Component = (props: {\r\n        message: string;\r\n        width?: number;\r\n        height?: number;\r\n        buttons?: FormUtil.ButtonProps[];\r\n    }) => {\r\n\r\n        const {store,  setStore } = useContext(GlobalContext);\r\n\r\n        const width = props.width ?? 600;\r\n        const height = props.height ?? 150;\r\n        const buttons = props.buttons ?? [\r\n            {\r\n                label: 'OK',\r\n                callback: () => {\r\n                    store.system.dialog = null;\r\n                    setStore({...store});\r\n                }\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <_Frame width={width} height={height}>\r\n                <_Main><_Inner>\r\n                    {props.message.split('\\n').map((msg, i) => {\r\n                        return <FormUtil.Message\r\n                            key={i}\r\n                            message={msg}\r\n                            isCenter\r\n                        />\r\n                    })}\r\n                </_Inner></_Main>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={buttons} />\r\n            </_Frame>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDialog;\r\n\r\nconst _Frame = styled.div<{\r\n    width: number;\r\n    height: number;\r\n}>`\r\n    display: inline-block;\r\n    position: absolute;\r\n    z-index: 11;\r\n    top: calc(50% - ${props => props.height / 2}px);\r\n    left: calc(50% - ${props => props.width / 2}px);\r\n    width: ${props => props.width}px;\r\n    height: ${props => props.height}px;\r\n    background-color: #e7e7e7e2;\r\n    border: 1px solid #8f8f8f;\r\n    border-radius: 4px;\r\n    box-shadow: 10px 15px 15px #0000004b;\r\n`;\r\n\r\nconst _Main = styled.div<{}>`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 110px;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n`;\r\n\r\nconst _Inner = styled.div<{}>`\r\n    /* text-align: center; */\r\n    display: inline-block;\r\n    width: 100%;\r\n    /* background-color: #bb6868e1; */\r\n`;","\r\n/**\r\n * 入力チェックを行うユーティリティ。\r\n */\r\nnamespace ValidateUtil {\r\n\r\n    export type ErrorType = 'required' | 'length' | 'value' | 'relation';\r\n\r\n    export type Validate = {\r\n        checker: (value: string) => boolean;\r\n        errorType: ErrorType;\r\n        message?: string;\r\n    }\r\n\r\n    /**\r\n     * 必須チェック\r\n     * @param str 検証する文字列\r\n     * @returns 判定結果\r\n     */\r\n    export const checkRequired = (str: string) => {\r\n        return str.length > 0;\r\n    }\r\n\r\n    /**\r\n     * 文字列の長さチェック\r\n     * @param str 検証する文字列\r\n     * @param min 最小値\r\n     * @param max 最大値\r\n     * @returns 判定結果\r\n     */\r\n    export const checkStringLength = (str: string, min: number, max: number) => {\r\n        return str.length === 0 || (str.length >= min && str.length <= max);\r\n    }\r\n\r\n    /**\r\n     * 半角英数時チェック\r\n     * @param str 検証する文字列\r\n     * @returns 判定結果\r\n     */\r\n    export const checkAsciiChars = (str: string) => {\r\n        const list = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n        return checkIncludesChars(str, list);\r\n    }\r\n\r\n    /**\r\n     * 指定の文字列で構成されているかチェック\r\n     * @param str 検証する文字列\r\n     * @param list 入力を許す対象文字列\r\n     * @returns 判定結果\r\n     */\r\n    export const checkIncludesChars = (str: string, list: string) => {\r\n        for (let i = 0; i < str.length; i++) {\r\n            const ch = str.charAt(i);\r\n            if (list.indexOf(ch) === -1) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 指定の文字列が数値に変換できるかチェック\r\n     * @param str 検証する文字列\r\n     * @returns 判定結果\r\n     */\r\n    export const checkNumber = (str: string) => {\r\n        return !isNaN(Number(str));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param conditions \r\n     * @returns \r\n     */\r\n    export const checkAll = (conditions: boolean[]): boolean => {\r\n        let result = true;\r\n        for (let i = 0; i < conditions.length; i++) {\r\n            if (!conditions[i]) {\r\n                result = false;\r\n                break;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport default ValidateUtil;\r\n","import SystemConst from \"./systemConst\";\r\n\r\nnamespace CanvasUtil {\r\n\r\n    /**\r\n     * Canvasに任意の描画をし、画像のURLを取得する\r\n     * @param width 幅\r\n     * @param height 高さ\r\n     * @param draw 描画\r\n     * @returns 画像のURL\r\n     */\r\n    export const createURL = (width: number, height: number, draw: (ctx: CanvasRenderingContext2D) => void) => {\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        draw(ctx);\r\n        return canvas.toDataURL();\r\n    }\r\n\r\n    export const getLogoURL = () => {\r\n        return CanvasUtil.createURL(350, 80, (ctx) => {\r\n            // ctx.fillStyle = '#ffffff';\r\n            // ctx.fillRect(0, 0, 350, 80);\r\n\r\n            ctx.shadowColor = \"#555\";\r\n            ctx.shadowOffsetX = 2;\r\n            ctx.shadowOffsetY = 1;\r\n            ctx.shadowBlur = 5;\r\n            ctx.font = '55pt Arial';\r\n            ctx.fillStyle = '#db0000';\r\n            ctx.fillText('L', 30, 70);\r\n            const adjust = ctx.measureText('L').width;\r\n            ctx.fillStyle = '#ffffff';\r\n            ctx.fillText('iCreSia', 30 + adjust, 70);\r\n            ctx.save();\r\n        });\r\n    }\r\n\r\n    export const getAuthTextURL = (text: string) => {\r\n        const WIDTH = SystemConst.AUTH_TEXT_WIDTH;\r\n        const SIZE = SystemConst.AUTH_TEXT_WIDTH / 6;\r\n        return createURL(WIDTH, SystemConst.AUTH_TEXT_HEIGHT, (ctx) => {\r\n            ctx.rotate(1 * Math.PI / 180);\r\n            for (let i = 0; i < text.length; i++) {\r\n                const char = text.charAt(i);\r\n\r\n                const fontRand = Math.random() * 60;\r\n                const alphaRand = Math.random() * 60;\r\n                ctx.font = `${20 + fontRand}pt Arial`;\r\n                ctx.fillStyle = \"rgba(\" + [40, 0, 100, 0.05 + 0.01 * alphaRand] + \")\";\r\n                ctx.fillText(char, i * SIZE, 60);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default CanvasUtil;","import VectorUtil from \"./vectorUtil\";\r\n\r\nnamespace Particle {\r\n\r\n    export type Props = {\r\n        owner: Instance[];\r\n        pos: VectorUtil.XY;\r\n        vec: VectorUtil.Vector;\r\n        limit: number;\r\n        drawer: (self: Instance, ctx: CanvasRenderingContext2D) => void;\r\n        extend: ((self: Instance) => void)[];\r\n    }\r\n\r\n    export class Instance {\r\n\r\n        owner: Instance[];\r\n        pos: VectorUtil.XY;\r\n        prevPos: VectorUtil.XY;\r\n        vec: VectorUtil.Vector;\r\n        frame: number;\r\n        limit: number;\r\n        isLive: boolean;\r\n        drawer: (self: Instance, ctx: CanvasRenderingContext2D) => void;\r\n        extend: ((self: Instance) => void)[];\r\n\r\n        constructor(props: Props) {\r\n            this.owner = props.owner;\r\n            this.pos = props.pos;\r\n            this.prevPos = props.pos;\r\n            this.vec = props.vec;\r\n\r\n            this.frame = 0;\r\n            this.limit = props.limit;\r\n            this.isLive = true;\r\n            this.drawer = props.drawer;\r\n            this.extend = props.extend;\r\n        }\r\n\r\n        update = () => {\r\n\r\n            this.pos.x += this.vec.xy.x;\r\n            this.pos.y += this.vec.xy.y;\r\n\r\n            this.extend.forEach(callback => callback(this));\r\n\r\n            if (this.frame === this.limit) {\r\n                this.isLive = false;\r\n            }\r\n            this.frame++;\r\n        }\r\n\r\n        draw = (ctx: CanvasRenderingContext2D) => {\r\n            this.drawer(this, ctx);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Particle;","import Particle from \"./particle\";\r\n\r\nnamespace DrawUtil {\r\n\r\n    export type Rgba = {\r\n        r: number;\r\n        g: number;\r\n        b: number;\r\n        a: number;\r\n    }\r\n\r\n    export type ColorStop = {\r\n        offset: number;\r\n        color: string;\r\n    }\r\n\r\n    export type DrawerParam = {\r\n        color: string;\r\n        radius?: number;\r\n        disappearStartRate?: number;\r\n        shrinkStartRate?: number;\r\n    }\r\n\r\n    export const createGradDrawer = (param: DrawerParam) => {\r\n\r\n        const radiusBase = param.radius ?? 30;\r\n        return (self: Particle.Instance, ctx: CanvasRenderingContext2D) => {\r\n            let radius = radiusBase;\r\n            if (param.shrinkStartRate != undefined) {\r\n                const start = Math.floor(self.limit * param.shrinkStartRate);\r\n                if (self.frame > start) {\r\n                    const limit = self.limit - start;\r\n                    const frame = self.frame - start;\r\n                    const rate = (limit - frame) / limit;\r\n                    radius *= rate;\r\n                }\r\n            }\r\n\r\n            const x = self.pos.x;\r\n            const y = self.pos.y;\r\n            const g = ctx.createRadialGradient(x, y, 1, x, y, radius);\r\n\r\n            const grads: ColorStop[] = [];\r\n            const rgba = convertRgbaFromColorCode(param.color) ?? { r: 255, g: 255, b: 255, a: 255 };\r\n            grads.push({ offset: 0, color: '#ffffffe4' });\r\n            grads.push({ offset: 0.2, color: convertColorCodeFromRgba({ ...rgba, a: Math.floor(rgba.a * 0.1) }) });\r\n            grads.push({ offset: 1, color: convertColorCodeFromRgba({ ...rgba, a: 1 }) });\r\n\r\n            grads.forEach(grad => {\r\n                g.addColorStop(grad.offset, grad.color);\r\n            });\r\n\r\n            ctx.globalAlpha = 1;\r\n            if (param.disappearStartRate != undefined) {\r\n                const start = Math.floor(self.limit * param.disappearStartRate);\r\n                if (self.frame > start) {\r\n                    const limit = self.limit - start;\r\n                    const frame = self.frame - start;\r\n                    ctx.globalAlpha = (limit - frame) / limit;\r\n                }\r\n            }\r\n\r\n            ctx.fillStyle = g;\r\n            ctx.beginPath();\r\n            ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n        };\r\n    }\r\n\r\n    export const convertRgbaFromColorCode = (code: string): Rgba | null => {\r\n        const div = code.split('#');\r\n        if (div.length !== 2 || div[1].length < 6) return null;\r\n\r\n        const value = div[1];\r\n        const r = Number.parseInt(value.substring(0, 2), 16);\r\n        const g = Number.parseInt(value.substring(2, 4), 16);\r\n        const b = Number.parseInt(value.substring(4, 6), 16);\r\n        let a = 1;\r\n        if (value.length === 8) {\r\n            a = Number.parseInt(value.substring(6, 8), 16);\r\n        }\r\n        return { r, g, b, a };\r\n    }\r\n\r\n    export const convertColorCodeFromRgba = (rgba: Rgba): string => {\r\n        const r = ('00' + rgba.r.toString(16)).slice(-2);\r\n        const g = ('00' + rgba.g.toString(16)).slice(-2);\r\n        const b = ('00' + rgba.b.toString(16)).slice(-2);\r\n        const a = ('00' + rgba.a.toString(16)).slice(-2);\r\n        return `#${r}${g}${b}${a}`;\r\n    }\r\n\r\n    export const toWhite = (color: string, rate: number): string => {\r\n        return color;\r\n    }\r\n}\r\n\r\nexport default DrawUtil;","namespace VectorUtil {\r\n\r\n    export type XY = {\r\n        x: number, y: number;\r\n    }\r\n\r\n    export class Vector {\r\n\r\n        xy: XY;\r\n        rad: number;\r\n        len: number;\r\n\r\n        constructor(xy: XY) {\r\n            this.xy = xy;\r\n            this.rad = 0;\r\n            this.len = 0;\r\n            this.syncFromXY();\r\n        }\r\n\r\n        syncFromXY = () => {\r\n            this.len = Math.sqrt(this.xy.x * this.xy.x + this.xy.y * this.xy.y);\r\n            this.rad = Math.atan2(this.xy.y, this.xy.x);\r\n        }\r\n\r\n        syncFromRad = () => {\r\n            this.xy.x = Math.cos(this.rad) * this.len;\r\n            this.xy.y = Math.sin(this.rad) * this.len;\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default VectorUtil;","\r\nnamespace ParamUtil {\r\n    export enum VisualParamType {\r\n        RADIUS = 'radius',\r\n        COLOR_R = 'color_r',\r\n        COLOR_G = 'color_g',\r\n        COLOR_B = 'color_b',\r\n        COLOR_A = 'color_a',\r\n        THICKNESS = 'thickness',\r\n    }\r\n    export const VisualParams = Object.values(VisualParamType);\r\n    export type VisualParam = typeof VisualParams[number];\r\n\r\n    export enum BehaviorParamType {\r\n        LIMIT = 'limit',\r\n        POS_X = 'pos_x',\r\n        POS_Y = 'pos_y',\r\n        VEC_X = 'vec_x',\r\n        VEC_Y = 'vec_y',\r\n        VEC_RAD = 'vec_radian',\r\n        VEC_LEN = 'vec_length',\r\n    }\r\n    export const BehaviorParams = Object.values(BehaviorParamType);\r\n    export type BehaviorParam = typeof BehaviorParams[number];\r\n\r\n    export enum SelfParamType {\r\n        FRAME = 'self_frame',\r\n        LIMIT = 'self_limit',\r\n        POS_X = 'self_pos_x',\r\n        POS_Y = 'self_pos_y',\r\n        VEC_X = 'self_vec_x',\r\n        VEC_Y = 'self_vec_y',\r\n        VEC_RAD = 'self_vec_radian',\r\n        VEC_LEN = 'self_vec_length',\r\n    }\r\n    export const SelfParams = Object.values(SelfParamType);\r\n    export type SelfParam = typeof SelfParams[number];\r\n\r\n    export enum ExtendParamType {\r\n        LOOP_COUNT = 'loop_count',\r\n        LOOP_ITERATE = 'loop_iterate',\r\n        INVOKE = 'invoke',\r\n    }\r\n    export const ExtendParams = Object.values(ExtendParamType);\r\n    export type ExtendParam = typeof ExtendParams[number];\r\n\r\n    export enum EffectParamType {\r\n        DISAPPEAR_START = 'disappear_start',\r\n        SHRINK_START = 'shrink_start'\r\n    }\r\n    export const EffectParams = Object.values(EffectParamType);\r\n    export type EffectParam = typeof EffectParams[number];\r\n\r\n    export enum ModulateParamType {\r\n        DECAY_RATE = 'decay_rate',\r\n        DECAY_LIMIT = 'decay_limit',\r\n        GRAVITY_VAL = 'gravity_val',\r\n        GRAVITY_LIMIT = 'gravity_limit',\r\n    }\r\n    export const ModulateParams = Object.values(ModulateParamType);\r\n    export type ModulateParam = typeof ModulateParams[number];\r\n\r\n    export enum ConstantType {\r\n        SCREEN_WIDTH = 'screen_width',\r\n        SCREEN_HEIGHT = 'screen_height',\r\n        PI = 'pi',\r\n        RADIAN_ROUND = 'radian_round',\r\n    }\r\n    export const Constants = Object.values(ConstantType);\r\n    export type Constant = typeof Constants[number];\r\n\r\n}\r\n\r\nexport default ParamUtil;","import Particle from \"../../graphic/particle\";\r\n\r\nnamespace ModulateBuilder {\r\n\r\n    type ModulateParam = {\r\n        decayRate?: number;\r\n        decayLimit?: number;\r\n        gravity?: number;\r\n        gravityLimit?: number;\r\n    }\r\n\r\n    export const build = (extendList: ((self: Particle.Instance) => void)[], param: ModulateParam) => {\r\n        \r\n        // 減衰メソッド\r\n        if (param.decayRate != undefined && param.decayLimit != undefined) {\r\n            const decayLimit = param.decayLimit;\r\n            const decayRate = param.decayRate;\r\n            extendList.push((self: Particle.Instance) => {\r\n\r\n                if (self.vec.len > decayLimit) {\r\n                    self.vec.len = self.vec.len * decayRate;\r\n                    self.vec.syncFromRad();\r\n                }\r\n            });\r\n        }\r\n        // 重力メソッド\r\n        if (param.gravity != undefined && param.gravityLimit != undefined) {\r\n            const gravityLimit = param.gravityLimit;\r\n            const gravity = param.gravity;\r\n            extendList.push((self: Particle.Instance) => {\r\n\r\n                if (self.vec.xy.y < gravityLimit) {\r\n                    self.vec.xy.y += gravity;\r\n                    self.vec.syncFromXY();\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default ModulateBuilder;","import { assert } from \"console\";\r\nimport TreeUtil from \"../../../utils/treeUtil\";\r\nimport DrawUtil from \"../../graphic/drawUtil\";\r\nimport Particle from \"../../graphic/particle\";\r\nimport VectorUtil from \"../../graphic/vectorUtil\";\r\nimport LogicUtil from \"../factory/util/logicUtil\";\r\nimport ParamUtil from \"../factory/util/paramUtil\";\r\nimport ModulateBuilder from \"./modulateBuilder\";\r\n\r\nnamespace PreviewUtil {\r\n\r\n    export const SCREEN_WIDTH = 550;\r\n    export const SCREEN_HEIGHT = 550;\r\n\r\n    export type ValueMap = {\r\n        name: string;\r\n        value: number;\r\n    }\r\n\r\n    export const buildLogicProps = (\r\n        owner: Particle.Instance[],\r\n        origin: LogicUtil.NodeLogicItem,\r\n        rootData: LogicUtil.WrapElement,\r\n        sends: ValueMap[]\r\n    ): Particle.Props => {\r\n\r\n        /**\r\n         * ディペンドするロジック要素を識別名から探して返す。\r\n         * @param name ロジックの識別名\r\n         * @returns ロジック要素\r\n         */\r\n        const searchDependLogic = (name: string): LogicUtil.NodeLogicItem | null => {\r\n            const mng = (rootData.data as LogicUtil.NodeRoot).logicMng.data as LogicUtil.NodeLogicManager;\r\n            const wrap = mng.defs.find(def => (def.data as LogicUtil.NodeLogicItem).name === name);\r\n            if (wrap == undefined) return null;\r\n            return wrap.data as LogicUtil.NodeLogicItem;\r\n        }\r\n\r\n        /**\r\n         * 再帰的にパーティクルを生成する。\r\n         * @param cur ルートとなるロジック要素\r\n         * @param sends 親要素から送られてきたフィールド\r\n         * @returns パーティクルのプロパティ\r\n         */\r\n        const createParticleRec = (cur: LogicUtil.NodeLogicItem, sends: ValueMap[]): Particle.Props => {\r\n            let valueMapList: ValueMap[] = sends.concat(ConstantValueMap);\r\n\r\n\r\n            // フィールドのパラメータを取得\r\n            const fieldMng = searchElement('field-mng', cur.mngs);\r\n            if (fieldMng != null) {\r\n                (fieldMng.data as LogicUtil.NodeFieldManager).fields.forEach(field => {\r\n                    const paramItem = field.data as LogicUtil.NodeParamItem;\r\n                    const value = convertFormulaToValue(paramItem, valueMapList);\r\n                    valueMapList.push({ name: paramItem.name, value });\r\n                });\r\n            }\r\n\r\n            const visualParams = (searchElement('visual-mng', cur.mngs)?.data as LogicUtil.NodeParamManager).\r\n                params.map(param => param.data as LogicUtil.NodeParamItem);\r\n            const behaviorParams = (searchElement('behavior-mng', cur.mngs)?.data as LogicUtil.NodeParamManager).\r\n                params.map(param => param.data as LogicUtil.NodeParamItem);\r\n\r\n            const getVisualParam = (name: string) => {\r\n                return convertParamsToValue(name, visualParams, valueMapList);\r\n            }\r\n            const getBehaviorParam = (name: string) => {\r\n                return convertParamsToValue(name, behaviorParams, valueMapList);\r\n            }\r\n\r\n            // Behaviorのパラメータを取得\r\n            const limit = Math.floor(getBehaviorParam(ParamUtil.BehaviorParamType.LIMIT) as number);\r\n            const pos = {\r\n                x: getBehaviorParam(ParamUtil.BehaviorParamType.POS_X) as number,\r\n                y: getBehaviorParam(ParamUtil.BehaviorParamType.POS_Y) as number\r\n            };\r\n            const vec = new VectorUtil.Vector({ x: 0, y: 0 });\r\n            const isVectorMethod = behaviorParams.find(param => param.name === ParamUtil.BehaviorParamType.VEC_X) != undefined;\r\n            if (isVectorMethod) {\r\n                vec.xy.x = getBehaviorParam(ParamUtil.BehaviorParamType.VEC_X) as number;\r\n                vec.xy.y = getBehaviorParam(ParamUtil.BehaviorParamType.VEC_Y) as number;\r\n                vec.syncFromXY();\r\n            } else {\r\n                vec.rad = getBehaviorParam(ParamUtil.BehaviorParamType.VEC_RAD) as number;\r\n                vec.len = getBehaviorParam(ParamUtil.BehaviorParamType.VEC_LEN) as number;\r\n                vec.syncFromRad();\r\n            }\r\n\r\n            /**\r\n             * 追加動作（子要素、エフェクト、モデュレート）\r\n             */\r\n            const extendList: ((self: Particle.Instance) => void)[] = [];\r\n\r\n            // 子要素を生成する\r\n            const connectMng = searchElement('inherit-mng', cur.mngs);\r\n            if (connectMng != null) {\r\n\r\n                // パーティクル情報のフィールド追加\r\n                valueMapList.push({ name: ParamUtil.BehaviorParamType.POS_X, value: pos.x });\r\n                valueMapList.push({ name: ParamUtil.BehaviorParamType.POS_Y, value: pos.y });\r\n                valueMapList.push({ name: ParamUtil.BehaviorParamType.VEC_X, value: vec.xy.x });\r\n                valueMapList.push({ name: ParamUtil.BehaviorParamType.VEC_X, value: vec.xy.y });\r\n                valueMapList.push({ name: ParamUtil.BehaviorParamType.VEC_RAD, value: vec.rad });\r\n                valueMapList.push({ name: ParamUtil.BehaviorParamType.VEC_LEN, value: vec.len });\r\n\r\n                const connects = (connectMng.data as LogicUtil.NodeConnectManager).inherits;\r\n\r\n                connects.forEach(connect => {\r\n                    const connector = connect.data as LogicUtil.NodeInheritConnector;\r\n                    if (connector.disable ?? false) return;\r\n\r\n                    const logicItem = connector.method === 'create' ?\r\n                        searchElement('inherit-logic', connector.mngs)?.data as LogicUtil.NodeLogicItem :\r\n                        searchDependLogic(connector.depend);\r\n\r\n                    if (logicItem != null) {\r\n\r\n                        extendList.push((self: Particle.Instance) => {\r\n\r\n                            const addValueMap = (item: ValueMap) => {\r\n                                const map = valueMapList.find(map => map.name === item.name);\r\n                                if (map != undefined) map.value = item.value;\r\n                                else valueMapList.push(item);\r\n                            }\r\n                            addValueMap({ name: ParamUtil.SelfParamType.FRAME, value: self.frame });\r\n                            addValueMap({ name: ParamUtil.SelfParamType.LIMIT, value: self.limit });\r\n                            addValueMap({ name: ParamUtil.SelfParamType.POS_X, value: self.pos.x });\r\n                            addValueMap({ name: ParamUtil.SelfParamType.POS_Y, value: self.pos.y });\r\n                            addValueMap({ name: ParamUtil.SelfParamType.VEC_X, value: self.vec.xy.x });\r\n                            addValueMap({ name: ParamUtil.SelfParamType.VEC_Y, value: self.vec.xy.y });\r\n                            addValueMap({ name: ParamUtil.SelfParamType.VEC_RAD, value: self.vec.rad });\r\n                            addValueMap({ name: ParamUtil.SelfParamType.VEC_LEN, value: self.vec.len });\r\n\r\n                            let loopCnt = 1;\r\n                            const extendItem = searchElement('extend-mng', connector.mngs) as LogicUtil.WrapElement;\r\n                            const extendParams = (extendItem.data as LogicUtil.NodeParamManager).params.map(param => param.data as LogicUtil.NodeParamItem);\r\n                            const loopCntVal = convertParamsToValue(ParamUtil.ExtendParamType.LOOP_COUNT, extendParams, valueMapList);\r\n\r\n                            // 派生条件\r\n                            const isInvoke = convertParamsToBoolean(ParamUtil.ExtendParamType.INVOKE, extendParams, valueMapList) ?? true;\r\n\r\n                            // 条件を満たさない場合、以下の処理（パーティクルの生成）を行わない\r\n                            if (!isInvoke) return;\r\n\r\n                            // イテレータを利用している場合\r\n                            if (loopCntVal != undefined) {\r\n                                loopCnt = loopCntVal;\r\n                            }\r\n\r\n                            for (let i = 0; i < loopCnt; i++) {\r\n                                // console.log(self.frame);\r\n\r\n                                // イテレータ関連のパラメータを追加\r\n                                const iterateValueMap: ValueMap[] = [\r\n                                    { name: ParamUtil.ExtendParamType.LOOP_COUNT, value: loopCnt },\r\n                                    { name: ParamUtil.ExtendParamType.LOOP_ITERATE, value: i }\r\n                                ];\r\n\r\n                                const sendItem = searchElement('send-mng', connector.mngs)?.data as LogicUtil.NodeParamManager;\r\n                                const params = sendItem.params.map(param => param.data as LogicUtil.NodeParamItem);\r\n                                const sendValueMapList: ValueMap[] = params.map(item => {\r\n                                    return { name: item.name, value: convertParamsToValue(item.name, params, valueMapList.concat(iterateValueMap)) ?? 0 }\r\n                                });\r\n\r\n                                const props = createParticleRec(\r\n                                    logicItem,\r\n                                    sendValueMapList\r\n                                );\r\n                                self.owner.push(new Particle.Instance(props));\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n\r\n            // モデュレート（動きの変化）を付与\r\n            ModulateBuilder.build(extendList, {\r\n                decayLimit: getBehaviorParam(ParamUtil.ModulateParamType.DECAY_LIMIT),\r\n                decayRate: getBehaviorParam(ParamUtil.ModulateParamType.DECAY_RATE),\r\n                gravity: getBehaviorParam(ParamUtil.ModulateParamType.GRAVITY_VAL),\r\n                gravityLimit: getBehaviorParam(ParamUtil.ModulateParamType.GRAVITY_LIMIT),\r\n            });\r\n\r\n            // Visualのパラメータを取得\r\n            const radius = getVisualParam(ParamUtil.VisualParamType.RADIUS);\r\n            const colorR = getVisualParam(ParamUtil.VisualParamType.COLOR_R);\r\n            const colorG = getVisualParam(ParamUtil.VisualParamType.COLOR_G);\r\n            const colorB = getVisualParam(ParamUtil.VisualParamType.COLOR_B);\r\n            const colorA = getVisualParam(ParamUtil.VisualParamType.COLOR_A);\r\n            // エフェクトお付与\r\n            let disappearStart = getVisualParam(ParamUtil.EffectParamType.DISAPPEAR_START);\r\n            let shrinkStart = getVisualParam(ParamUtil.EffectParamType.SHRINK_START);\r\n\r\n            let drawer: (self: Particle.Instance, ctx: CanvasRenderingContext2D) => void = () => { };\r\n            if (radius != undefined) {\r\n                drawer = DrawUtil.createGradDrawer({\r\n                    radius: radius,\r\n                    color: DrawUtil.convertColorCodeFromRgba({\r\n                        r: colorR as number,\r\n                        g: colorG as number,\r\n                        b: colorB as number,\r\n                        a: colorA as number,\r\n                    }),\r\n                    disappearStartRate: disappearStart,\r\n                    shrinkStartRate: shrinkStart\r\n                });\r\n            }\r\n\r\n            return {\r\n                owner, pos, vec,\r\n                limit, drawer,\r\n                extend: extendList\r\n            };\r\n        }\r\n\r\n        return createParticleRec(origin, sends);\r\n    }\r\n\r\n    const searchElement = (type: LogicUtil.NodeType, warpList: LogicUtil.WrapElement[]) => {\r\n        return warpList.find(wrap => wrap.type === type) ?? null;\r\n    }\r\n\r\n    /**\r\n     * 式を計算して結果の値を返す\r\n     * @param name プロパティ名\r\n     * @param params パラメータ要素\r\n     * @param valueMapList 値変換マップ\r\n     * @returns 算出された値\r\n     */\r\n    const convertParamsToValue = (name: string, params: LogicUtil.NodeParamItem[], valueMapList: ValueMap[]): number | undefined => {\r\n        const formula = params.find(param => param.name === name);\r\n        if (formula == undefined) return undefined;\r\n        return convertFormulaToValue(formula, valueMapList);\r\n    }\r\n\r\n    const convertFormulaToValue = (formula: LogicUtil.NodeParamItem, valueMapList: ValueMap[]): number => {\r\n        const values = formula.values.map(v => {\r\n            if (v.type === 'direct') return Number(v.value);\r\n            const valueMap = valueMapList.find(m => m.name === v.value);\r\n            if (valueMap == undefined) return 0;\r\n            return valueMap.value;\r\n        });\r\n\r\n        let formulaStr = '';\r\n        let varCnt = 0;\r\n        formula.formulaItems.forEach((item, i) => {\r\n            let str = item;\r\n            if (item === 'var') {\r\n                str = values[varCnt].toString();\r\n                varCnt++;\r\n            }\r\n            else if (item === 'rand(') str = 'Math.random()*(';\r\n            else if (item === 'integer(') str = 'Math.floor(';\r\n            formulaStr += str;\r\n        });\r\n        // console.log(formulaStr);\r\n        const ret = Function(`return (${formulaStr})`)();\r\n        // console.log(ret);\r\n        return ret;\r\n    }\r\n\r\n    const convertParamsToBoolean = (name: string, params: LogicUtil.NodeParamItem[], valueMapList: ValueMap[]): boolean | undefined => {\r\n        const formula = params.find(param => param.name === name);\r\n        if (formula == undefined) return undefined;\r\n        return convertFormulaToBoolean(formula, valueMapList);\r\n    }\r\n\r\n    const convertFormulaToBoolean = (formula: LogicUtil.NodeParamItem, valueMapList: ValueMap[]): boolean => {\r\n        const values = formula.values.map(v => {\r\n            if (v.type === 'direct') return Number(v.value);\r\n            const valueMap = valueMapList.find(m => m.name === v.value);\r\n            if (valueMap == undefined) return 0;\r\n            return valueMap.value;\r\n        });\r\n\r\n        let formulaStr = '';\r\n        let varCnt = 0;\r\n        formula.formulaItems.forEach((item, i) => {\r\n            let str = item;\r\n            if (item === 'var') {\r\n                str = values[varCnt].toString();\r\n                varCnt++;\r\n            }\r\n            else if (item === 'rand(') str = 'Math.random()*(';\r\n            else if (item === 'integer(') str = 'Math.floor(';\r\n            else if (item === '=') str = '==';\r\n            formulaStr += str;\r\n        });\r\n        // console.log(formulaStr);\r\n        const ret = Function(`return (${formulaStr})`)();\r\n        // console.log(formulaStr);\r\n        return ret;\r\n    }\r\n\r\n    export const ConstantValueMap: ValueMap[] = [\r\n        { name: ParamUtil.ConstantType.SCREEN_WIDTH, value: SCREEN_WIDTH },\r\n        { name: ParamUtil.ConstantType.SCREEN_HEIGHT, value: SCREEN_HEIGHT },\r\n        { name: ParamUtil.ConstantType.PI, value: 3.14159265359 },\r\n        { name: ParamUtil.ConstantType.RADIAN_ROUND, value: 3.14159265359 * 2 }\r\n    ];\r\n}\r\n\r\nexport default PreviewUtil;","import styled from \"styled-components\";\r\nimport { useContext, useEffect, useMemo, useState, useRef } from \"react\";\r\nimport { GlobalContext } from \"../../entry/systemEntry\";\r\nimport FormUtil from \"../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../utils/treeUtil\";\r\nimport LogicUtil from \"../factory/util/logicUtil\";\r\nimport { TabbedPane } from \"../../../base/components/tab/tabbedPane\";\r\nimport ValidateUtil from \"../../../utils/form/validateUtil\";\r\nimport CanvasUtil from \"../../../utils/canvasUtil\";\r\nimport Particle from \"../../graphic/particle\";\r\nimport VectorUtil from \"../../graphic/vectorUtil\";\r\nimport DrawUtil from \"../../graphic/drawUtil\";\r\nimport PreviewUtil from \"./previewUtil\";\r\nimport Styles from \"../../../base/design/styles\";\r\n\r\nnamespace LogicPreviewFrame {\r\n\r\n    const width = 600;\r\n    const height = 660;\r\n\r\n    export const Component = (props: {\r\n        node: TreeUtil.ElementNode;\r\n        rootData: LogicUtil.WrapElement;\r\n    }) => {\r\n        const { store, setStore } = useContext(GlobalContext);\r\n        const ref = useRef<HTMLDivElement>({} as HTMLDivElement);\r\n\r\n        const [formList, setFormList] = useState<FormUtil.CheckableValue[]>([]);\r\n\r\n        const [sceens, setSceens] = useState<string[]>([]);\r\n        const [frameCnt, setFrameCnt] = useState<number>(-1);\r\n        const [tabIndex, setTabIndex] = useState<number>(0);\r\n        const [cur, setCur] = useState<number>(0);\r\n        const [isBuild, setBuild] = useState<boolean>(false);\r\n        const [isPlay, setPlay] = useState<boolean>(false);\r\n\r\n        useEffect(() => {\r\n            if (isPlay) {\r\n                if (cur < frameCnt) {\r\n                    setTimeout(() => {\r\n                        setCur(cur + 1);\r\n                    }, 1000 / 30);\r\n                } else {\r\n                    setPlay(false);\r\n                    setCur(0);\r\n                }\r\n            }\r\n        }, [isPlay, cur]);\r\n\r\n        const getMapList = (): { key: string, value: string }[] => {\r\n            const argWrap = (props.node.children[0].data as LogicUtil.WrapElement);\r\n            if (argWrap.type === 'argument-mng') {\r\n                return (argWrap.data as LogicUtil.NodeArgumentManager).args.map(arg => {\r\n                    const argItem = arg.data as LogicUtil.NodeArgumentItem;\r\n                    let value: string = '';\r\n                    return { key: argItem.name, value };\r\n                });\r\n            }\r\n            return [];\r\n        }\r\n\r\n        const argMapList = useMemo(() => {\r\n            return getMapList();\r\n        }, []);\r\n\r\n        useEffect(() => {\r\n            setFormList(argMapList.map(arg => {\r\n                return { value: arg.value, errors: [] };\r\n            }));\r\n        }, []);\r\n\r\n        const formListJsx = useMemo(() => {\r\n            return formList.map((form, i) => {\r\n                return (\r\n                    <FormUtil.FormRecord\r\n                        key={i}\r\n                        titleLabel={argMapList.map(arg => arg.key)[i]}\r\n                        labelWidth={250}\r\n                        jsx={\r\n                            <FormUtil.TextField\r\n                                width={332}\r\n                                isNumber\r\n                                checkable={form}\r\n                                setCheckable={(checkable) => {\r\n                                    form = { ...checkable };\r\n                                    setFormList(formList.slice());\r\n                                }}\r\n                                validates={[\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkRequired(value),\r\n                                        errorType: \"required\"\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        }\r\n                    />);\r\n            });\r\n        }, [formList]);\r\n\r\n\r\n        const build = () => {\r\n\r\n            setBuild(true);\r\n\r\n            const sceens: string[] = [];\r\n\r\n            const owner: Particle.Instance[] = [];\r\n\r\n            let frameCnt = 0;\r\n            do {\r\n                if (frameCnt === 0) {\r\n                    const origin = (props.node.data as LogicUtil.WrapElement).data as LogicUtil.NodeLogicItem;\r\n                    owner.push(new Particle.Instance(\r\n                        PreviewUtil.buildLogicProps(owner, origin, props.rootData, formList.map((form, i) => {\r\n                            return { name: argMapList.map(arg => arg.key)[i], value: Number(form.value) }\r\n                        }))\r\n                    ));\r\n                }\r\n\r\n                sceens.push(CanvasUtil.createURL(550, 550, (ctx) => {\r\n\r\n                    // パーティクルの描画\r\n                    owner.forEach(par => {\r\n                        par.draw(ctx);\r\n                    });\r\n\r\n                    // 経過フレーム、要素数の表示\r\n                    ctx.font = '16pt Arial';\r\n                    ctx.fillStyle = '#ffffff';\r\n                    ctx.fillText(`${frameCnt}`, 6, 24);\r\n                    ctx.fillStyle = '#ffec5c';\r\n                    ctx.fillText(`${owner.length}`, 6, 44);\r\n\r\n                    ctx.save();\r\n                }));\r\n\r\n                // パーティクルの更新\r\n                for (let i = owner.length - 1; i >= 0; i--) {\r\n                    const particle = owner[i];\r\n\r\n                    particle.update();\r\n                }\r\n\r\n                // 死滅したパーティクルの削除\r\n                for (let i = owner.length - 1; i >= 0; i--) {\r\n                    const particle = owner[i];\r\n                    if (!particle.isLive) {\r\n                        owner.splice(i, 1);\r\n                    }\r\n                }\r\n\r\n                if (frameCnt > 500 || owner.length > 3000) break;\r\n                frameCnt++;\r\n            } while (owner.length > 0);\r\n            setFrameCnt(frameCnt);\r\n            setSceens(sceens);\r\n\r\n            setBuild(false);\r\n            setTabIndex(1);\r\n        }\r\n\r\n\r\n        const isInputOK = () => {\r\n            return formList.find(form => form.errors.length > 0) == undefined;\r\n        }\r\n        const buildTabJsx = (\r\n            <_Wrap>\r\n                <_FormDiv>\r\n                    {formListJsx}\r\n                </_FormDiv>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Build',\r\n                            isEnable: isInputOK() && !isBuild,\r\n                            callback: () => {\r\n                                build();\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n            </_Wrap>\r\n        );\r\n\r\n        const previewTabJsx = (\r\n            <_Wrap>\r\n                <_CanvasDiv>\r\n                    {sceens.length === 0 ? <></> : <_IMG src={sceens[cur]} />}\r\n                </_CanvasDiv>\r\n                <_ProgressDiv ref={ref} onClick={(e) => {\r\n                    const clickX = e.pageX;\r\n                    // 要素の位置を取得\r\n                    const clientRect = ref.current.getBoundingClientRect();\r\n                    const positionX = clientRect.left + window.pageXOffset;\r\n\r\n                    // 要素内におけるクリック位置を計算\r\n                    const x = clickX - positionX;\r\n                    const rate = x / clientRect.width;\r\n                    setCur(Math.floor(frameCnt * rate));\r\n                }}>\r\n                    <_ProgressVal rate={100 * cur / (frameCnt - 1)} />\r\n                </_ProgressDiv>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: '←',\r\n                            width: 50,\r\n                            isEnable: !isPlay && cur > 0,\r\n                            callback: () => {\r\n                                setCur(cur - 1);\r\n                            }\r\n                        },\r\n                        {\r\n                            label: '→',\r\n                            width: 50,\r\n                            isEnable: !isPlay && cur < sceens.length - 1,\r\n                            callback: () => {\r\n                                setCur(cur + 1);\r\n                            }\r\n                        },\r\n                        {\r\n                            label: !isPlay ? 'start' : 'Stop',\r\n                            callback: () => {\r\n                                setPlay(!isPlay);\r\n                            }\r\n                        },\r\n                        {\r\n                            label: 'reset',\r\n                            isEnable: !isPlay,\r\n                            callback: () => {\r\n                                setCur(0);\r\n                            }\r\n                        },\r\n                    ]}\r\n                />\r\n            </_Wrap>\r\n        );\r\n\r\n        return (\r\n            <_Frame\r\n                width={width}\r\n                height={height}\r\n                tabIndex={0}\r\n                onKeyDown={(e) => {\r\n                    if (tabIndex === 0) {\r\n                        if (isInputOK() && e.key === ' ') build();\r\n                    } else {\r\n                        switch (e.key) {\r\n                            case 'ArrowLeft': {\r\n                                if (!isPlay && !isPlay && cur > 0) setCur(cur - 1);\r\n                            } break;\r\n                            case 'ArrowRight': {\r\n                                if (!isPlay && cur < sceens.length - 1) setCur(cur + 1);\r\n                            } break;\r\n                            case ' ': {\r\n                                setPlay(!isPlay);\r\n                            } break;\r\n                        }\r\n                    }\r\n                    if (!isPlay && e.key === 'Escape') {\r\n                        store.system.dialog = null;\r\n                        setStore({ ...store });\r\n                    }\r\n                }}\r\n            >\r\n                <_Main>\r\n                    <TabbedPane\r\n                        tabElements={[\r\n                            { name: 'Build', enable: true, cont: buildTabJsx },\r\n                            { name: 'Play', enable: frameCnt !== -1, cont: previewTabJsx }\r\n                        ]}\r\n                        activeNo={tabIndex}\r\n                        selectTabIndex={(index: number) => setTabIndex(index)}\r\n                    />\r\n                </_Main>\r\n                <_CloseButton\r\n                    isEnable={!isPlay}\r\n                    onClick={() => {\r\n                        store.system.dialog = null;\r\n                        setStore({ ...store });\r\n                    }}\r\n                >×</_CloseButton>\r\n            </_Frame>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LogicPreviewFrame;\r\n\r\nconst _Frame = styled.div<{\r\n    width: number;\r\n    height: number;\r\n}>`\r\n    display: inline-block;\r\n    position: absolute;\r\n    z-index: 11;\r\n    top: calc(50% - ${props => props.height / 2}px);\r\n    left: calc(50% - ${props => props.width / 2}px);\r\n    width: ${props => props.width}px;\r\n    height: ${props => props.height}px;\r\n    background-color: #e7e7e7e2;\r\n    border: 1px solid #8f8f8f;\r\n    border-radius: 4px;\r\n    box-shadow: 10px 15px 15px #0000004b;\r\n`;\r\n\r\nconst _Main = styled.div<{}>`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #4d5056df;\r\n`;\r\nconst _FormDiv = styled.div<{}>`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 580px;\r\n    background-color: #a2c1d5df;\r\n`;\r\nconst _CanvasDiv = styled.div<{}>`\r\n    display: inline-block;\r\n    width: ${PreviewUtil.SCREEN_WIDTH}px;\r\n    height: ${PreviewUtil.SCREEN_HEIGHT}px;\r\n    margin: 5px 0 0 20px;\r\n    background-color: #020202df;\r\n    border: solid 1px #fff;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nconst _Wrap = styled.div<{}>`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #aed5d8e0;\r\n`;\r\n\r\nconst _ProgressDiv = styled.div<{}>`\r\n    display: inline-block;\r\n    width: calc(100% - 8px);\r\n    height: 20px;\r\n    margin: 5px 0 0 4px;\r\n    background-color: #000000;\r\n    border: solid 1px #fff;\r\n    box-sizing: border-box;\r\n`;\r\nconst _ProgressVal = styled.div<{\r\n    rate: number;\r\n}>`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: ${props => props.rate}%;\r\n    height: 100%;\r\n    /* background-color: #2fccf3; */\r\n    background: linear-gradient(to bottom, #37819492, #2fccf3, #37819492);\r\n`;\r\n\r\nconst _IMG = styled.img`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n`;\r\n\r\nconst _CloseButton = styled.div<{\r\n    isEnable: boolean;\r\n}>`\r\n    display: inline-block;\r\n    position: absolute;\r\n    top: 2px;\r\n    right: 4px;\r\n    width: 30px;\r\n    height: 30px;\r\n    z-index: 12;\r\n    background-color: #d5d5d5;\r\n    border: 1px solid #3d3d3d;\r\n    border-radius: 4px;\r\n    font-size: 18px;\r\n    padding-left: 8px;\r\n    font-weight: 600;\r\n    color: #3d3d3d;\r\n    box-sizing: border-box;\r\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\r\n    &:hover {\r\n        background-color: #ce9595;\r\n    }\r\n`;","import TreeUtil from \"../../../../utils/treeUtil\";\r\nimport LogicUtil from \"./logicUtil\";\r\nimport ParamUtil from \"./paramUtil\";\r\n\r\n\r\nnamespace LogicElementUtil {\r\n\r\n    export const addChild = (wrapElement: LogicUtil.WrapElement, node: TreeUtil.ElementNode) => {\r\n        return insertChild(wrapElement, node, node.children.length);\r\n    }\r\n    export const insertChild = (wrapElement: LogicUtil.WrapElement, node: TreeUtil.ElementNode, listPos: number) => {\r\n        const wrap = node.data as LogicUtil.WrapElement;\r\n        const listName = getListName(wrap.type);\r\n        wrap.data[`${listName}`].splice(listPos, 0, wrapElement);\r\n        const newNode = TreeUtil.createNode(wrapElement, node);\r\n        node.children.splice(listPos, 0, newNode);\r\n        return newNode;\r\n    }\r\n\r\n    export const removeChild = (node: TreeUtil.ElementNode, listPos: number, size: number) => {\r\n        const wrap = node.data as LogicUtil.WrapElement;\r\n        const listName = getListName(wrap.type);\r\n        wrap.data[`${listName}`].splice(listPos, size);\r\n        node.children.splice(listPos, size);\r\n    }\r\n\r\n    export const isHead = (node: TreeUtil.ElementNode) => {\r\n        if (node.parent == null) return false;\r\n        const ownerChildren = node.parent.children;\r\n        return ownerChildren[0] == node;\r\n    }\r\n\r\n    export const isTail = (node: TreeUtil.ElementNode) => {\r\n        if (node.parent == null) return false;\r\n        const ownerChildren = node.parent.children;\r\n        return ownerChildren[ownerChildren.length - 1] == node;\r\n    }\r\n\r\n    export const swapOrder = (node: TreeUtil.ElementNode, offset: number) => {\r\n        if (node.parent == null) return;\r\n        const ownerChildren = node.parent.children;\r\n        const wrap = node.parent.data as LogicUtil.WrapElement;\r\n        const listName = getListName(wrap.type);\r\n        const ownDataChildren = wrap.data[`${listName}`] as LogicUtil.WrapElement[];\r\n\r\n        // 自身の要素番号を取得\r\n        let curNo = -1;\r\n        ownerChildren.some((it, i) => {\r\n            if (it == node) {\r\n                curNo = i;\r\n                return 1;\r\n            }\r\n        });\r\n        if (curNo === -1) return;\r\n\r\n        // ツリーノードの入れ替え\r\n        const swapNode = ownerChildren[curNo];\r\n        ownerChildren[curNo] = ownerChildren[curNo + offset];\r\n        ownerChildren[curNo + offset] = swapNode;\r\n        // データ要素の入れ替え\r\n        const swapData = ownDataChildren[curNo];\r\n        ownDataChildren[curNo] = ownDataChildren[curNo + offset];\r\n        ownDataChildren[curNo + offset] = swapData;\r\n    }\r\n\r\n    export const getListName = (type: LogicUtil.NodeType) => {\r\n        switch (type) {\r\n            case 'seed-mng':\r\n            case 'logic-mng': return 'defs';\r\n            case 'seed-item':\r\n            case 'connector':\r\n            case 'inherit-logic':\r\n            case 'logic-item': return 'mngs';\r\n            case 'send-mng':\r\n            case 'behavior-mng':\r\n            case 'visual-mng':\r\n            case 'extend-mng':\r\n            case 'visual-mng': return 'params';\r\n            case 'inherit-mng': return 'inherits';\r\n            case 'argument-mng': return 'args';\r\n            case 'sample-mng': return 'samples';\r\n            case 'field-mng': return 'fields';\r\n            case 'thumbnail-mng': return 'items';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    export const getNamableProps = (type: LogicUtil.NodeType) => {\r\n        switch (type) {\r\n            case 'connector': return 'id';\r\n            case 'logic-item': return 'name';\r\n        }\r\n        return '';\r\n    }\r\n\r\n\r\n    export const createParamWrap = (type: LogicUtil.NodeType, paramDataList: LogicUtil.NodeParamItem): LogicUtil.WrapElement => {\r\n        return { type: type, data: paramDataList };\r\n    }\r\n    export const createParamWrapList = (type: LogicUtil.NodeType, paramDataList: LogicUtil.NodeParamItem[]): LogicUtil.WrapElement[] => {\r\n        return paramDataList.map(data => {\r\n            return { type: type, data: data };\r\n        });\r\n    }\r\n\r\n    export const createVisualParams = (): LogicUtil.WrapElement[] => {\r\n        const type = ParamUtil.VisualParamType;\r\n        return createParamWrapList('param-item', [\r\n            { name: type.RADIUS, formulaItems: ['var'], values: [{ type: 'direct', value: '20' }] },\r\n            { name: type.COLOR_R, formulaItems: ['var'], values: [{ type: 'direct', value: '255' }] },\r\n            { name: type.COLOR_G, formulaItems: ['var'], values: [{ type: 'direct', value: '255' }] },\r\n            { name: type.COLOR_B, formulaItems: ['var'], values: [{ type: 'direct', value: '255' }] },\r\n            { name: type.COLOR_A, formulaItems: ['var'], values: [{ type: 'direct', value: '255' }] },\r\n        ]);\r\n    }\r\n\r\n    export const createBehaviorParams = (): LogicUtil.WrapElement[] => {\r\n        const list: LogicUtil.NodeParamItem[] = [];\r\n        const type = ParamUtil.BehaviorParamType;\r\n        list.push({\r\n            name: type.LIMIT,\r\n            formulaItems: ['var'], values: [{ type: 'direct', value: '30' }]\r\n        });\r\n        list.push({\r\n            name: type.POS_X,\r\n            formulaItems: ['var'], values: [{ type: 'direct', value: '0' }]\r\n        });\r\n        list.push({\r\n            name: type.POS_Y,\r\n            formulaItems: ['var'], values: [{ type: 'direct', value: '0' }]\r\n        });\r\n        list.push({\r\n            name: type.VEC_X,\r\n            formulaItems: ['var'], values: [{ type: 'direct', value: '0' }]\r\n        });\r\n        list.push({\r\n            name: type.VEC_Y,\r\n            formulaItems: ['var'], values: [{ type: 'direct', value: '0' }]\r\n        });\r\n        return createParamWrapList('param-item', list);\r\n    }\r\n\r\n    export const getDefaultLogicMngs = (): LogicUtil.WrapElement[] => {\r\n        return [\r\n            {\r\n                type: 'visual-mng',\r\n                data: {\r\n                    params: createVisualParams()\r\n                } as LogicUtil.NodeParamManager\r\n            },\r\n            {\r\n                type: 'behavior-mng',\r\n                data: {\r\n                    params: createBehaviorParams()\r\n                } as LogicUtil.NodeParamManager\r\n            }\r\n        ];\r\n    }\r\n\r\n    export const getDefaultSeedMngs = (): LogicUtil.WrapElement[] => {\r\n        return [\r\n            {\r\n                type: 'interface-mng',\r\n                data: {\r\n                    mngs: [\r\n                        {\r\n                            type: 'seedarg-mng',\r\n                            data: {\r\n                                args: []\r\n                            } as LogicUtil.NodeSeedArgManager\r\n                        },\r\n                        {\r\n                            type: 'seedsend-mng',\r\n                            data: {\r\n                                params: []\r\n                            } as LogicUtil.NodeSeedSendManager\r\n                        },\r\n                    ]\r\n                } as LogicUtil.NodeInterfaceMng\r\n            },\r\n            {\r\n                type: 'thumbnail-mng',\r\n                data: {\r\n                    items: []\r\n                } as LogicUtil.NodeThumnailManager\r\n            },\r\n            {\r\n                type: 'sample-mng',\r\n                data: {\r\n                    samples: []\r\n                } as LogicUtil.NodeSampleManager\r\n            }\r\n        ];\r\n    }\r\n\r\n    export const getInitialData = (): LogicUtil.WrapElement => {\r\n        return {\r\n            type: 'root',\r\n            data: {\r\n                seedMng: {\r\n                    type: 'seed-mng',\r\n                    data: {\r\n                        defs: []\r\n                    } as LogicUtil.NodeSeedManager\r\n                } as LogicUtil.WrapElement,\r\n                logicMng: {\r\n                    type: 'logic-mng',\r\n                    data: {\r\n                        defs: []\r\n                    } as LogicUtil.NodeLogicManager\r\n                } as LogicUtil.WrapElement\r\n            } as LogicUtil.NodeRoot\r\n        }\r\n    }\r\n\r\n    export const getSeedNameList = (mng: LogicUtil.NodeSeedManager) => {\r\n        const nameList: string[] = [];\r\n        mng.defs.forEach(seed => {\r\n            if (seed.data != null) {\r\n                nameList.push((seed.data as LogicUtil.NodeSeedItem).name);\r\n            }\r\n        });\r\n        return nameList;\r\n    }\r\n\r\n    export const getLogicNameList = (mng: LogicUtil.NodeLogicManager) => {\r\n        const nameList: string[] = [];\r\n        mng.defs.forEach(logic => {\r\n            if (logic.data != null) {\r\n                nameList.push((logic.data as LogicUtil.NodeLogicItem).name);\r\n            }\r\n        });\r\n        return nameList;\r\n    }\r\n\r\n    export const getInheritIdList = (mng: LogicUtil.NodeConnectManager) => {\r\n        const idList: string[] = [];\r\n        mng.inherits.forEach(inherit => {\r\n            if (inherit.data != null) {\r\n                idList.push((inherit.data as LogicUtil.NodeInheritConnector).id);\r\n            }\r\n        });\r\n        return idList;\r\n    }\r\n\r\n    export const getParamNameList = (curLogicOwner: LogicUtil.NodeLogicItem) => {\r\n        const nameList: string[] = [];\r\n\r\n        // システム固有のパラメータ名を取得\r\n        ParamUtil.VisualParams.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n        ParamUtil.BehaviorParams.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n        ParamUtil.SelfParams.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n        ParamUtil.ExtendParams.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n        ParamUtil.EffectParams.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n        ParamUtil.ModulateParams.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n        ParamUtil.Constants.forEach(name => {\r\n            nameList.push(name);\r\n        });\r\n\r\n        // 引数のパラメータ名を取得\r\n        const argMng = curLogicOwner.mngs.find(mng => mng.type === 'argument-mng');\r\n        if (argMng != undefined) {\r\n            const args = (argMng.data as LogicUtil.NodeArgumentManager).args;\r\n            args.forEach(arg => {\r\n                if (arg.data != null) {\r\n                    nameList.push((arg.data as LogicUtil.NodeArgumentItem).name);\r\n                }\r\n            });\r\n        }\r\n        // フィールドのパラメータ名を取得\r\n        const fieldMng = curLogicOwner.mngs.find(mng => mng.type === 'field-mng');\r\n        if (fieldMng != undefined) {\r\n            const fields = (fieldMng.data as LogicUtil.NodeFieldManager).fields;\r\n            fields.forEach(field => {\r\n                if (field.data != null) {\r\n                    nameList.push((field.data as LogicUtil.NodeParamItem).name);\r\n                }\r\n            });\r\n        }\r\n        return nameList;\r\n    }\r\n\r\n    /**\r\n     * 子要素の接頭連番をチェックし、重複しない名称を返す。\r\n     * @param prefix 接頭語\r\n     * @param node 基準となるノード\r\n     */\r\n    export const getNumberingOnPrefixName = (prefix: string, node: TreeUtil.ElementNode) => {\r\n        let num = 0;\r\n        // 接頭番号を取得\r\n        while (true) {\r\n            const check = node.children.find(child => {\r\n                const wrap = child.data as LogicUtil.WrapElement;\r\n                if (wrap.data == null) return false;\r\n                console.log(wrap);\r\n                return wrap.data[getNamableProps(wrap.type)] === `${prefix}${num}`;\r\n            });\r\n            if (check != undefined) num++;\r\n            else break;\r\n        }\r\n        return `${prefix}${num}`;\r\n    }\r\n\r\n    const getSendParamList = (sendNode: TreeUtil.ElementNode, rootData: LogicUtil.WrapElement): string[] => {\r\n        const connector = (sendNode.parent?.data as LogicUtil.WrapElement).data as LogicUtil.NodeInheritConnector;\r\n        const isCreate = connector.method === 'create';\r\n        if (!isCreate) {\r\n            const rootNode = rootData.data as LogicUtil.NodeRoot;\r\n            const inheritMng = rootNode.logicMng.data as LogicUtil.NodeLogicManager;\r\n            const dependItem = inheritMng.defs.find(wrap => {\r\n                return (wrap.data as LogicUtil.NodeLogicItem).name === connector.depend;\r\n            });\r\n            if (dependItem != undefined) {\r\n                const logicWrap = dependItem;\r\n                const argWrap = (logicWrap.data as LogicUtil.NodeLogicItem).mngs[0];\r\n                if (argWrap.type === 'argument-mng') {\r\n                    return (argWrap.data as LogicUtil.NodeArgumentManager).args.map(arg => {\r\n                        return (arg.data as LogicUtil.NodeArgumentItem).name;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    export const initSendParams = (sendNode: TreeUtil.ElementNode, rootData: LogicUtil.WrapElement) => {\r\n        const sendParamList = getSendParamList(sendNode, rootData);\r\n        // console.log(sendParamList);\r\n        const wrap = sendNode.data as LogicUtil.WrapElement;\r\n        const params = (wrap.data as LogicUtil.NodeParamManager).params;\r\n        // 必要な存在しないパラメータを追加\r\n        const curParamList = params.map(param => {\r\n            return (param.data as LogicUtil.NodeParamItem).name;\r\n        });\r\n        sendParamList.forEach(param => {\r\n            if (!curParamList.includes(param)) {\r\n                const paramWrap = LogicElementUtil.createParamWrap('send-item',\r\n                    { name: param, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] }\r\n                );\r\n                params.push(paramWrap);\r\n                sendNode.children.push(TreeUtil.createNode(paramWrap, sendNode));\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * ロジック名の変更に伴い、参照しているインヘリットを同期する\r\n     * @param logicMngNode ロジック管理ノード\r\n     */\r\n    export const syncLogicName = (logicMngNode: TreeUtil.ElementNode, prevName: string, newName: string) => {\r\n\r\n        const runRec = (logic: LogicUtil.NodeLogicItem) => {\r\n            const inhMng = logic.mngs.find(mng => mng.type === 'inherit-mng');\r\n            if (inhMng == undefined) return;\r\n            (inhMng.data as LogicUtil.NodeConnectManager).inherits.forEach(inh => {\r\n                const conn = inh.data as LogicUtil.NodeInheritConnector;\r\n                if (conn.method === 'create') {\r\n                    runRec(conn.mngs[2].data);\r\n                } else {\r\n                    if (conn.depend === prevName) {\r\n                        conn.depend = newName;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        logicMngNode.children.forEach(logic => {\r\n            runRec((logic.data as LogicUtil.WrapElement).data);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * フィールド名の変更に伴い、式で参照している変数を同期する\r\n     * @param logicNode ロジックノード\r\n     */\r\n    export const syncFieldName = (logicNode: TreeUtil.ElementNode, prevName: string, newName: string) => {\r\n\r\n        const syncFormula = (list: LogicUtil.WrapElement[]) => {\r\n            list.forEach(wrap => {\r\n                const values = (wrap.data as LogicUtil.NodeParamItem).values;\r\n                values.forEach(varItem => {\r\n                    if (varItem.type === 'field' && varItem.value === prevName) {\r\n                        varItem.value = newName;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        const logic = (logicNode.data as LogicUtil.WrapElement).data as LogicUtil.NodeLogicItem;\r\n        const visualMng = logic.mngs.find(mng => mng.type === 'visual-mng');\r\n        if (visualMng != undefined) {\r\n            syncFormula((visualMng.data as LogicUtil.NodeParamManager).params);\r\n        }\r\n        const behaviorMng = logic.mngs.find(mng => mng.type === 'behavior-mng');\r\n        if (behaviorMng != undefined) {\r\n            syncFormula((behaviorMng.data as LogicUtil.NodeParamManager).params);\r\n        }\r\n        const inhMng = logic.mngs.find(mng => mng.type === 'inherit-mng');\r\n        if (inhMng != undefined) {\r\n            (inhMng.data as LogicUtil.NodeConnectManager).inherits.forEach(inh => {\r\n                const mngs = (inh.data as LogicUtil.NodeInheritConnector).mngs;\r\n                syncFormula((mngs[0].data as LogicUtil.NodeParamManager).params);\r\n                syncFormula((mngs[1].data as LogicUtil.NodeParamManager).params);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 引数名の変更に伴い、式で参照している変数を同期する\r\n     * @param logicNode ロジックノード\r\n     */\r\n    export const syncArgumentName = (logicNode: TreeUtil.ElementNode, prevName: string, newName: string) => {\r\n\r\n        const syncFormula = (list: LogicUtil.WrapElement[]) => {\r\n            list.forEach(wrap => {\r\n                const values = (wrap.data as LogicUtil.NodeParamItem).values;\r\n                values.forEach(varItem => {\r\n                    if (varItem.type === 'argument' && varItem.value === prevName) {\r\n                        varItem.value = newName;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        const wrap = logicNode.data as LogicUtil.WrapElement;\r\n        const logicItem = wrap.data as LogicUtil.NodeLogicItem;\r\n        const fieldMng = logicItem.mngs.find(mng => mng.type === 'field-mng');\r\n        if (fieldMng != undefined) {\r\n            syncFormula((fieldMng.data as LogicUtil.NodeFieldManager).fields);\r\n        }\r\n        const visualMng = logicItem.mngs.find(mng => mng.type === 'visual-mng');\r\n        if (visualMng != undefined) {\r\n            syncFormula((visualMng.data as LogicUtil.NodeParamManager).params);\r\n        }\r\n        const behaviorMng = logicItem.mngs.find(mng => mng.type === 'behavior-mng');\r\n        if (behaviorMng != undefined) {\r\n            syncFormula((behaviorMng.data as LogicUtil.NodeParamManager).params);\r\n        }\r\n        const inhMng = logicItem.mngs.find(mng => mng.type === 'inherit-mng');\r\n        if (inhMng != undefined) {\r\n            (inhMng.data as LogicUtil.NodeConnectManager).inherits.forEach(inh => {\r\n                const mngs = (inh.data as LogicUtil.NodeInheritConnector).mngs;\r\n                syncFormula((mngs[0].data as LogicUtil.NodeParamManager).params);\r\n                syncFormula((mngs[1].data as LogicUtil.NodeParamManager).params);\r\n            });\r\n        }\r\n\r\n        const syncParamName = (params: LogicUtil.WrapElement[]) => {\r\n            params.forEach(wrap => {\r\n                const item = wrap.data as LogicUtil.NodeParamItem;\r\n                if (item.name === prevName) {\r\n                    item.name = newName;\r\n                }\r\n            });\r\n        }\r\n        if (wrap.type === 'logic-item') {\r\n\r\n            const runRec = (logic: LogicUtil.NodeLogicItem) => {\r\n                const inhMng = logic.mngs.find(mng => mng.type === 'inherit-mng');\r\n                if (inhMng == undefined) return;\r\n                (inhMng.data as LogicUtil.NodeConnectManager).inherits.forEach(inh => {\r\n                    const conn = inh.data as LogicUtil.NodeInheritConnector;\r\n                    if (conn.method === 'create') {\r\n                        runRec(conn.mngs[2].data);\r\n                    } else if (conn.method === 'depend' && conn.depend === logicItem.name) {\r\n                        const sendMng = conn.mngs[1].data as LogicUtil.NodeParamManager;\r\n                        syncParamName(sendMng.params);\r\n                    }\r\n                });\r\n            }\r\n            const logicMngNode = logicNode.parent as TreeUtil.ElementNode;\r\n            logicMngNode.children.forEach(logic => {\r\n                runRec((logic.data as LogicUtil.WrapElement).data);\r\n            });\r\n        } else if (wrap.type === 'inherit-logic') {\r\n            const conn = (logicNode.parent?.data as LogicUtil.WrapElement).data as LogicUtil.NodeInheritConnector;\r\n            const sendMng = conn.mngs[1].data as LogicUtil.NodeParamManager;\r\n            syncParamName(sendMng.params);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 引数の変更に伴い、参照先のSend管理に処理（callback）を行う\r\n     * @param logicNode ロジックノード\r\n     * @param callback 処理\r\n     */\r\n    const syncArgumentCallback = (\r\n        logicNode: TreeUtil.ElementNode,\r\n        callback: (sendNode: TreeUtil.ElementNode) => void\r\n    ) => {\r\n\r\n        const wrap = logicNode.data as LogicUtil.WrapElement;\r\n        const logicItem = wrap.data as LogicUtil.NodeLogicItem;\r\n\r\n        if (wrap.type === 'logic-item') {\r\n            const runRec = (logicNode: TreeUtil.ElementNode) => {\r\n                const inhMngNode = logicNode.children.find(child => (child.data as LogicUtil.WrapElement).type === 'inherit-mng');\r\n                if (inhMngNode == undefined) return;\r\n                inhMngNode.children.forEach(child => {\r\n                    const conn = (child.data as LogicUtil.WrapElement).data as LogicUtil.NodeInheritConnector;\r\n                    if (conn.method === 'create') {\r\n                        runRec(child.children[2]);\r\n                    } else if (conn.method === 'depend' && conn.depend === logicItem.name) {\r\n                        callback(child.children[1]);\r\n                    }\r\n                });\r\n            }\r\n            const logicMngNode = logicNode.parent as TreeUtil.ElementNode;\r\n            logicMngNode.children.forEach(child => {\r\n                runRec(child);\r\n            });\r\n        } else if (wrap.type === 'inherit-logic') {\r\n            const sendNode = logicNode.parent?.children[1] as TreeUtil.ElementNode;\r\n            callback(sendNode);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 引数の追加に伴い、Send管理を同期する\r\n     * @param logicNode ロジックノード\r\n     */\r\n    export const syncArgumentAdd = (logicNode: TreeUtil.ElementNode, newArgName: string) => {\r\n        const addNewParam = (sendNode: TreeUtil.ElementNode) => {\r\n            const paramWrap = LogicElementUtil.createParamWrap('send-item',\r\n                { name: newArgName, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] }\r\n            );\r\n            const sendMng = (sendNode.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager;\r\n            sendMng.params.push(paramWrap);\r\n            sendNode.children.push(TreeUtil.createNode(paramWrap, sendNode));\r\n        }\r\n        syncArgumentCallback(logicNode, addNewParam);\r\n    }\r\n\r\n    /**\r\n     * 引数の削除に伴い、Send管理を同期する\r\n     * @param logicNode ロジックノード\r\n     */\r\n    export const syncArgumentDel = (logicNode: TreeUtil.ElementNode, delArgName: string) => {\r\n        const delArgParam = (sendNode: TreeUtil.ElementNode) => {\r\n            const sendMng = (sendNode.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager;\r\n            let delIndex = -1;\r\n            sendMng.params.some((param, i) => {\r\n                if((param.data as LogicUtil.NodeParamItem).name == delArgName) {\r\n                    delIndex = i;\r\n                    return 1;\r\n                }\r\n            });\r\n            sendMng.params.splice(delIndex, 1);\r\n            sendNode.children.splice(delIndex, 1);\r\n        }\r\n        syncArgumentCallback(logicNode, delArgParam);\r\n    }\r\n}\r\n\r\nexport default LogicElementUtil;","import { useContext } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorArgumentMng = () => {\r\n    const {node, setFocusNode} = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Add Argument',\r\n                        callback: () => {\r\n                            const newWrap: LogicUtil.WrapElement = {\r\n                                type: 'argument-item',\r\n                                data: null\r\n                            };\r\n                            const newNode = LogicElementUtil.addChild(newWrap, node);\r\n                            setFocusNode(newNode);\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorArgumentMng;","import { useContext, useEffect } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nnamespace ModifyOperations {\r\n\r\n    export type Props = {\r\n        mappingForm: () => void;\r\n        checkableFields: FormUtil.CheckableValue[];\r\n        isInputOK?: boolean;\r\n        firstRegist: () => void;\r\n        modifyRegist: () => void;\r\n    }\r\n\r\n    export const Component = (props: Props) => {\r\n        const { node, isModify, setModify, removeSelf } = useContext(FactoryTreeContext);\r\n\r\n        const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n        const isComplete = FormUtil.isCompleteCheck(props.checkableFields);\r\n\r\n        return (<>\r\n            <FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Cancel',\r\n                        isEnable: isModify,\r\n                        callback: () => {\r\n                            if (wrap.data == null) {\r\n                                removeSelf();\r\n                            } else {\r\n                                props.mappingForm();\r\n                            }\r\n                            setModify(false);\r\n                        }\r\n                    },\r\n                    {\r\n                        label: !isModify ? 'Modify' : 'Regist',\r\n                        isEnable: !isModify || (props.isInputOK ?? isComplete),\r\n                        callback: () => {\r\n                            if (!isModify) {\r\n                                setModify(true);\r\n                            } else {\r\n                                if (wrap.data == null) {\r\n                                    props.firstRegist();\r\n                                } else {\r\n                                    props.modifyRegist();\r\n                                }\r\n                                setModify(false);\r\n                            }\r\n                        }\r\n                    }\r\n                ]}\r\n            />\r\n        </>);\r\n    }\r\n}\r\n\r\nexport default ModifyOperations;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport Styles from \"../../../../../base/design/styles\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport PreviewUtil from \"../../../preview/previewUtil\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ParamUtil from \"../../util/paramUtil\";\r\nimport ModifyOperations from \"../common/modifyOperations\";\r\n\r\ntype FormProps = {\r\n    inputType: FormUtil.CheckableValue;\r\n    value: FormUtil.CheckableValue;\r\n};\r\n\r\nenum Level {\r\n    FIELD = 0,\r\n    INITIAL,\r\n    CONNECT_EXTEND,\r\n    CONNECT_SEND\r\n}\r\n\r\nconst EditorParamItem = () => {\r\n    const { removeSelf, node, invalidate, setModify, isModify } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    /** 名前 */\r\n    const [name, setName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    /** 式 */\r\n    const [formulaItems, setFormulaItems] = useState<string[]>([]);\r\n    /** 変数の入力フォーム */\r\n    const [varFormList, setVarFormList] = useState<FormProps[]>([]);\r\n    // const [formJsxList, setFaormJsxList] = useState<JSX.Element[]>([]);\r\n\r\n    const isField = wrap.type === 'field-item';\r\n    const isCondition = wrap.type === 'condition-item';\r\n\r\n    const mappingForm = () => {\r\n        const param = wrap.data as LogicUtil.NodeParamItem;\r\n        setName({ value: param.name, errors: [] });\r\n        setFormulaItems(param.formulaItems.slice());\r\n        setVarFormList(param.values.map(v => {\r\n            return {\r\n                inputType: { value: v.type, errors: [] },\r\n                value: { value: v.value, errors: [] }\r\n            }\r\n        }));\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (wrap.data == null) {\r\n            setModify(true);\r\n        } else {\r\n            mappingForm();\r\n        }\r\n    }, [node]);\r\n\r\n    const level: Level = useMemo(() => {\r\n        const parentType = (node.parent?.data as LogicUtil.WrapElement).type;\r\n        switch (parentType) {\r\n            case 'field-mng': return Level.FIELD;\r\n            case 'visual-mng':\r\n            case 'behavior-mng': return Level.INITIAL;\r\n            case 'extend-mng': return Level.CONNECT_EXTEND;\r\n            case 'send-mng': return Level.CONNECT_SEND;\r\n        }\r\n        return -1;\r\n    }, [node]);\r\n\r\n    const [argumentList, fieldKeyList] = useMemo(() => {\r\n        let argumentList: string[] = [];\r\n        const fieldKeys: string[] = [];\r\n        const parentType = (node.parent?.data as LogicUtil.WrapElement).type;\r\n        if (level >= Level.CONNECT_EXTEND) {\r\n            fieldKeys.push(ParamUtil.BehaviorParamType.POS_X);\r\n            fieldKeys.push(ParamUtil.BehaviorParamType.POS_Y);\r\n            fieldKeys.push(ParamUtil.BehaviorParamType.VEC_X);\r\n            fieldKeys.push(ParamUtil.BehaviorParamType.VEC_Y);\r\n            fieldKeys.push(ParamUtil.BehaviorParamType.VEC_RAD);\r\n            fieldKeys.push(ParamUtil.BehaviorParamType.VEC_LEN);\r\n            // fieldKeys.push(ParamUtil.VisualParamType.RADIUS);\r\n            // fieldKeys.push(ParamUtil.VisualParamType.COLOR_R);\r\n            // fieldKeys.push(ParamUtil.VisualParamType.COLOR_G);\r\n            // fieldKeys.push(ParamUtil.VisualParamType.COLOR_B);\r\n            // fieldKeys.push(ParamUtil.VisualParamType.COLOR_A);\r\n            if (level === Level.CONNECT_SEND) {\r\n                const extendElement = (node.parent?.parent?.children[0].data as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager;\r\n                //Extendにloop_countのパラメータがある場合\r\n                if (extendElement.params.find(\r\n                    param => (param.data as LogicUtil.NodeParamItem).name === ParamUtil.ExtendParamType.LOOP_COUNT\r\n                ) != undefined) {\r\n                    fieldKeys.push(ParamUtil.ExtendParamType.LOOP_COUNT);\r\n                    fieldKeys.push(ParamUtil.ExtendParamType.LOOP_ITERATE);\r\n                }\r\n            }\r\n        }\r\n        const targetTypes: LogicUtil.NodeType[] = ['field-mng', 'behavior-mng', 'visual-mng', 'send-mng', 'extend-mng'];\r\n        if (targetTypes.includes(parentType)) {\r\n            const getLogicNode = () => {\r\n                switch (parentType) {\r\n                    case 'field-mng':\r\n                    case 'visual-mng':\r\n                    case 'behavior-mng': return node.parent?.parent;\r\n                    case 'send-mng':\r\n                    case 'extend-mng': return node?.parent?.parent?.parent?.parent;\r\n                }\r\n            };\r\n            const logicItem = (getLogicNode()?.data as LogicUtil.WrapElement).data as LogicUtil.NodeLogicItem;\r\n            // 引数リストを追加\r\n            const argMng = logicItem.mngs.find(mng => mng.type === 'argument-mng');\r\n            if (argMng != undefined) {\r\n                argumentList = (argMng.data as LogicUtil.NodeArgumentManager).\r\n                    args.map(arg => (arg.data as LogicUtil.NodeArgumentItem).name);\r\n            }\r\n            // 変数リストを追加\r\n            const filedMng = logicItem.mngs.find(mng => mng.type === 'field-mng');\r\n            if (level >= Level.INITIAL && filedMng != undefined) {\r\n                (filedMng.data as LogicUtil.NodeFieldManager).fields.forEach(field => {\r\n                    const fieldName = (field.data as LogicUtil.NodeParamItem).name;\r\n                    fieldKeys.push(fieldName);\r\n                });\r\n            }\r\n        }\r\n        return [argumentList, fieldKeys];\r\n    }, [node]);\r\n    \r\n    /** 既存のパラメータ名を取得（重複チェックに使用） */\r\n    const paramNameList = useMemo(() => {\r\n        const owner = (node.parent?.parent?.data as LogicUtil.WrapElement).data;\r\n        return LogicElementUtil.getParamNameList(owner);\r\n    }, [node]);\r\n\r\n    // /** 引数リスト */\r\n    // const argumentList = useMemo(() => {\r\n    //     const parentType = (node.parent?.data as FactoryUtil.WrapElement).type;\r\n    //     const getTargetWrap = () => {\r\n    //         switch (parentType) {\r\n    //             case 'field-mng':\r\n    //             case 'visual-mng':\r\n    //             case 'behavior-mng': {\r\n    //                 return node.parent?.children[0].data as FactoryUtil.WrapElement;\r\n    //             }\r\n    //             case 'extend-mng':\r\n    //             case 'send-mng': {\r\n    //                 return node.parent?.parent?.parent?.parent?.children[0].data as FactoryUtil.WrapElement;\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     const targetWrap = getTargetWrap();\r\n    //     if (targetWrap == undefined || targetWrap.type !== 'argument-mng') return [];\r\n\r\n    //     // console.log((targetWrap.data as FactoryUtil.NodeArgumentManager).args);\r\n    //     return (targetWrap.data as FactoryUtil.NodeArgumentManager).args.map(arg => {\r\n    //         const item = arg.data as FactoryUtil.NodeArgumentItem;\r\n    //         return item.name;\r\n    //     });\r\n    // }, [node]);\r\n\r\n    useEffect(() => {\r\n        let num = 0;\r\n        formulaItems.forEach((item) => {\r\n            if (item === 'var') num++;\r\n        });\r\n\r\n        if (varFormList.length < num) {\r\n            const addNum = num - varFormList.length;\r\n            for (let i = 0; i < addNum; i++) varFormList.push({\r\n                inputType: { value: 'direct', errors: [] },\r\n                value: { value: '', errors: [] }\r\n            });\r\n            setVarFormList(varFormList.slice());\r\n        } else if (varFormList.length > num) {\r\n            const delNum = varFormList.length - num;\r\n            for (let i = 0; i < delNum; i++) varFormList.splice(varFormList.length - delNum, delNum);\r\n            setVarFormList(varFormList.slice());\r\n        }\r\n    }, [formulaItems]);\r\n\r\n    /** 「(」の数-「)」の数 */\r\n    const parenthesisBalance = useMemo(() => {\r\n        let num = 0;\r\n        formulaItems.forEach((item) => {\r\n            if (['(', 'rand(', 'integer('].includes(item)) num++;\r\n            else if (item === ')') num--;\r\n        });\r\n        return num;\r\n    }, [formulaItems]);\r\n\r\n    /** 値の入力フォームのJSX */\r\n    const formJsxList = useMemo(() => {\r\n        return varFormList.map((v, i) => {\r\n\r\n            const getValueForm = (): JSX.Element => {\r\n                const type = v.inputType.value as LogicUtil.ParamInputType;\r\n                if (type === 'direct') {\r\n                    return (\r\n                        <FormUtil.TextField\r\n                            marginLeft={2}\r\n                            checkable={v.value}\r\n                            isNumber\r\n                            isReadOnly={!isModify}\r\n                            width={178}\r\n                            setCheckable={(checkable) => {\r\n                                varFormList[i].value = checkable;\r\n                                setVarFormList(varFormList.slice());\r\n                            }}\r\n                        />\r\n                    );\r\n                } else {\r\n                    let list: string[] = [];\r\n                    if (type === 'argument') {\r\n                        list = argumentList;\r\n                    } else if (type === 'field') {\r\n                        list = fieldKeyList;\r\n                    } else if (type === 'self') {\r\n                        list = ParamUtil.SelfParams;\r\n                    } else if (type === 'constant') {\r\n                        list = PreviewUtil.ConstantValueMap.map(item => item.name);\r\n                    }\r\n                    return (\r\n                        <FormUtil.Combobox\r\n                            marginLeft={2}\r\n                            checkable={v.value}\r\n                            width={178}\r\n                            isReadOnly={!isModify}\r\n                            setCheckable={(checkable) => {\r\n                                varFormList[i].value = checkable;\r\n                                setVarFormList(varFormList.slice());\r\n                            }}\r\n                            list={list.map(item => {\r\n                                return { value: item, labelText: item };\r\n                            })}\r\n                            headBlank\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n            return <FormUtil.FormRecord\r\n                key={i}\r\n                titleLabel={`var_${i}`}\r\n                labelWidth={90}\r\n                marginTop={i === 0 ? 4 : 0}\r\n                jsx={<>\r\n                    <FormUtil.Combobox\r\n                        checkable={v.inputType}\r\n                        width={142}\r\n                        isReadOnly={!isModify}\r\n                        setCheckable={(checkable) => {\r\n                            varFormList[i].inputType = checkable;\r\n                            if (isModify) {\r\n                                varFormList[i].value.value = checkable.value === 'direct' ? '0' : '';\r\n                            }\r\n                            setVarFormList(varFormList.slice());\r\n                        }}\r\n                        list={LogicUtil.ParamInputTypes.filter(item => {\r\n                            switch (item) {\r\n                                case 'direct':\r\n                                case 'constant':\r\n                                case 'argument': return true;\r\n                                case 'field': return level >= Level.INITIAL;\r\n                                case 'self': return level >= Level.CONNECT_EXTEND;\r\n                            }\r\n                        }).map(item => {\r\n                            return { value: item, labelText: item };\r\n                        })}\r\n                    />\r\n                    {getValueForm()}\r\n                </>}\r\n            />;\r\n        });\r\n    }, [varFormList, isModify]);\r\n\r\n    const getFormulaJsx = () => {\r\n        let num = 0;\r\n        const jsxList: JSX.Element[] = [];\r\n        formulaItems.forEach((item) => {\r\n            if (jsxList.length > 0) {\r\n                jsxList.push(<span key={jsxList.length}>&nbsp;</span>);\r\n            }\r\n            if (item === 'var') {\r\n                jsxList.push(<_Var key={jsxList.length}>{`$\\{var_${num}}`}</_Var>);\r\n                num++;\r\n            } else {\r\n                jsxList.push(<_Sig key={jsxList.length}>{item}</_Sig>);\r\n            }\r\n        });\r\n        return jsxList;\r\n    }\r\n\r\n    const isLastVar = () => formulaItems.length > 0 && ['var', ')'].includes(formulaItems[formulaItems.length - 1]);\r\n    const isFormulaOK = parenthesisBalance === 0 && varFormList.length > 0 &&\r\n        ['var', ')'].includes(formulaItems[formulaItems.length - 1]);\r\n    const hasFormError = !isFormulaOK || varFormList.find(varForm => varForm.value.errors.length > 0) != undefined;\r\n\r\n\r\n    const getFormulaItem = (label: string, width: number, isEnable: boolean, value: string) => {\r\n        return {\r\n            label, width, isEnable,\r\n            callback: () => {\r\n                formulaItems.push(value);\r\n                setFormulaItems(formulaItems.slice());\r\n            }\r\n        };\r\n    }\r\n\r\n    return (<>\r\n        <ModifyOperations.Component\r\n            mappingForm={mappingForm}\r\n            checkableFields={[]}\r\n            firstRegist={() => {\r\n                const param: LogicUtil.NodeParamItem = {\r\n                    name: name.value,\r\n                    formulaItems: formulaItems.slice(),\r\n                    values: varFormList.map(varForm => {\r\n                        return {\r\n                            type: varForm.inputType.value as LogicUtil.ParamInputType,\r\n                            value: varForm.value.value\r\n                        }\r\n                    })\r\n                };\r\n                param.name = name.value;\r\n                wrap.data = param;\r\n            }}\r\n            isInputOK={parenthesisBalance === 0 && !hasFormError && name.errors.length === 0}\r\n            modifyRegist={() => {\r\n                const data = wrap.data as LogicUtil.NodeParamItem;\r\n                data.formulaItems = formulaItems.slice();\r\n                data.values = varFormList.map(varForm => {\r\n                    return {\r\n                        type: varForm.inputType.value as LogicUtil.ParamInputType,\r\n                        value: varForm.value.value\r\n                    }\r\n                });\r\n                if(isField) {\r\n                    const prevName = data.name;\r\n                    data.name = name.value;\r\n                    if(prevName !== name.value) {\r\n                        LogicElementUtil.syncFieldName(node.parent?.parent as TreeUtil.ElementNode, prevName, name.value);\r\n                    }\r\n                }\r\n            }}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"param\"\r\n            innerJsx={<>\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Name\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={200}\r\n                            isReadOnly={!isModify || !isField}\r\n                            checkable={name}\r\n                            setCheckable={setName}\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkStringLength(value, 1, 16),\r\n                                    errorType: \"length\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => LogicUtil.checkFieldName(value),\r\n                                    errorType: \"value\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => {\r\n                                        const list = paramNameList.filter(name => {\r\n                                            // 自分自身のパラメータ名を除外\r\n                                            if (wrap.data != null) {\r\n                                                return (wrap.data as LogicUtil.NodeParamItem).name !== name;\r\n                                            }\r\n                                            return true;\r\n                                        });\r\n                                        return !list.includes(value);\r\n                                    },\r\n                                    errorType: \"relation\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        getFormulaItem('+', 50, isModify && isLastVar(), '+'),\r\n                        getFormulaItem('-', 50, isModify && isLastVar(), '-'),\r\n                        getFormulaItem('*', 50, isModify && isLastVar(), '*'),\r\n                        getFormulaItem('/', 50, isModify && isLastVar(), '/'),\r\n                        getFormulaItem('%', 50, isModify && isLastVar(), '%'),\r\n                        getFormulaItem('(', 35, isModify && !isLastVar(), '('),\r\n                        getFormulaItem(')', 35, isModify && isLastVar() && parenthesisBalance > 0, ')'),\r\n                        {\r\n                            label: 'del',\r\n                            width: 60,\r\n                            isEnable: isModify && formulaItems.length > 0,\r\n                            callback: () => {\r\n                                formulaItems.splice(formulaItems.length - 1, 1);\r\n                                setFormulaItems(formulaItems.slice());\r\n                            }\r\n                        },\r\n                    ]}\r\n                />\r\n                {!isCondition ? <></> : (\r\n                    <FormUtil.ButtonRecord\r\n                        isCenter\r\n                        buttons={[\r\n                            getFormulaItem('<', 50, isModify && isLastVar(), '<'),\r\n                            getFormulaItem('<=', 50, isModify && isLastVar(), '<='),\r\n                            getFormulaItem('=', 50, isModify && isLastVar(), '='),\r\n                            getFormulaItem('>=', 50, isModify && isLastVar(), '>='),\r\n                            getFormulaItem('>', 50, isModify && isLastVar(), '>'),\r\n                            getFormulaItem('&&', 50, isModify && isLastVar(), '&&'),\r\n                            getFormulaItem('||', 50, isModify && isLastVar(), '||'),\r\n                        ]}\r\n                    />\r\n                )}\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'var',\r\n                            width: 70,\r\n                            isEnable: isModify && !isLastVar(),\r\n                            callback: () => {\r\n                                formulaItems.push('var');\r\n                                setFormulaItems(formulaItems.slice());\r\n                            }\r\n                        },\r\n                        {\r\n                            label: 'rand',\r\n                            width: 80,\r\n                            isEnable: isModify && !isLastVar(),\r\n                            callback: () => {\r\n                                formulaItems.push('rand(');\r\n                                setFormulaItems(formulaItems.slice());\r\n                            }\r\n                        },\r\n                        {\r\n                            label: 'integer',\r\n                            width: 80,\r\n                            isEnable: isModify && !isLastVar(),\r\n                            callback: () => {\r\n                                formulaItems.push('integer(');\r\n                                setFormulaItems(formulaItems.slice());\r\n                            }\r\n                        },\r\n                        {\r\n                            label: 'clear',\r\n                            isEnable: isModify && formulaItems.length > 0,\r\n                            width: 90,\r\n                            callback: () => {\r\n                                setFormulaItems([]);\r\n                            }\r\n                        },\r\n                    ]}\r\n                />\r\n                <_Formula\r\n                    isInvalid={!isFormulaOK}\r\n                >{getFormulaJsx()}</_Formula>\r\n                {formJsxList}\r\n            </>}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            isEnable={!isModify && isField}\r\n            innerJsx={<>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Delete',\r\n                            isEnable: !isModify,\r\n                            callback: () => {\r\n                                removeSelf();\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                {/* 並び順入れ替えボタン */}\r\n                {!isField ? <></> : LogicUtil.getSwapButtons(node, invalidate)}\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorParamItem;\r\n\r\nconst _Formula = styled.div<{\r\n    isInvalid: boolean;\r\n}>`\r\n    display: inline-block;\r\n    width: calc(100% - 12px);\r\n    ${Styles.CSS_LABEL_MIDIUM}\r\n    overflow-wrap: break-word;\r\n    height: 100px;//calc(100% - 4px);\r\n    color: #585858;\r\n    border: solid 1px #7a7a7abf;\r\n    box-sizing: border-box;\r\n    background-color: #ffffff8b;\r\n    ${props => !props.isInvalid ? '' : css`\r\n        background-color: #ffe8628a;\r\n    `}\r\n    border-radius: 4px;\r\n    text-align: left;\r\n    padding: 0 0 0 4px;\r\n    vertical-align: top;\r\n    margin: 5px 0 0 6px;\r\n`;\r\nconst _Var = styled.span`\r\n    color: #e70013;\r\n`;\r\nconst _Sig = styled.span`\r\n    color: #3333339d;\r\n`;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ModifyOperations from \"../common/modifyOperations\";\r\n\r\nconst EditorArgumentItem = () => {\r\n    const { node, removeSelf, setModify, isModify, invalidate } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    const [name, setName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [argType, setArgType] = useState<FormUtil.CheckableValue>({ value: 'number', errors: [] });\r\n\r\n    /** 既存のパラメータ名を取得（重複チェックに使用） */\r\n    const reservedList = useMemo(() => {\r\n        const owner = (node.parent?.parent?.data as LogicUtil.WrapElement).data;\r\n        return LogicElementUtil.getParamNameList(owner);\r\n    }, [node]);\r\n\r\n    const mappingForm = () => {\r\n        const param = wrap.data as LogicUtil.NodeArgumentItem;\r\n        setName({ ...name, value: param.name });\r\n        setArgType({ ...argType, value: param.valueType });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (wrap.data == null) {\r\n            setModify(true);\r\n        } else {\r\n            mappingForm();\r\n        }\r\n    }, [node]);\r\n\r\n    return (<>\r\n        <ModifyOperations.Component\r\n            mappingForm={mappingForm}\r\n            checkableFields={[name, argType]}\r\n            firstRegist={() => {\r\n                const param: LogicUtil.NodeArgumentItem = {\r\n                    name: name.value,\r\n                    valueType: argType.value as LogicUtil.ArgumentType\r\n                };\r\n                param.name = name.value;\r\n                wrap.data = param;\r\n                LogicElementUtil.syncArgumentAdd(node.parent?.parent as TreeUtil.ElementNode, name.value);\r\n            }}\r\n            modifyRegist={() => {\r\n                const param = wrap.data as LogicUtil.NodeArgumentItem;\r\n                const prevName = param.name;\r\n                param.name = name.value;\r\n                param.valueType = argType.value as LogicUtil.ArgumentType;\r\n                wrap.data = param;\r\n\r\n                if (prevName !== name.value) {\r\n                    LogicElementUtil.syncArgumentName(node.parent?.parent as TreeUtil.ElementNode, prevName, name.value);\r\n                }\r\n            }}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"param\"\r\n            innerJsx={<>\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Name\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={200}\r\n                            isReadOnly={!isModify}\r\n                            checkable={name}\r\n                            setCheckable={setName}\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkStringLength(value, 1, 16),\r\n                                    errorType: \"length\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => LogicUtil.checkFieldName(value),\r\n                                    errorType: \"value\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => {\r\n                                        const list = reservedList.filter(name => {\r\n                                            // 自分自身のパラメータ名を除外\r\n                                            if (wrap.data != null) {\r\n                                                return (wrap.data as LogicUtil.NodeArgumentItem).name !== name;\r\n                                            }\r\n                                            return true;\r\n                                        });\r\n                                        return !list.includes(value);\r\n                                    },\r\n                                    errorType: \"relation\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Type\"\r\n                    jsx={\r\n                        <FormUtil.Combobox\r\n                            checkable={argType}\r\n                            setCheckable={setArgType}\r\n                            list={LogicUtil.ArgTypes.map(type => {\r\n                                return { value: type, labelText: type, isDisabled: type === 'color' }\r\n                            })}\r\n                            headBlank\r\n                            width={200}\r\n                            isReadOnly={!isModify}\r\n                            validates={\r\n                                [\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkRequired(value),\r\n                                        errorType: \"required\"\r\n                                    }\r\n                                ]\r\n                            }\r\n                        />\r\n                    }\r\n                />\r\n            </>}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Delete',\r\n                            isEnable: !isModify,\r\n                            callback: () => {\r\n                                LogicElementUtil.syncArgumentDel(node.parent?.parent as TreeUtil.ElementNode, name.value);\r\n                                removeSelf();\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                {/* 並び順入れ替えボタン */}\r\n                {LogicUtil.getSwapButtons(node, invalidate)}\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorArgumentItem;","import { useContext } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorSeedMng = () => {\r\n    const {node, setFocusNode} = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Add Seed',\r\n                        callback: () => {\r\n                            const itemWrap: LogicUtil.WrapElement = {\r\n                                type: 'seed-item',\r\n                                data: null\r\n                            };\r\n                            (wrap.data as LogicUtil.NodeSeedManager).defs.push(itemWrap);\r\n                            const newNode = TreeUtil.createNode(itemWrap, node);\r\n                            node.children.push(newNode);\r\n                            setFocusNode(newNode);\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorSeedMng;","import { useContext } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorLogicMng = () => {\r\n    const {node, setFocusNode} = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Add Logic',\r\n                        callback: () => {\r\n                            const newWrap: LogicUtil.WrapElement = {\r\n                                type: 'logic-item',\r\n                                data: null\r\n                            };\r\n                            const newNode = LogicElementUtil.addChild(newWrap, node);\r\n                            setFocusNode(newNode);\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorLogicMng;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ModifyOperations from \"../common/modifyOperations\";\r\nimport LogicTemplateDialog from \"../../dialog/logicTemplateDialog\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\n\r\nconst EditorLogicItem = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n    const { removeSelf, node, setFocusNode, invalidate, setModify, isModify } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    const [name, setName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n\r\n    const [isConnect, hasArgNode, hasFieldNode, hasConnectNode] = useMemo(() => {\r\n        const list = node.children.map(el => {\r\n            return (el.data as LogicUtil.WrapElement).type;\r\n        });\r\n        const parentType = (node.parent?.data as LogicUtil.WrapElement).type;\r\n        return [\r\n            parentType === 'connector',\r\n            list.includes('argument-mng'),\r\n            list.includes('field-mng'),\r\n            list.includes('inherit-mng'),\r\n        ];\r\n    }, [node]);\r\n\r\n    const mappingForm = () => {\r\n        if (!isConnect) {\r\n            const param = wrap.data as LogicUtil.NodeLogicItem;\r\n            setName({ ...name, value: param.name });\r\n        }\r\n    };\r\n\r\n    /** 既存のロジック名を取得（重複チェックに使用） */\r\n    const logicNameList = useMemo(() => {\r\n        if (wrap.type === 'inherit-logic') return [];\r\n        const mng = (node.parent?.data as LogicUtil.WrapElement).data;\r\n        return LogicElementUtil.getLogicNameList(mng);\r\n    }, [node]);\r\n\r\n    useEffect(() => {\r\n        if (wrap.data == null) {\r\n            setModify(true);\r\n        } else {\r\n            mappingForm();\r\n        }\r\n    }, [node, isConnect]);\r\n\r\n    /**\r\n     * 追加要素の表示非表示を切り替える\r\n     */\r\n    const toggleElement = (hasNode: boolean, listPos: number, wrapElement: LogicUtil.WrapElement) => {\r\n        if (hasNode) {\r\n            LogicElementUtil.removeChild(node, listPos, 1);\r\n            setFocusNode({ ...node });\r\n            invalidate();\r\n        } else {\r\n            LogicElementUtil.insertChild(wrapElement, node, listPos);\r\n            setFocusNode({ ...node });\r\n            invalidate();\r\n        }\r\n    };\r\n\r\n    return (<>\r\n        {isConnect ? <></> : (<>\r\n            <ModifyOperations.Component\r\n                mappingForm={mappingForm}\r\n                checkableFields={[name]}\r\n                firstRegist={() => {\r\n                    const element: LogicUtil.NodeLogicItem = {\r\n                        name: name.value,\r\n                        mngs: LogicElementUtil.getDefaultLogicMngs()\r\n                    };\r\n                    element.name = name.value;\r\n                    wrap.data = element;\r\n\r\n                    element.mngs.forEach(mng => {\r\n                        const newNode = TreeUtil.createNode(mng, node);\r\n                        const data = (newNode.data as LogicUtil.WrapElement).data;\r\n                        (data as LogicUtil.NodeParamManager).params.forEach(param => {\r\n                            newNode.children.push(TreeUtil.createNode(param, newNode));\r\n                        });\r\n                        node.children.push(newNode);\r\n                    });\r\n                    invalidate();\r\n                    // store.system.dialog = <LogicTemplateDialog.Component\r\n                    //     mngs={element.mngs}\r\n                    //     callback={() => {\r\n                    //         element.mngs.forEach(mng => {\r\n                    //             const newNode = TreeUtil.createNode(mng, node);\r\n                    //             const data = (newNode.data as LogicUtil.WrapElement).data;\r\n                    //             (data as LogicUtil.NodeParamManager).params.forEach(param => {\r\n                    //                 newNode.children.push(TreeUtil.createNode(param, newNode));\r\n                    //             });\r\n                    //             node.children.push(newNode);\r\n                    //         });\r\n                    //         invalidate();\r\n                    //     }} />;\r\n                    setStore({ ...store });\r\n                }}\r\n                modifyRegist={() => {\r\n                    const param = wrap.data as LogicUtil.NodeLogicItem;\r\n                    const prevName = param.name;\r\n                    param.name = name.value;\r\n                    wrap.data = param;\r\n                    // 名前が変わった場合、参照箇所も修正する\r\n                    if(prevName !== param.name) {\r\n                        LogicElementUtil.syncLogicName(node.parent as TreeUtil.ElementNode, prevName, param.name);\r\n                    }\r\n                }}\r\n            />\r\n            <FormUtil.BorderPanel\r\n                title=\"param\"\r\n                innerJsx={<>\r\n                    <FormUtil.FormRecord\r\n                        titleLabel=\"Name\"\r\n                        jsx={\r\n                            <FormUtil.TextField\r\n                                width={200}\r\n                                isReadOnly={!isModify}\r\n                                checkable={name}\r\n                                setCheckable={setName}\r\n                                validates={[\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkRequired(value),\r\n                                        errorType: \"required\"\r\n                                    },\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkStringLength(value, 1, 16),\r\n                                        errorType: \"length\"\r\n                                    },\r\n                                    {\r\n                                        checker: (value) => LogicUtil.checkFieldName(value),\r\n                                        errorType: \"value\"\r\n                                    },\r\n                                    {\r\n                                        checker: (value) => {\r\n                                            const list = logicNameList.filter(name => {\r\n                                                // 自分自身のロジック名を除外\r\n                                                if (wrap.data != null) {\r\n                                                    return (wrap.data as LogicUtil.NodeLogicItem).name !== name;\r\n                                                }\r\n                                                return true;\r\n                                            });\r\n                                            return !list.includes(value);\r\n                                        },\r\n                                        errorType: \"relation\"\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        }\r\n                    />\r\n                </>}\r\n            />\r\n        </>)}\r\n        <FormUtil.BorderPanel\r\n            title=\"element\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={<FormUtil.Switch\r\n                        label={'Argument'}\r\n                        width={300}\r\n                        isUse={hasArgNode}\r\n                        callback={() => {\r\n                            let listPos = 0;\r\n                            toggleElement(\r\n                                hasArgNode,\r\n                                listPos,\r\n                                {\r\n                                    type: 'argument-mng',\r\n                                    data: {\r\n                                        args: []\r\n                                    } as LogicUtil.NodeArgumentManager\r\n                                }\r\n                            );\r\n                        }}\r\n                    />}\r\n                />\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    isEnable={true}\r\n                    jsx={<FormUtil.Switch\r\n                        label={'Field'}\r\n                        width={300}\r\n                        isUse={hasFieldNode}\r\n                        callback={() => {\r\n                            let listPos = 0;\r\n                            if (hasArgNode) listPos++;\r\n                            toggleElement(\r\n                                hasFieldNode,\r\n                                listPos,\r\n                                {\r\n                                    type: 'field-mng',\r\n                                    data: {\r\n                                        fields: []\r\n                                    } as LogicUtil.NodeFieldManager\r\n                                }\r\n                            );\r\n                        }}\r\n                    />}\r\n                />\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Inherit'}\r\n                            width={300}\r\n                            isUse={hasConnectNode}\r\n                            callback={() => {\r\n                                let listPos = 2;\r\n                                if (hasArgNode) listPos++;\r\n                                if (hasFieldNode) listPos++;\r\n                                toggleElement(\r\n                                    hasConnectNode,\r\n                                    listPos,\r\n                                    {\r\n                                        type: 'inherit-mng',\r\n                                        data: {\r\n                                            inherits: []\r\n                                        } as LogicUtil.NodeConnectManager\r\n                                    }\r\n                                );\r\n                            }}\r\n                        />\r\n                    }\r\n                />\r\n            </>}\r\n        />\r\n        {isConnect ? <></> : (\r\n            <FormUtil.BorderPanel\r\n                title=\"operation\"\r\n                isEnable={!isModify}\r\n                innerJsx={<>\r\n                    <FormUtil.ButtonRecord\r\n                        isCenter\r\n                        buttons={[\r\n                            {\r\n                                label: 'Delete',\r\n                                callback: () => {\r\n                                    removeSelf();\r\n                                }\r\n                            }\r\n                        ]}\r\n                    />\r\n                    {/* 並び順入れ替えボタン */}\r\n                    {LogicUtil.getSwapButtons(node, invalidate)}\r\n                </>}\r\n            />\r\n        )}\r\n    </>);\r\n}\r\n\r\nexport default EditorLogicItem;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ParamUtil from \"../../util/paramUtil\";\r\n\r\nconst EditorBehiviorMng = () => {\r\n    const { node, setFocusNode, invalidate, setModify, isModify } = useContext(FactoryTreeContext);\r\n    const mng = (node.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager;\r\n\r\n    const [isVector, hasDecayParam, hasGravityParam] = useMemo(() => {\r\n        const list = node.children.map(el => {\r\n            return ((el.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamItem).name;\r\n        });\r\n        return [\r\n            list.includes(ParamUtil.BehaviorParamType.VEC_X),\r\n            list.includes(ParamUtil.ModulateParamType.DECAY_RATE),\r\n            list.includes(ParamUtil.ModulateParamType.GRAVITY_VAL)\r\n        ]\r\n    }, [node]);\r\n\r\n    const exchangeElements = (flag: boolean, listPos: number,\r\n        trueParamElements: LogicUtil.NodeParamItem[],\r\n        falseParamElements: LogicUtil.NodeParamItem[]\r\n    ) => {\r\n        const size = (flag ? trueParamElements : falseParamElements).length;\r\n        LogicElementUtil.removeChild(node, listPos, size);\r\n\r\n        (flag ? trueParamElements : falseParamElements).forEach((data, i) => {\r\n            const wrap: LogicUtil.WrapElement = {\r\n                type: 'param-item',\r\n                data\r\n            };\r\n            LogicElementUtil.insertChild(wrap, node, listPos + i);\r\n        });\r\n        setFocusNode({ ...node });\r\n        invalidate();\r\n    };\r\n\r\n    const exchangeVectorMethod = () => {\r\n        exchangeElements(!isVector, 3,\r\n            [\r\n                { name: ParamUtil.BehaviorParamType.VEC_X, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] },\r\n                { name: ParamUtil.BehaviorParamType.VEC_Y, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] },\r\n            ],\r\n            [\r\n                { name: ParamUtil.BehaviorParamType.VEC_RAD, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] },\r\n                { name: ParamUtil.BehaviorParamType.VEC_LEN, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] },\r\n            ]\r\n        )\r\n    }\r\n\r\n    /**\r\n     * 追加要素の表示非表示を切り替える\r\n     */\r\n    const toggleElements = (hasNode: boolean, listPos: number, paramElements: LogicUtil.NodeParamItem[]) => {\r\n        const size = paramElements.length;\r\n        if (hasNode) {\r\n            mng.params.splice(listPos, size);\r\n            node.children.splice(listPos, size);\r\n            setFocusNode({ ...node });\r\n            invalidate();\r\n        } else {\r\n            paramElements.forEach((data, i) => {\r\n                const wrap: LogicUtil.WrapElement = {\r\n                    type: 'param-item',\r\n                    data\r\n                };\r\n                mng.params.splice(listPos + i, 0, wrap);\r\n                const newNode = TreeUtil.createNode(wrap, node);\r\n                node.children.splice(listPos + i, 0, newNode);\r\n            });\r\n            setFocusNode({ ...node });\r\n            invalidate();\r\n        }\r\n    };\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"method\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Vector method'}\r\n                            width={300}\r\n                            isRelation\r\n                            isUse={isVector}\r\n                            callback={exchangeVectorMethod}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Direction method'}\r\n                            width={300}\r\n                            isRelation\r\n                            isUse={!isVector}\r\n                            callback={exchangeVectorMethod}\r\n                        />\r\n                    }\r\n                />\r\n            </>}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"modulate\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Decay'}\r\n                            width={300}\r\n                            isUse={hasDecayParam}\r\n                            callback={() => {\r\n                                toggleElements(hasDecayParam, 5, [\r\n                                    {\r\n                                        name: ParamUtil.ModulateParamType.DECAY_RATE,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '0.9' }]\r\n                                    },\r\n                                    {\r\n                                        name: ParamUtil.ModulateParamType.DECAY_LIMIT,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '1' }]\r\n                                    },\r\n                                ]);\r\n                            }}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Gravity'}\r\n                            width={300}\r\n                            isUse={hasGravityParam}\r\n                            callback={() => {\r\n                                toggleElements(hasGravityParam, !hasDecayParam ? 5 : 7, [\r\n                                    {\r\n                                        name: ParamUtil.ModulateParamType.GRAVITY_VAL,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '0.2' }]\r\n                                    },\r\n                                    {\r\n                                        name: ParamUtil.ModulateParamType.GRAVITY_LIMIT,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '10' }]\r\n                                    },\r\n                                ]);\r\n                            }}\r\n                        />\r\n                    }\r\n                />\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorBehiviorMng;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ParamUtil from \"../../util/paramUtil\";\r\nimport ModifyOperations from \"../common/modifyOperations\";\r\n\r\ntype Medhod = 'blank' | 'particle' | 'snake'\r\n\r\nconst EditorVisualMng = () => {\r\n    const { node, setFocusNode, invalidate, setModify, isModify } = useContext(FactoryTreeContext);\r\n    const mng = (node.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager;\r\n\r\n    const [drawMethod, hasDisappearParam, hasShrinkParam] = useMemo(() => {\r\n        const list = node.children.map(el => {\r\n            return ((el.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamItem).name;\r\n        });\r\n        let drawMethod: Medhod = 'blank';\r\n        if(list.length > 0) {\r\n            drawMethod = list.includes(ParamUtil.VisualParamType.THICKNESS) ? 'snake' : 'particle';\r\n        }\r\n        return [\r\n            drawMethod,\r\n            list.includes(ParamUtil.EffectParamType.DISAPPEAR_START),\r\n            list.includes(ParamUtil.EffectParamType.SHRINK_START)\r\n        ]\r\n    }, [node]);\r\n\r\n    /**\r\n     * 追加要素の表示非表示を切り替える\r\n     */\r\n    const toggleElements = (hasNode: boolean, listPos: number, paramElements: LogicUtil.NodeParamItem[]) => {\r\n        const size = paramElements.length;\r\n        if (hasNode) {\r\n            LogicElementUtil.removeChild(node, listPos, size);\r\n            setFocusNode({ ...node });\r\n            invalidate();\r\n        } else {\r\n            paramElements.forEach((data, i) => {\r\n                const wrap: LogicUtil.WrapElement = {\r\n                    type: 'param-item',\r\n                    data\r\n                };\r\n                LogicElementUtil.insertChild(wrap, node, listPos + i);\r\n            });\r\n            setFocusNode({ ...node });\r\n            invalidate();\r\n        }\r\n    };\r\n\r\n    const addElements = (paramElements: LogicUtil.NodeParamItem[]) => {\r\n        const size = paramElements.length;\r\n        paramElements.forEach((data, i) => {\r\n            const wrap: LogicUtil.WrapElement = {\r\n                type: 'param-item',\r\n                data\r\n            };\r\n            LogicElementUtil.insertChild(wrap, node, i);\r\n        });\r\n        setFocusNode({ ...node });\r\n        invalidate();\r\n    };\r\n    const removeElements = (elementNameList: string[]) => {\r\n        const mng = (node.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamManager;\r\n        elementNameList.forEach((name) => {\r\n            mng.params.forEach((param, i) => {\r\n                if((param.data as LogicUtil.NodeParamItem).name === name) {\r\n                    LogicElementUtil.removeChild(node, i, 1);\r\n                }\r\n            });\r\n        });\r\n        setFocusNode({ ...node });\r\n        invalidate();\r\n    };\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"method\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'None'}\r\n                            width={300}\r\n                            isRelation\r\n                            isUse={drawMethod === 'blank'}\r\n                            callback={() => {\r\n                                mng.params.length = 0;\r\n                                node.children.length = 0;\r\n                                setFocusNode({ ...node });\r\n                                invalidate();\r\n                            }}\r\n                        />\r\n                    }\r\n                />\r\n                {/* <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Snake Method'}\r\n                            width={300}\r\n                            isRelation\r\n                            isUse={drawMethod === 'snake'}\r\n                            callback={() => {\r\n                                removeElements([\r\n                                    ParamUtil.VisualParamType.RADIUS\r\n                                ]);\r\n                                addElements([\r\n                                    {\r\n                                        name: ParamUtil.VisualParamType.THICKNESS,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '10' }]\r\n                                    },\r\n                                    {\r\n                                        name: ParamUtil.VisualParamType.COLOR_R,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\r\n                                    },\r\n                                    {\r\n                                        name: ParamUtil.VisualParamType.COLOR_G,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\r\n                                    },\r\n                                    {\r\n                                        name: ParamUtil.VisualParamType.COLOR_B,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\r\n                                    },\r\n                                    {\r\n                                        name: ParamUtil.VisualParamType.COLOR_A,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\r\n                                    },\r\n                                ]);\r\n                            }}\r\n                        />\r\n                    }\r\n                /> */}\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Particle Method'}\r\n                            width={300}\r\n                            isRelation\r\n                            isUse={drawMethod === 'particle'}\r\n                            callback={() => {\r\n                                addElements([\r\n                                    {\r\n                                        name: ParamUtil.VisualParamType.RADIUS,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '20' }]\r\n                                    },\r\n                                    {\r\n                                        name: ParamUtil.VisualParamType.COLOR_R,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\r\n                                    },\r\n                                    {\r\n                                        name: ParamUtil.VisualParamType.COLOR_G,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\r\n                                    },\r\n                                    {\r\n                                        name: ParamUtil.VisualParamType.COLOR_B,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\r\n                                    },\r\n                                    {\r\n                                        name: ParamUtil.VisualParamType.COLOR_A,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '255' }]\r\n                                    },\r\n                                ]);\r\n                            }}\r\n                        />\r\n                    }\r\n                />\r\n            </>}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"effect\"\r\n            isEnable={!isModify && drawMethod !== 'blank'}\r\n            innerJsx={<>\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Disappear'}\r\n                            width={300}\r\n                            isUse={hasDisappearParam}\r\n                            callback={() => {\r\n                                toggleElements(hasDisappearParam, 5, [\r\n                                    {\r\n                                        name: ParamUtil.EffectParamType.DISAPPEAR_START,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '0' }]\r\n                                    },\r\n                                ]);\r\n                            }}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Shrink'}\r\n                            width={300}\r\n                            isUse={hasShrinkParam}\r\n                            callback={() => {\r\n                                toggleElements(hasShrinkParam, !hasDisappearParam ? 5 : 6, [\r\n                                    {\r\n                                        name: ParamUtil.EffectParamType.SHRINK_START,\r\n                                        formulaItems: ['var'], values: [{ type: \"direct\", value: '0' }]\r\n                                    },\r\n                                ]);\r\n                            }}\r\n                        />\r\n                    }\r\n                />\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorVisualMng;","import { useContext } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorInheritConnMng = () => {\r\n    const { node, setFocusNode, invalidate } = useContext(FactoryTreeContext);\r\n    const mng = (node.data as LogicUtil.WrapElement).data as LogicUtil.NodeConnectManager;\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Add Inherit',\r\n                        callback: () => {\r\n                            const wrap: LogicUtil.WrapElement = {\r\n                                type: 'connector',\r\n                                data: null\r\n                            }\r\n                            mng.inherits.push(wrap);\r\n                            const newNode = TreeUtil.createNode(wrap, node);\r\n                            node.children.push(newNode);\r\n                            setFocusNode(newNode);\r\n                            invalidate();\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorInheritConnMng;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport ConfirmDialog from \"../../../../dialog/confirmDialog\";\r\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ModifyOperations from \"../common/modifyOperations\";\r\n\r\nconst EditorInheritConnector = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n    const { rootData, node, invalidate, setModify, isModify, removeSelf } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    // const [condition, setCondition] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [identify, setIdentify] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [method, setMethod] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [depend, setDepend] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n\r\n    const mappingForm = () => {\r\n        const param = wrap.data as LogicUtil.NodeInheritConnector;\r\n        setMethod({ ...method, value: param.method });\r\n        setDepend({ ...depend, value: param.depend });\r\n        setIdentify({ ...identify, value: param.id });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (wrap.data == null) {\r\n            setModify(true);\r\n            // 派生識別名（自動命名）の初期値を取得\r\n            const defaultName = LogicElementUtil.getNumberingOnPrefixName('id_', node.parent as TreeUtil.ElementNode);\r\n            setIdentify({ ...identify, value: defaultName });\r\n        } else {\r\n            mappingForm();\r\n        }\r\n    }, [node]);\r\n\r\n    const isCreate = method.value === 'create';\r\n\r\n    /** 引用するロジックリスト */\r\n    const logicList = useMemo((): string[] => {\r\n        const rootNode = rootData.data as LogicUtil.NodeRoot;\r\n        const inheritMng = rootNode.logicMng.data as LogicUtil.NodeLogicManager;\r\n        return inheritMng.defs.map(wrap => {\r\n            return (wrap.data as LogicUtil.NodeLogicItem).name;\r\n        });\r\n    }, [node]);\r\n    \r\n    /** 同階層の既存のインヘリットIDを取得（重複チェックに使用） */\r\n    const idList = useMemo(() => {\r\n        const mng = (node.parent?.data as LogicUtil.WrapElement).data;\r\n        return LogicElementUtil.getInheritIdList(mng);\r\n    }, [node]);\r\n\r\n    // const getSendParamList = (): string[] => {\r\n    //     if (!isCreate) {\r\n    //         const rootNode = rootData.data as LogicUtil.NodeRoot;\r\n    //         const inheritMng = rootNode.logicMng.data as LogicUtil.NodeLogicManager;\r\n    //         const dependItem = inheritMng.defs.find(wrap => {\r\n    //             return (wrap.data as LogicUtil.NodeLogicItem).name === depend.value;\r\n    //         });\r\n    //         if (dependItem != undefined) {\r\n    //             const argWrap = (dependItem.data as LogicUtil.NodeLogicItem).mngs[0];\r\n    //             if (argWrap.type === 'argument-mng') {\r\n    //                 return (argWrap.data as LogicUtil.NodeArgumentManager).args.map(arg => {\r\n    //                     return (arg.data as LogicUtil.NodeArgumentItem).name;\r\n    //                 });\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     return [];\r\n    // }\r\n\r\n    // const setSendParams = (param: LogicUtil.NodeInheritConnector) => {\r\n\r\n    //     const sendIndex = param.mngs[0].type === 'send-mng' ? 0 : 1;\r\n    //     const sendMng = param.mngs[sendIndex].data as LogicUtil.NodeParamManager;\r\n    //     const sendNode = node.children[sendIndex];\r\n    //     sendMng.params = [];\r\n    //     sendNode.children = [];\r\n    //     getSendParamList().forEach(param => {\r\n    //         const paramWrap = LogicElementUtil.createParamWrap('send-item',\r\n    //             { name: param, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] }\r\n    //         );\r\n    //         sendMng.params.push(paramWrap);\r\n    //         sendNode.children.push(TreeUtil.createNode(paramWrap, sendNode));\r\n    //     });\r\n    // }\r\n\r\n    const initConnectorNode = (param: LogicUtil.NodeInheritConnector) => {\r\n        param.mngs = [];\r\n        node.children = [];\r\n        param.mngs.push({\r\n            type: 'extend-mng',\r\n            data: {\r\n                params: []\r\n            } as LogicUtil.NodeParamManager\r\n        });\r\n        param.mngs.push({\r\n            type: 'send-mng',\r\n            data: {\r\n                params: []\r\n            } as LogicUtil.NodeParamManager\r\n        });\r\n        if (isCreate) {\r\n            param.mngs.push({\r\n                type: 'inherit-logic',\r\n                data: {\r\n                    mngs: LogicElementUtil.getDefaultLogicMngs()\r\n                } as LogicUtil.NodeInheritItem\r\n            });\r\n        }\r\n        wrap.data = param;\r\n\r\n        param.mngs.forEach(mng => {\r\n            const newNode = TreeUtil.createNode(mng, node);\r\n            const data = (newNode.data as LogicUtil.WrapElement);\r\n            switch (data.type) {\r\n                case 'inherit-logic': {\r\n                    (data.data as LogicUtil.NodeInheritItem).mngs.forEach(mng => {\r\n                        const inheritNode = TreeUtil.createNode(mng, newNode);\r\n                        newNode.children.push(inheritNode);\r\n\r\n                        switch (mng.type) {\r\n                            case 'visual-mng': {\r\n                                (mng.data as LogicUtil.NodeParamManager).params.forEach(param => {\r\n                                    inheritNode.children.push(TreeUtil.createNode(param, inheritNode));\r\n                                });\r\n                            } break;\r\n                            case 'behavior-mng': {\r\n                                (mng.data as LogicUtil.NodeParamManager).params.forEach(param => {\r\n                                    inheritNode.children.push(TreeUtil.createNode(param, inheritNode));\r\n                                });\r\n                            } break;\r\n                        }\r\n                    });\r\n                } break;\r\n                case 'send-mng': {\r\n                    console.log('initSendParams');\r\n                    LogicElementUtil.initSendParams(newNode, rootData);\r\n                } break;\r\n            }\r\n            node.children.push(newNode);\r\n        });\r\n        // setSendParams(param);\r\n\r\n    }\r\n\r\n    const isDisable = wrap.data == null ? false : (wrap.data as LogicUtil.NodeInheritConnector).disable ?? false;\r\n\r\n    return (<>\r\n        <ModifyOperations.Component\r\n            mappingForm={mappingForm}\r\n            checkableFields={[identify, method, depend]}\r\n            firstRegist={() => {\r\n                const param: LogicUtil.NodeInheritConnector = {\r\n                    method: method.value as LogicUtil.InheritMethod,\r\n                    depend: depend.value,\r\n                    id: identify.value,\r\n                    mngs: []\r\n                };\r\n                initConnectorNode(param);\r\n                invalidate();\r\n            }}\r\n            modifyRegist={() => {\r\n                const param = wrap.data as LogicUtil.NodeInheritConnector;\r\n                const isChange = param.method !== method.value || param.depend !== depend.value;\r\n                param.method = method.value as LogicUtil.InheritMethod;\r\n                param.depend = depend.value;\r\n                param.id = identify.value;\r\n                wrap.data = param;\r\n\r\n                if (isChange) {\r\n                    initConnectorNode(param);\r\n                }\r\n                invalidate();\r\n            }}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"param\"\r\n            innerJsx={<>\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Method\"\r\n                    jsx={\r\n                        <FormUtil.Combobox\r\n                            marginLeft={2}\r\n                            checkable={method}\r\n                            width={178}\r\n                            isReadOnly={!isModify}\r\n                            setCheckable={(checkable) => {\r\n                                // createが選択されたらdependを空にする\r\n                                if (checkable.value === 'create') {\r\n                                    setDepend({ ...depend, value: '' });\r\n                                }\r\n                                setMethod(checkable);\r\n                            }}\r\n                            list={LogicUtil.ConnectTypes.map(item => {\r\n                                return { value: item, labelText: item };\r\n                            })}\r\n                            headBlank\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Depend\"\r\n                    isEnable={method.value === 'depend'}\r\n                    jsx={\r\n                        <FormUtil.Combobox\r\n                            marginLeft={2}\r\n                            checkable={depend}\r\n                            width={270}\r\n                            isReadOnly={!isModify}\r\n                            setCheckable={setDepend}\r\n                            list={logicList.map(item => {\r\n                                return { value: item, labelText: item };\r\n                            })}\r\n                            headBlank\r\n                            dependency={[method]}\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => {\r\n                                        return method.value !== 'depend' || ValidateUtil.checkRequired(value);\r\n                                    },\r\n                                    errorType: \"required\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Identify\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            marginLeft={2}\r\n                            checkable={identify}\r\n                            width={270}\r\n                            isReadOnly={!isModify}\r\n                            setCheckable={setIdentify}\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => LogicUtil.checkFieldName(value),\r\n                                    errorType: \"value\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkStringLength(value, 0, 20),\r\n                                    errorType: \"length\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => {\r\n                                        const list = idList.filter(id => {\r\n                                            // 自分自身のidを除外\r\n                                            if (wrap.data != null) {\r\n                                                return (wrap.data as LogicUtil.NodeInheritConnector).id !== id;\r\n                                            }\r\n                                            return true;\r\n                                        });\r\n                                        return !list.includes(value);\r\n                                    },\r\n                                    errorType: \"relation\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n            </>}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<>\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={<FormUtil.Switch\r\n                        label={'Disable'}\r\n                        width={300}\r\n                        isUse={isDisable}\r\n                        isEnable={!isModify}\r\n                        callback={() => {\r\n                            const data = (wrap.data as LogicUtil.NodeInheritConnector);\r\n                            if (isDisable) {\r\n                                data.disable = undefined;\r\n                            } else {\r\n                                data.disable = true;\r\n                            }\r\n                            invalidate();\r\n                        }}\r\n                    />}\r\n                />\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Clone include',\r\n                            isEnable: !isModify && !isCreate,\r\n                            callback: () => {\r\n                                store.system.dialog = <ConfirmDialog.Component\r\n                                    message=\"Create a clone from the depended inherit logic.\"\r\n                                    buttons={[\r\n                                        {\r\n                                            label: 'Cancel',\r\n                                            callback: () => {\r\n                                                store.system.dialog = null;\r\n                                                setStore({ ...store });\r\n                                            }\r\n                                        },\r\n                                        {\r\n                                            label: 'Conversion',\r\n                                            callback: () => {\r\n                                                const logicMng = (rootData.data as LogicUtil.NodeRoot).logicMng.data as LogicUtil.NodeLogicManager;\r\n                                                const logicList = logicMng.defs.map(def => def.data as LogicUtil.NodeLogicItem);\r\n                                                // ディペンドしているロジックを取得\r\n                                                const dependLogic = logicList.find(inherit => inherit.name === depend.value);\r\n                                                if (dependLogic != undefined) {\r\n                                                    const cloneLogic = JSON.parse(JSON.stringify(dependLogic)) as LogicUtil.NodeLogicItem;\r\n                                                    const connectItem: LogicUtil.NodeInheritItem = {\r\n                                                        mngs: cloneLogic.mngs\r\n                                                    };\r\n                                                    const newWrap: LogicUtil.WrapElement = {\r\n                                                        type: 'inherit-logic',\r\n                                                        data: connectItem\r\n                                                    };\r\n                                                    const newNode = LogicElementUtil.addChild(newWrap, node);\r\n                                                    // 子要素の展開\r\n                                                    newNode.children = LogicUtil.getChildrenElementNode(newNode);\r\n\r\n                                                    const param = wrap.data as LogicUtil.NodeInheritConnector;\r\n                                                    param.method = 'create';\r\n                                                    param.depend = '';\r\n                                                    mappingForm();\r\n                                                }\r\n                                                store.system.dialog = null;\r\n                                                setStore({ ...store });\r\n                                                invalidate();\r\n                                            }\r\n                                        }\r\n                                    ]}\r\n                                />;\r\n                                setStore({ ...store });\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Clone detach',\r\n                            isEnable: !isModify && isCreate,\r\n                            callback: () => {\r\n                                store.system.dialog = <ConfirmDialog.Component\r\n                                    message=\"Detach a clone from the this inherit logic.\"\r\n                                    buttons={[\r\n                                        {\r\n                                            label: 'Cancel',\r\n                                            callback: () => {\r\n                                                store.system.dialog = null;\r\n                                                setStore({ ...store });\r\n                                            }\r\n                                        },\r\n                                        {\r\n                                            label: 'Conversion',\r\n                                            callback: () => {\r\n                                                let rootNode = node;\r\n                                                while (rootNode.parent != null) rootNode = rootNode.parent;\r\n                                                const inheritNode = node.children.find(el => (el.data as LogicUtil.WrapElement).type === 'inherit-logic');\r\n                                                const logicMngNode = rootNode.children.find(el => (el.data as LogicUtil.WrapElement).type === 'logic-mng');\r\n                                                if (logicMngNode == undefined || inheritNode == undefined) return;\r\n                                                const inherit = (inheritNode.data as LogicUtil.WrapElement).data;\r\n                                                const clone = JSON.parse(JSON.stringify((inherit))) as LogicUtil.NodeInheritItem;\r\n                                                // ロジック名（自動命名）を取得\r\n                                                const defaultName = LogicElementUtil.getNumberingOnPrefixName('clone_inherit_', logicMngNode);\r\n                                                const logicItem: LogicUtil.NodeLogicItem = {\r\n                                                    ...clone,\r\n                                                    name: defaultName\r\n                                                };\r\n                                                const newWrap: LogicUtil.WrapElement = {\r\n                                                    type: 'logic-item',\r\n                                                    data: logicItem\r\n                                                };\r\n\r\n                                                // ロジックマネージャに追加\r\n                                                const newNode = LogicElementUtil.addChild(newWrap, logicMngNode);\r\n                                                // 子要素の展開\r\n                                                newNode.children = LogicUtil.getChildrenElementNode(newNode);\r\n\r\n                                                // 自身（コネクタ）からインヘリット要素を削除\r\n                                                LogicElementUtil.removeChild(node, 2, 1);\r\n\r\n                                                const param = wrap.data as LogicUtil.NodeInheritConnector;\r\n                                                param.method = 'depend';\r\n                                                param.depend = logicItem.name;\r\n                                                mappingForm();\r\n\r\n                                                store.system.dialog = null;\r\n                                                setStore({ ...store });\r\n                                                invalidate();\r\n                                            }\r\n                                        }\r\n                                    ]}\r\n                                />;\r\n                                setStore({ ...store });\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Delete',\r\n                            isEnable: !isModify,\r\n                            callback: () => {\r\n                                removeSelf();\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                {/* 並び順入れ替えボタン */}\r\n                {LogicUtil.getSwapButtons(node, invalidate)}\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorInheritConnector;","import styled from \"styled-components\";\r\nimport { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport { GlobalContext } from \"../../../entry/systemEntry\";\r\nimport FormUtil from \"../../../../utils/form/formUtiil\";\r\nimport LogicUtil from \"../util/logicUtil\";\r\nimport ParamUtil from \"../util/paramUtil\";\r\nimport ValidateUtil from \"../../../../utils/form/validateUtil\";\r\nimport TreeUtil from \"../../../../utils/treeUtil\";\r\nimport LogicElementUtil from \"../util/logicElementUtil\";\r\n\r\nnamespace SendTemplateDialog {\r\n\r\n    const FRAME_WIDTH = 450;\r\n    const FRAME_HEIGHT = 160;\r\n    const COMPONENT_WIDTH = 296;\r\n\r\n    export const ConnectParentPosition = (props: {\r\n        node: TreeUtil.ElementNode;\r\n        invalidate: () => void;\r\n    }) => {\r\n\r\n        const { store, setStore } = useContext(GlobalContext);\r\n\r\n        const [xName, setXName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n        const [yName, setYName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n\r\n        const message = 'Please, input property name!';\r\n\r\n        /** 既存のパラメータ名を取得（重複チェックに使用） */\r\n        const paramNameList = useMemo(() => {\r\n            const owner = (props.node.parent?.children[2].data as LogicUtil.WrapElement).data;\r\n            return LogicElementUtil.getParamNameList(owner);\r\n        }, [props.node]);\r\n\r\n        const buttons: FormUtil.ButtonProps[] = [\r\n            {\r\n                label: 'Cancel',\r\n                callback: () => {\r\n                    store.system.dialog = null;\r\n                    setStore({ ...store });\r\n                }\r\n            },\r\n            {\r\n                label: 'Execute',\r\n                isEnable: FormUtil.checkItems([xName, yName]),\r\n                callback: () => {\r\n                    // Sendにパラメータを追加\r\n                    LogicElementUtil.addChild(LogicElementUtil.createParamWrap('send-item',\r\n                        { name: xName.value, formulaItems: ['var'], values: [{ type: 'self', value: ParamUtil.SelfParamType.POS_X }] }\r\n                    ), props.node);\r\n                    LogicElementUtil.addChild(LogicElementUtil.createParamWrap('send-item',\r\n                        { name: yName.value, formulaItems: ['var'], values: [{ type: 'self', value: ParamUtil.SelfParamType.POS_Y }] }\r\n                    ), props.node);\r\n\r\n                    // 派生ロジックに引数を追加\r\n                    const logicNode = props.node.parent?.children[2] as TreeUtil.ElementNode;\r\n                    const hasArgNode = logicNode.children.find(child => (child.data as LogicUtil.WrapElement).type === 'argument-mng') != undefined;\r\n                    if (!hasArgNode) {\r\n                        LogicElementUtil.insertChild({\r\n                            type: 'argument-mng',\r\n                            data: {\r\n                                args: []\r\n                            } as LogicUtil.NodeArgumentManager\r\n                        }, logicNode, 0);\r\n                    }\r\n                    const argNode = logicNode.children.find(child => (child.data as LogicUtil.WrapElement).type === 'argument-mng') as TreeUtil.ElementNode;\r\n\r\n                    LogicElementUtil.addChild({\r\n                        type: 'argument-item',\r\n                        data: {\r\n                            name: xName.value,\r\n                            valueType: 'number'\r\n                        } as LogicUtil.NodeArgumentItem\r\n                    }, argNode);\r\n                    LogicElementUtil.addChild({\r\n                        type: 'argument-item',\r\n                        data: {\r\n                            name: yName.value,\r\n                            valueType: 'number'\r\n                        } as LogicUtil.NodeArgumentItem\r\n                    }, argNode);\r\n\r\n                    // 派生ロジックの座標に引数を設定\r\n                    const behaviorNode = logicNode.children.find(child => (child.data as LogicUtil.WrapElement).type === 'behavior-mng') as TreeUtil.ElementNode;\r\n                    const setParamValue = (prpName: string, argName: string) => {\r\n                        const params = behaviorNode.children.map(child => (child.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamItem);\r\n                        const targetParam = params.find(param => param.name === prpName) as LogicUtil.NodeParamItem;\r\n                        targetParam.formulaItems = ['var'];\r\n                        targetParam.values = [{ type: 'argument', value: argName }];\r\n                    }\r\n                    setParamValue(ParamUtil.BehaviorParamType.POS_X, xName.value);\r\n                    setParamValue(ParamUtil.BehaviorParamType.POS_Y, yName.value);\r\n\r\n                    store.system.dialog = null;\r\n                    setStore({ ...store });\r\n                    props.invalidate();\r\n                }\r\n            }\r\n        ]\r\n\r\n        return (\r\n            <_Frame width={FRAME_WIDTH} height={FRAME_HEIGHT}>\r\n                <_Inner>\r\n                    <FormUtil.Message\r\n                        message={message}\r\n                        isCenter\r\n                    />\r\n                    <FormUtil.FormRecord\r\n                        titleLabel=\"self_pos_x\"\r\n                        jsx={\r\n                            <FormUtil.TextField\r\n                                marginLeft={2}\r\n                                checkable={xName}\r\n                                width={COMPONENT_WIDTH}\r\n                                setCheckable={setXName}\r\n                                validates={[\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkRequired(value),\r\n                                        errorType: \"required\"\r\n                                    },\r\n                                    {\r\n                                        checker: (value) => LogicUtil.checkFieldName(value),\r\n                                        errorType: \"value\"\r\n                                    },\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkStringLength(value, 0, 20),\r\n                                        errorType: \"length\"\r\n                                    },\r\n                                    {\r\n                                        checker: (value) => {\r\n                                            const list = paramNameList.slice();\r\n                                            if(yName.value !== '') list.push(yName.value);\r\n                                            return !list.includes(value);\r\n                                        },\r\n                                        errorType: \"relation\"\r\n                                    }\r\n                                ]}\r\n                                dependency={[yName]}\r\n                            />\r\n                        }\r\n                    />\r\n                    <FormUtil.FormRecord\r\n                        titleLabel=\"self_pos_y\"\r\n                        jsx={\r\n                            <FormUtil.TextField\r\n                                marginLeft={2}\r\n                                checkable={yName}\r\n                                width={COMPONENT_WIDTH}\r\n                                setCheckable={setYName}\r\n                                validates={[\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkRequired(value),\r\n                                        errorType: \"required\"\r\n                                    },\r\n                                    {\r\n                                        checker: (value) => LogicUtil.checkFieldName(value),\r\n                                        errorType: \"value\"\r\n                                    },\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkStringLength(value, 0, 20),\r\n                                        errorType: \"length\"\r\n                                    },\r\n                                    {\r\n                                        checker: (value) => {\r\n                                            const list = paramNameList.slice();\r\n                                            if(xName.value !== '') list.push(xName.value);\r\n                                            return !list.includes(value);\r\n                                        },\r\n                                        errorType: \"relation\"\r\n                                    }\r\n                                ]}\r\n                                dependency={[xName]}\r\n                            />\r\n                        }\r\n                    />\r\n                </_Inner>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={buttons}\r\n                />\r\n            </_Frame>\r\n        );\r\n    }\r\n\r\n    export const SetParentPosition = (props: {\r\n        node: TreeUtil.ElementNode;\r\n        invalidate: () => void;\r\n    }) => {\r\n\r\n        const { store, setStore } = useContext(GlobalContext);\r\n\r\n        const [xName, setXName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n        const [yName, setYName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n\r\n        const message = 'Please, select property name!';\r\n\r\n        const list = useMemo(() => {\r\n            return props.node.children.map(child => {\r\n                const wrap = child.data as LogicUtil.WrapElement;\r\n                return (wrap.data as LogicUtil.NodeParamItem).name;\r\n            });\r\n        }, []);\r\n\r\n        const buttons: FormUtil.ButtonProps[] = [\r\n            {\r\n                label: 'Cancel',\r\n                callback: () => {\r\n                    store.system.dialog = null;\r\n                    setStore({ ...store });\r\n                }\r\n            },\r\n            {\r\n                label: 'Execute',\r\n                isEnable: FormUtil.checkItems([xName, yName]),\r\n                callback: () => {\r\n                    const paramList = props.node.children.map(child => (child.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamItem);\r\n                    const xParam = paramList.find(param => param.name === xName.value) as LogicUtil.NodeParamItem;\r\n                    const yParam = paramList.find(param => param.name === yName.value) as LogicUtil.NodeParamItem;\r\n                    xParam.formulaItems = ['var'];\r\n                    xParam.values = [{ type: 'self', value: ParamUtil.SelfParamType.POS_X }];\r\n                    yParam.formulaItems = ['var'];\r\n                    yParam.values = [{ type: 'self', value: ParamUtil.SelfParamType.POS_Y }];\r\n\r\n                    store.system.dialog = null;\r\n                    setStore({ ...store });\r\n                    props.invalidate();\r\n                }\r\n            }\r\n        ]\r\n\r\n        return (\r\n            <_Frame width={FRAME_WIDTH} height={FRAME_HEIGHT}>\r\n                <_Inner>\r\n                    <FormUtil.Message\r\n                        message={message}\r\n                        isCenter\r\n                    />\r\n                    <FormUtil.FormRecord\r\n                        titleLabel=\"self_pos_x\"\r\n                        jsx={\r\n                            <FormUtil.Combobox\r\n                                marginLeft={2}\r\n                                checkable={xName}\r\n                                width={COMPONENT_WIDTH}\r\n                                setCheckable={setXName}\r\n                                validates={[\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkRequired(value),\r\n                                        errorType: \"required\"\r\n                                    }\r\n                                ]}\r\n                                headBlank\r\n                                list={list.filter(item => item !== yName.value).map(item => ({\r\n                                    value: item, labelText: item\r\n                                }))}\r\n                            />\r\n                        }\r\n                    />\r\n                    <FormUtil.FormRecord\r\n                        titleLabel=\"self_pos_y\"\r\n                        jsx={\r\n                            <FormUtil.Combobox\r\n                                marginLeft={2}\r\n                                checkable={yName}\r\n                                width={COMPONENT_WIDTH}\r\n                                setCheckable={setYName}\r\n                                validates={[\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkRequired(value),\r\n                                        errorType: \"required\"\r\n                                    }\r\n                                ]}\r\n                                headBlank\r\n                                list={list.filter(item => item !== xName.value).map(item => ({\r\n                                    value: item, labelText: item\r\n                                }))}\r\n                            />\r\n                        }\r\n                    />\r\n                </_Inner>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={buttons}\r\n                />\r\n            </_Frame>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SendTemplateDialog;\r\n\r\nconst _Frame = styled.div<{\r\n    width: number;\r\n    height: number;\r\n}>`\r\n    display: inline-block;\r\n    position: absolute;\r\n    z-index: 11;\r\n    top: calc(50% - ${props => props.height / 2}px);\r\n    left: calc(50% - ${props => props.width / 2}px);\r\n    width: ${props => props.width}px;\r\n    height: ${props => props.height}px;\r\n    background-color: #e7e7e7e2;\r\n    border: 1px solid #8f8f8f;\r\n    border-radius: 4px;\r\n    box-shadow: 10px 15px 15px #0000004b;\r\n`;\r\n\r\nconst _Inner = styled.div<{}>`\r\n    /* text-align: center; */\r\n    display: inline-block;\r\n    width: 100%;\r\n    background-color: #d0e7e718;\r\n`;","import { useContext, useMemo } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\r\nimport LogicTemplateDialog from \"../../dialog/logicTemplateDialog\";\r\nimport SendTemplateDialog from \"../../dialog/sendTemplateDialog\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorSendManager = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n    const { rootData, node, setFocusNode, invalidate } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    const isDepend = () => {\r\n        const conn = (node.parent?.data as LogicUtil.WrapElement).data as LogicUtil.NodeInheritConnector;\r\n        return conn.method === 'depend';\r\n    };\r\n\r\n    // const getSendParamList = (): string[] => {\r\n    //     const connector = (node.parent?.data as LogicUtil.WrapElement).data as LogicUtil.NodeInheritConnector;\r\n    //     const isCreate = connector.method === 'create';\r\n    //     let targetWrap: LogicUtil.WrapElement | null = null;\r\n    //     if (!isCreate) {\r\n    //         const rootNode = rootData.data as LogicUtil.NodeRoot;\r\n    //         const inheritMng = rootNode.logicMng.data as LogicUtil.NodeLogicManager;\r\n    //         const dependItem = inheritMng.defs.find(wrap => {\r\n    //             return (wrap.data as LogicUtil.NodeLogicItem).name === connector.depend;\r\n    //         });\r\n    //         if (dependItem != undefined) targetWrap = dependItem;\r\n    //     } else {\r\n    //         targetWrap = (node.parent?.children[node.parent?.children.length - 1].data as LogicUtil.WrapElement)\r\n    //     }\r\n    //     if (targetWrap != null) {\r\n    //         const argWrap = (targetWrap.data as LogicUtil.NodeLogicItem).mngs[0];\r\n    //         if (argWrap.type === 'argument-mng') {\r\n    //             return (argWrap.data as LogicUtil.NodeArgumentManager).args.map(arg => {\r\n    //                 return (arg.data as LogicUtil.NodeArgumentItem).name;\r\n    //             });\r\n    //         }\r\n    //     }\r\n    //     return [];\r\n    // }\r\n\r\n    // const update = () => {\r\n    //     const sendParamList = getSendParamList();\r\n    //     const curSize = node.children.length;\r\n    //     const params = (wrap.data as LogicUtil.NodeParamManager).params;\r\n    //     // 不要なパラメータを削除\r\n    //     for (let i = curSize - 1; i >= 0; i--) {\r\n    //         const name = (params[i].data as LogicUtil.NodeParamItem).name;\r\n    //         if (!sendParamList.includes(name)) {\r\n    //             node.children.splice(i, 1);\r\n    //             params.splice(i, 1);\r\n    //         }\r\n    //     }\r\n    //     // 必要な存在しないパラメータを追加\r\n    //     const curParamList = params.map(param => {\r\n    //         return (param.data as LogicUtil.NodeParamItem).name;\r\n    //     });\r\n    //     sendParamList.forEach(param => {\r\n    //         if (!curParamList.includes(param)) {\r\n    //             const paramWrap = LogicElementUtil.createParamWrap('send-item',\r\n    //                 { name: param, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] }\r\n    //             );\r\n    //             params.push(paramWrap);\r\n    //             node.children.push(TreeUtil.createNode(paramWrap, node));\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n    return (<>\r\n        {/* <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Update Params',\r\n                        callback: () => {\r\n                            update();\r\n                            invalidate();\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        /> */}\r\n        <FormUtil.BorderPanel\r\n            title=\"template\"\r\n            innerJsx={<>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Connect Parent Position',\r\n                            isEnable: !isDepend(),\r\n                            callback: () => {\r\n                                store.system.dialog = <SendTemplateDialog.ConnectParentPosition\r\n                                    node={node}\r\n                                    invalidate={invalidate}\r\n                                />;\r\n                                setStore({ ...store });\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Set Parent Position',\r\n                            callback: () => {\r\n                                store.system.dialog = <SendTemplateDialog.SetParentPosition\r\n                                    node={node}\r\n                                    invalidate={invalidate}\r\n                                />;\r\n                                setStore({ ...store });\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorSendManager;","import { useContext } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorFieldMng = () => {\r\n    const { invalidate, node, setFocusNode } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Add Field',\r\n                        callback: () => {\r\n                            // const newWrap: FactoryUtil.WrapNode = FactoryUtil.createParamWrap('field-item',\r\n                            //     { name: '', formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] }\r\n                            // );\r\n                            const newWrap: LogicUtil.WrapElement = {\r\n                                type: 'field-item',\r\n                                data: null\r\n                            };\r\n                            const newNode = LogicElementUtil.addChild(newWrap, node);\r\n                            setFocusNode(newNode);\r\n                            invalidate();\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorFieldMng;","import { useContext, useEffect, useMemo } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ParamUtil from \"../../util/paramUtil\";\r\n\r\nconst EditorExtendMng = () => {\r\n    const { node, setFocusNode, invalidate } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    const [hasLoopParam, hasInvokeParam] = useMemo(() => {\r\n        const list = node.children.map(el => {\r\n            return ((el.data as LogicUtil.WrapElement).data as LogicUtil.NodeParamItem).name as ParamUtil.ExtendParam;\r\n        });\r\n        return [\r\n            list.includes(ParamUtil.ExtendParamType.LOOP_COUNT),\r\n            list.includes(ParamUtil.ExtendParamType.INVOKE)\r\n        ]\r\n    }, [node]);\r\n\r\n    useEffect(() => {\r\n    }, [node]);\r\n\r\n    /**\r\n     * 追加要素の表示非表示を切り替える\r\n     */\r\n    const toggleElement = (hasNode: boolean, listPos: number, wrapElement: LogicUtil.WrapElement) => {\r\n        if (hasNode) {\r\n            LogicElementUtil.removeChild(node, listPos, 1);\r\n            setFocusNode({ ...node });\r\n            invalidate();\r\n        } else {\r\n            LogicElementUtil.insertChild(wrapElement, node, listPos);\r\n            setFocusNode({ ...node });\r\n            invalidate();\r\n        }\r\n    };\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"element\"\r\n            innerJsx={<>\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Loop'}\r\n                            width={300}\r\n                            isUse={hasLoopParam}\r\n                            callback={() => {\r\n                                toggleElement(hasLoopParam, 0, {\r\n                                    type: 'param-item',\r\n                                    data: {\r\n                                        name: ParamUtil.ExtendParamType.LOOP_COUNT,\r\n                                        formulaItems: ['var'],\r\n                                        values: [{ type: 'direct', value: '1' }]\r\n                                    } as LogicUtil.NodeParamItem\r\n                                });\r\n                            }}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={\r\n                        <FormUtil.Switch\r\n                            label={'Invoke'}\r\n                            width={300}\r\n                            isUse={hasInvokeParam}\r\n                            callback={() => {\r\n                                toggleElement(hasInvokeParam, hasLoopParam ? 1 : 0, {\r\n                                    type: 'condition-item',\r\n                                    data: {\r\n                                        name: ParamUtil.ExtendParamType.INVOKE,\r\n                                        formulaItems: ['var', '=', 'var'],\r\n                                        values: [{ type: 'direct', value: '0' }, { type: 'direct', value: '0' }]\r\n                                    } as LogicUtil.NodeParamItem\r\n                                });\r\n                            }}\r\n                        />\r\n                    }\r\n                />\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorExtendMng;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ModifyOperations from \"../common/modifyOperations\";\r\nimport LogicTemplateDialog from \"../../dialog/logicTemplateDialog\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\n\r\nconst EditorSeedItem = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n    const { removeSelf, node, rootData, invalidate, setModify, isModify } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    const [name, setName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [origin, setOrigin] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n\r\n    const mappingForm = () => {\r\n        const param = wrap.data as LogicUtil.NodeSeedItem;\r\n        setName({ ...name, value: param.name });\r\n        setOrigin({ ...origin, value: param.entry });\r\n    };\r\n\r\n    /** 既存のシード名を取得（重複チェックに使用） */\r\n    const seedNameList = useMemo(() => {\r\n        const mng = (node.parent?.data as LogicUtil.WrapElement).data;\r\n        return LogicElementUtil.getSeedNameList(mng);\r\n    }, [node]);\r\n\r\n    useEffect(() => {\r\n        if (wrap.data == null) {\r\n            setModify(true);\r\n        } else {\r\n            mappingForm();\r\n        }\r\n    }, [node]);\r\n\r\n    // 引用するロジックリスト\r\n    const logicNameList = useMemo((): string[] => {\r\n        const rootNode = rootData.data as LogicUtil.NodeRoot;\r\n        const logicMng = rootNode.logicMng.data as LogicUtil.NodeLogicManager;\r\n        return logicMng.defs.map(wrap => {\r\n            return (wrap.data as LogicUtil.NodeLogicItem).name;\r\n        });\r\n    }, [node]);\r\n\r\n    return (<>\r\n        <ModifyOperations.Component\r\n            mappingForm={mappingForm}\r\n            checkableFields={[name, origin]}\r\n            firstRegist={() => {\r\n                const element: LogicUtil.NodeSeedItem = {\r\n                    name: name.value,\r\n                    entry: origin.value,\r\n                    mngs: LogicElementUtil.getDefaultSeedMngs()\r\n                };\r\n                wrap.data = element;\r\n\r\n                element.mngs.forEach((mng, i) => {\r\n                    const newNode = TreeUtil.createNode(mng, node);\r\n                    node.children.push(newNode);\r\n\r\n                    if(mng.type === 'interface-mng') {\r\n                        const interfaceData = mng.data as LogicUtil.NodeInterfaceMng;\r\n                        const interfaceNode = node.children[i];\r\n                        interfaceData.mngs.forEach(mng => {\r\n                            const newNode = TreeUtil.createNode(mng, interfaceNode);\r\n                            interfaceNode.children.push(newNode);\r\n                        });\r\n                    }\r\n                });\r\n                invalidate();\r\n                setStore({ ...store });\r\n            }}\r\n            modifyRegist={() => {\r\n                const param = wrap.data as LogicUtil.NodeLogicItem;\r\n                param.name = name.value;\r\n                wrap.data = param;\r\n            }}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"param\"\r\n            innerJsx={<>\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Name\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={200}\r\n                            isReadOnly={!isModify}\r\n                            checkable={name}\r\n                            setCheckable={setName}\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkStringLength(value, 1, 16),\r\n                                    errorType: \"length\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => LogicUtil.checkFieldName(value),\r\n                                    errorType: \"value\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => {\r\n                                        const list = seedNameList.filter(name => {\r\n                                            // 自分自身のロジック名を除外\r\n                                            if (wrap.data != null) {\r\n                                                return (wrap.data as LogicUtil.NodeLogicItem).name !== name;\r\n                                            }\r\n                                            return true;\r\n                                        });\r\n                                        return !list.includes(value);\r\n                                    },\r\n                                    errorType: \"relation\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Entry\"\r\n                    jsx={\r\n                        <FormUtil.Combobox\r\n                            marginLeft={2}\r\n                            checkable={origin}\r\n                            width={270}\r\n                            isReadOnly={!isModify}\r\n                            setCheckable={setOrigin}\r\n                            list={logicNameList.map(item => {\r\n                                return { value: item, labelText: item };\r\n                            })}\r\n                            headBlank\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n            </>}\r\n        />\r\n        {/* <FormUtil.BorderPanel\r\n            title=\"element\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.Record\r\n                    textAlign=\"center\"\r\n                    jsx={<FormUtil.Switch\r\n                        label={'Argument'}\r\n                        width={300}\r\n                        isUse={false}\r\n                        callback={() => {\r\n                        }}\r\n                    />}\r\n                />\r\n            </>}\r\n        /> */}\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Delete',\r\n                            callback: () => {\r\n                                removeSelf();\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                {/* 並び順入れ替えボタン */}\r\n                {LogicUtil.getSwapButtons(node, invalidate)}\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorSeedItem;","import { useContext } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport { FactoryTreeContext as LogicTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorThumbnailMng = () => {\r\n    const { node, setFocusNode, invalidate } = useContext(LogicTreeContext);\r\n    const mng = (node.data as LogicUtil.WrapElement).data as LogicUtil.NodeThumnailManager;\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Add Thumbnail',\r\n                        callback: () => {\r\n                            const newWrap: LogicUtil.WrapElement = {\r\n                                type: 'thumbnail-item',\r\n                                data: null\r\n                            }\r\n                            const newNode = LogicElementUtil.addChild(newWrap, node);\r\n                            setFocusNode(newNode);\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorThumbnailMng;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ModifyOperations from \"../common/modifyOperations\";\r\nimport LogicTemplateDialog from \"../../dialog/logicTemplateDialog\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\n\r\nconst EditorSampleItem = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n    const { removeSelf, node, rootData, invalidate, setModify, isModify } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    const [name, setName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n\r\n    const mappingForm = () => {\r\n        const param = wrap.data as LogicUtil.NodeSeedItem;\r\n        setName({ ...name, value: param.name });\r\n    };\r\n\r\n    /** 既存のサンプル名を取得（重複チェックに使用） */\r\n    // const sampleNameList = useMemo(() => {\r\n    //     const mng = (node.parent?.data as LogicUtil.WrapElement).data;\r\n    //     return LogicElementUtil.getSeedNameList(mng);\r\n    // }, [node]);\r\n\r\n    useEffect(() => {\r\n        if (wrap.data == null) {\r\n            setModify(true);\r\n        } else {\r\n            mappingForm();\r\n        }\r\n    }, [node]);\r\n\r\n\r\n    return (<>\r\n        <ModifyOperations.Component\r\n            mappingForm={mappingForm}\r\n            checkableFields={[name]}\r\n            firstRegist={() => {\r\n                const element: LogicUtil.NodeSampleItem = {\r\n                    name: name.value,\r\n                    params: []\r\n                };\r\n                wrap.data = element;\r\n\r\n                invalidate();\r\n                setStore({ ...store });\r\n            }}\r\n            modifyRegist={() => {\r\n                const param = wrap.data as LogicUtil.NodeLogicItem;\r\n                param.name = name.value;\r\n                wrap.data = param;\r\n            }}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"param\"\r\n            innerJsx={<>\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Name\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={200}\r\n                            isReadOnly={!isModify}\r\n                            checkable={name}\r\n                            setCheckable={setName}\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkStringLength(value, 1, 16),\r\n                                    errorType: \"length\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => LogicUtil.checkFieldName(value),\r\n                                    errorType: \"value\"\r\n                                },\r\n                                // {\r\n                                //     checker: (value) => {\r\n                                //         const list = sampleNameList.filter(name => {\r\n                                //             // 自分自身のロジック名を除外\r\n                                //             if (wrap.data != null) {\r\n                                //                 return (wrap.data as LogicUtil.NodeLogicItem).name !== name;\r\n                                //             }\r\n                                //             return true;\r\n                                //         });\r\n                                //         return !list.includes(value);\r\n                                //     },\r\n                                //     errorType: \"relation\"\r\n                                // }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n            </>}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Delete',\r\n                            callback: () => {\r\n                                removeSelf();\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                {/* 並び順入れ替えボタン */}\r\n                {LogicUtil.getSwapButtons(node, invalidate)}\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorSampleItem;","import { useContext } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorSampleMng = () => {\r\n    const {node, setFocusNode} = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Add Sample',\r\n                        callback: () => {\r\n                            const itemWrap: LogicUtil.WrapElement = {\r\n                                type: 'sample-item',\r\n                                data: null\r\n                            };\r\n                            (wrap.data as LogicUtil.NodeSampleManager).samples.push(itemWrap);\r\n                            const newNode = TreeUtil.createNode(itemWrap, node);\r\n                            node.children.push(newNode);\r\n                            setFocusNode(newNode);\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorSampleMng;","import { useContext, useMemo } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\r\nimport LogicTemplateDialog from \"../../dialog/logicTemplateDialog\";\r\nimport SendTemplateDialog from \"../../dialog/sendTemplateDialog\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorInterfaceManager = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n    const { rootData, node, setFocusNode, invalidate } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Initialize Params',\r\n                        callback: () => {\r\n                            invalidate();\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorInterfaceManager;","import { useContext } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorSeedArgMng = () => {\r\n    const {node, setFocusNode} = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    return (<>\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            innerJsx={<FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Add Argument',\r\n                        callback: () => {\r\n                            const itemWrap: LogicUtil.WrapElement = {\r\n                                type: 'seedarg-item',\r\n                                data: null\r\n                            };\r\n                            (wrap.data as LogicUtil.NodeSeedArgManager).args.push(itemWrap);\r\n                            const newNode = TreeUtil.createNode(itemWrap, node);\r\n                            node.children.push(newNode);\r\n                            setFocusNode(newNode);\r\n                        }\r\n                    }\r\n                ]}\r\n            />}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorSeedArgMng;","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport ValidateUtil from \"../../../../../utils/form/validateUtil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\nimport ModifyOperations from \"../common/modifyOperations\";\r\n\r\nconst EditorSeedArgItem = () => {\r\n    const { node, removeSelf, setModify, isModify, invalidate } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    const [name, setName] = useState<FormUtil.CheckableValue>({ value: '', errors: [] });\r\n    const [min, setMin] = useState<FormUtil.CheckableValue>({ value: '-9999', errors: [] });\r\n    const [max, setMax] = useState<FormUtil.CheckableValue>({ value: '9999', errors: [] });\r\n    const [step, setStep] = useState<FormUtil.CheckableValue>({ value: '1', errors: [] });\r\n    const [defval, setDefval] = useState<FormUtil.CheckableValue>({ value: '0', errors: [] });\r\n    // const [argType, setArgType] = useState<FormUtil.CheckableValue>({ value: 'number', errors: [] });\r\n\r\n    /** 既存のパラメータ名を取得（重複チェックに使用） */\r\n    const reservedList = useMemo(() => {\r\n        const owner = (node.parent?.parent?.data as LogicUtil.WrapElement).data;\r\n        return LogicElementUtil.getParamNameList(owner);\r\n    }, [node]);\r\n\r\n    const mappingForm = () => {\r\n        const param = wrap.data as LogicUtil.NodeSeedArgItem;\r\n        setName({ ...name, value: param.name });\r\n        setMin({ ...min, value: param.min.toString() });\r\n        setMax({ ...max, value: param.max.toString() });\r\n        setStep({ ...step, value: param.step.toString() });\r\n        setDefval({ ...defval, value: param.defval.toString() });\r\n        // setArgType({ ...argType, value: param.valueType });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (wrap.data == null) {\r\n            setModify(true);\r\n        } else {\r\n            mappingForm();\r\n        }\r\n    }, [node]);\r\n\r\n    return (<>\r\n        <ModifyOperations.Component\r\n            mappingForm={mappingForm}\r\n            checkableFields={[name]}\r\n            firstRegist={() => {\r\n                const param: LogicUtil.NodeSeedArgItem = {\r\n                    name: name.value,\r\n                    min: Number(min.value),\r\n                    max: Number(max.value),\r\n                    step: Number(step.value),\r\n                    defval: Number(defval.value),\r\n                    // valueType: argType.value as LogicUtil.ArgumentType\r\n                };\r\n                wrap.data = param;\r\n                // LogicElementUtil.syncArgumentAdd(node.parent?.parent as TreeUtil.ElementNode, name.value);\r\n            }}\r\n            modifyRegist={() => {\r\n                const param = wrap.data as LogicUtil.NodeSeedArgItem;\r\n                const prevName = param.name;\r\n                param.name = name.value;\r\n                param.min = Number(min.value);\r\n                param.max = Number(max.value);\r\n                param.step = Number(step.value);\r\n                param.defval = Number(defval.value);\r\n                // param.valueType = argType.value as LogicUtil.ArgumentType;\r\n                wrap.data = param;\r\n\r\n                if (prevName !== name.value) {\r\n                    // LogicElementUtil.syncArgumentName(node.parent?.parent as TreeUtil.ElementNode, prevName, name.value);\r\n                }\r\n            }}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"param\"\r\n            innerJsx={<>\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Name\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={200}\r\n                            isReadOnly={!isModify}\r\n                            checkable={name}\r\n                            setCheckable={setName}\r\n                            validates={[\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkRequired(value),\r\n                                    errorType: \"required\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => ValidateUtil.checkStringLength(value, 1, 16),\r\n                                    errorType: \"length\"\r\n                                },\r\n                                {\r\n                                    checker: (value) => LogicUtil.checkFieldName(value),\r\n                                    errorType: \"value\"\r\n                                },\r\n                                // {\r\n                                //     checker: (value) => {\r\n                                //         const list = reservedList.filter(name => {\r\n                                //             // 自分自身のパラメータ名を除外\r\n                                //             if (wrap.data != null) {\r\n                                //                 return (wrap.data as LogicUtil.NodeArgumentItem).name !== name;\r\n                                //             }\r\n                                //             return true;\r\n                                //         });\r\n                                //         return !list.includes(value);\r\n                                //     },\r\n                                //     errorType: \"relation\"\r\n                                // }\r\n                            ]}\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Min\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={100}\r\n                            isReadOnly={!isModify}\r\n                            checkable={min}\r\n                            setCheckable={setMin}\r\n                            isNumber\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Max\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={100}\r\n                            isReadOnly={!isModify}\r\n                            checkable={max}\r\n                            setCheckable={setMax}\r\n                            isNumber\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Step\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={100}\r\n                            isReadOnly={!isModify}\r\n                            checkable={step}\r\n                            setCheckable={setStep}\r\n                            isNumber\r\n                        />\r\n                    }\r\n                />\r\n                <FormUtil.FormRecord\r\n                    titleLabel=\"Default\"\r\n                    jsx={\r\n                        <FormUtil.TextField\r\n                            width={100}\r\n                            isReadOnly={!isModify}\r\n                            checkable={defval}\r\n                            setCheckable={setDefval}\r\n                            isNumber\r\n                        />\r\n                    }\r\n                />\r\n                {/* <FormUtil.FormRecord\r\n                    titleLabel=\"Type\"\r\n                    jsx={\r\n                        <FormUtil.Combobox\r\n                            checkable={argType}\r\n                            setCheckable={setArgType}\r\n                            list={LogicUtil.ArgTypes.map(type => {\r\n                                return { value: type, labelText: type, isDisabled: type === 'color' }\r\n                            })}\r\n                            headBlank\r\n                            width={200}\r\n                            isReadOnly={!isModify}\r\n                            validates={\r\n                                [\r\n                                    {\r\n                                        checker: (value) => ValidateUtil.checkRequired(value),\r\n                                        errorType: \"required\"\r\n                                    }\r\n                                ]\r\n                            }\r\n                        />\r\n                    }\r\n                /> */}\r\n            </>}\r\n        />\r\n        <FormUtil.BorderPanel\r\n            title=\"operation\"\r\n            isEnable={!isModify}\r\n            innerJsx={<>\r\n                <FormUtil.ButtonRecord\r\n                    isCenter\r\n                    buttons={[\r\n                        {\r\n                            label: 'Delete',\r\n                            isEnable: !isModify,\r\n                            callback: () => {\r\n                                // LogicElementUtil.syncArgumentDel(node.parent?.parent as TreeUtil.ElementNode, name.value);\r\n                                removeSelf();\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n                {/* 並び順入れ替えボタン */}\r\n                {LogicUtil.getSwapButtons(node, invalidate)}\r\n            </>}\r\n        />\r\n    </>);\r\n}\r\n\r\nexport default EditorSeedArgItem;","import { useContext, useMemo } from \"react\";\r\nimport FormUtil from \"../../../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../../../utils/treeUtil\";\r\nimport { GlobalContext } from \"../../../../entry/systemEntry\";\r\nimport LogicTemplateDialog from \"../../dialog/logicTemplateDialog\";\r\nimport SendTemplateDialog from \"../../dialog/sendTemplateDialog\";\r\nimport LogicMainteTab, { FactoryTreeContext } from \"../../logicMainteTab\";\r\nimport LogicElementUtil from \"../../util/logicElementUtil\";\r\nimport LogicUtil from \"../../util/logicUtil\";\r\n\r\nconst EditorSeedSendMng = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n    const { rootData, node, setFocusNode, invalidate } = useContext(FactoryTreeContext);\r\n    const wrap = node.data as LogicUtil.WrapElement;\r\n\r\n    // const getSendParamList = (): string[] => {\r\n    //     const connector = (node.parent?.data as LogicUtil.WrapElement).data as LogicUtil.NodeInheritConnector;\r\n    //     const isCreate = connector.method === 'create';\r\n    //     let targetWrap: LogicUtil.WrapElement | null = null;\r\n    //     if (!isCreate) {\r\n    //         const rootNode = rootData.data as LogicUtil.NodeRoot;\r\n    //         const inheritMng = rootNode.logicMng.data as LogicUtil.NodeLogicManager;\r\n    //         const dependItem = inheritMng.defs.find(wrap => {\r\n    //             return (wrap.data as LogicUtil.NodeLogicItem).name === connector.depend;\r\n    //         });\r\n    //         if (dependItem != undefined) targetWrap = dependItem;\r\n    //     } else {\r\n    //         targetWrap = (node.parent?.children[node.parent?.children.length - 1].data as LogicUtil.WrapElement)\r\n    //     }\r\n    //     if (targetWrap != null) {\r\n    //         const argWrap = (targetWrap.data as LogicUtil.NodeLogicItem).mngs[0];\r\n    //         if (argWrap.type === 'argument-mng') {\r\n    //             return (argWrap.data as LogicUtil.NodeArgumentManager).args.map(arg => {\r\n    //                 return (arg.data as LogicUtil.NodeArgumentItem).name;\r\n    //             });\r\n    //         }\r\n    //     }\r\n    //     return [];\r\n    // }\r\n\r\n    // const update = () => {\r\n    //     const sendParamList = getSendParamList();\r\n    //     const curSize = node.children.length;\r\n    //     const params = (wrap.data as LogicUtil.NodeParamManager).params;\r\n    //     // 不要なパラメータを削除\r\n    //     for (let i = curSize - 1; i >= 0; i--) {\r\n    //         const name = (params[i].data as LogicUtil.NodeParamItem).name;\r\n    //         if (!sendParamList.includes(name)) {\r\n    //             node.children.splice(i, 1);\r\n    //             params.splice(i, 1);\r\n    //         }\r\n    //     }\r\n    //     // 必要な存在しないパラメータを追加\r\n    //     const curParamList = params.map(param => {\r\n    //         return (param.data as LogicUtil.NodeParamItem).name;\r\n    //     });\r\n    //     sendParamList.forEach(param => {\r\n    //         if (!curParamList.includes(param)) {\r\n    //             const paramWrap = LogicElementUtil.createParamWrap('send-item',\r\n    //                 { name: param, formulaItems: ['var'], values: [{ type: 'direct', value: '0' }] }\r\n    //             );\r\n    //             params.push(paramWrap);\r\n    //             node.children.push(TreeUtil.createNode(paramWrap, node));\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n    return (<>\r\n    </>);\r\n}\r\n\r\nexport default EditorSeedSendMng;","import styled, { css } from \"styled-components\";\r\nimport Styles from \"../../../../base/design/styles\";\r\nimport TreeUtil from \"../../../../utils/treeUtil\";\r\nimport FactDetArgumentMng from \"../detail/logic/editorArgumentMng\";\r\nimport EditorArgumentItem from \"../detail/logic/editorArgumentItem\";\r\nimport FactDetSeedMng from \"../detail/seed/editorSeedMng\";\r\nimport EditorLogicMng from \"../detail/logic/editorLogicMng\";\r\nimport EditorLogicItem from \"../detail/logic/editorLogicItem\";\r\nimport EditorParamItem from \"../detail/logic/editorParamItem\";\r\nimport FactDetBehiviorMng from \"../detail/logic/editorBehiviorMng\";\r\nimport EditorVisualMng from \"../detail/logic/editorVisualMng\";\r\nimport ValidateUtil from \"../../../../utils/form/validateUtil\";\r\nimport EditorInheritConnMng from \"../detail/logic/editorInheritConnMng\";\r\nimport EditorInheritConnector from \"../detail/logic/editorInheritConnector\";\r\nimport EditorSendManager from \"../detail/logic/editorSendManager\";\r\nimport EditorFieldMng from \"../detail/logic/editorFieldMng\";\r\nimport EditorExtendMng from \"../detail/logic/editorExtendMng\";\r\nimport EditorSeedItem from \"../detail/seed/editorSeedItem\";\r\nimport FormUtil from \"../../../../utils/form/formUtiil\";\r\nimport LogicElementUtil from \"./logicElementUtil\";\r\nimport EditorThumbnailMng from \"../detail/seed/editorThumbnailMng\";\r\nimport EditorThumbnailItem from \"../detail/seed/editorThumbnailItem\";\r\nimport EditorSampleItem from \"../detail/seed/editorSampleItem\";\r\nimport EditorSampleMng from \"../detail/seed/editorSampleMng\";\r\nimport EditorInterfaceManager from \"../detail/seed/editorInterfaceManager\";\r\nimport EditorSeedArgMng from \"../detail/seed/editorSeedArgMng\";\r\nimport EditorSeedArgItem from \"../detail/seed/editorSeedArgItem\";\r\nimport EditorSeedSendMng from \"../detail/seed/editorSeedSendMng\";\r\n\r\nnamespace LogicUtil {\r\n\r\n    export type DetailArgs = {\r\n        rootData: LogicUtil.WrapElement;\r\n        node: TreeUtil.ElementNode;\r\n        setFocusNode: (node: TreeUtil.ElementNode) => void;\r\n        invalidate: () => void;\r\n        isModify: boolean;\r\n        setModify: (isModify: boolean) => void;\r\n        setRootData: React.Dispatch<React.SetStateAction<WrapElement>>;\r\n        removeSelf: () => void;\r\n        // treeDisable: boolean;\r\n        // setTreeDisable: (treeDisable: boolean) => void;\r\n    }\r\n\r\n    /**\r\n     * 変数名チェック\r\n     * @param str 検証する文字列\r\n     * @returns 判定結果\r\n     */\r\n    export const checkFieldName = (str: string) => {\r\n        const list = '0123456789abcdefghijklmnopqrstuvwxyz_';\r\n        return !['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].\r\n            includes(str.substring(0, 1)) && ValidateUtil.checkIncludesChars(str, list);\r\n    }\r\n\r\n    export type NodeType =\r\n        'root' |\r\n        'seed-mng' |\r\n        'logic-mng' |\r\n        'seed-item' |\r\n        'logic-item' |\r\n        'argument-mng' |\r\n        'argument-item' |\r\n        'field-mng' |\r\n        'field-item' |\r\n        'visual-mng' |\r\n        'behavior-mng' |\r\n        'extend-mng' |\r\n        'inherit-mng' |\r\n        'connector' |\r\n        'inherit-logic' |\r\n        'send-mng' |\r\n        'send-item' |\r\n        'param-item' |\r\n        'condition-item' |\r\n        'interface-mng' |\r\n        'sample-mng' |\r\n        'sample-item' |\r\n        'thumbnail-mng' |\r\n        'thumbnail-mng' |\r\n        'thumbnail-item' |\r\n        'seedarg-mng' |\r\n        'seedsend-mng'|\r\n        'seedarg-item' |\r\n        'seedsend-item'\r\n        ;\r\n\r\n    export const ArgTypes = ['number', 'color'] as const;\r\n    export type ArgumentType = typeof ArgTypes[number];\r\n\r\n\r\n    export const ParamInputTypes = ['direct', 'constant', 'argument', 'self', 'field'] as const;\r\n    export type ParamInputType = typeof ParamInputTypes[number];\r\n\r\n    export type ParamProps = {\r\n        type: ParamInputType;\r\n        value: string;\r\n    }\r\n\r\n    export type WrapElement = {\r\n        type: NodeType;\r\n        data: any;\r\n    }\r\n\r\n    export type NodeRoot = {\r\n        seedMng: WrapElement;\r\n        logicMng: WrapElement;\r\n    }\r\n    export type NodeSeedManager = {\r\n        defs: WrapElement[];\r\n    }\r\n    export type NodeLogicManager = {\r\n        defs: WrapElement[];\r\n    }\r\n    export type NodeLogicItem = {\r\n        name: string;\r\n        mngs: WrapElement[];\r\n    }\r\n    export type NodeInterfaceMng = {\r\n        mngs: WrapElement[];\r\n    }\r\n    export type NodeInheritItem = {\r\n        mngs: WrapElement[];\r\n    }\r\n    export type NodeParamManager = {\r\n        params: WrapElement[];\r\n    }\r\n    export type NodeParamItem = {\r\n        name: string;\r\n        formulaItems: string[];\r\n        values: ParamProps[];\r\n    }\r\n\r\n    export type NodeArgumentItem = {\r\n        name: string;\r\n        valueType: ArgumentType;\r\n    }\r\n    export type NodeThumbnailItem = {\r\n        name: string;\r\n        frame: number;\r\n    }\r\n    export type NodeArgumentManager = {\r\n        args: WrapElement[];\r\n    }\r\n    export type NodeFieldManager = {\r\n        fields: WrapElement[];\r\n    }\r\n    export type NodeSampleManager = {\r\n        samples: WrapElement[];\r\n    }\r\n    export type NodeSampleItem = {\r\n        name: string;\r\n        params: WrapElement[];\r\n    }\r\n\r\n    // export type NodeExtendManager = {\r\n    //     mngs: WrapElement[];\r\n    // }\r\n    export type NodeConnectManager = {\r\n        inherits: WrapElement[];\r\n    }\r\n    export type NodeInheritConnector = {\r\n        method: InheritMethod;\r\n        depend: string;\r\n        id: string;\r\n        disable?: boolean;\r\n        mngs: WrapElement[];\r\n    }\r\n\r\n    export type NodeSeedItem = {\r\n        name: string;\r\n        entry: string;\r\n        mngs: WrapElement[];\r\n    }\r\n    export type NodeThumnailManager = {\r\n        items: WrapElement[];\r\n    }\r\n    export type NodeSeedArgManager = {\r\n        args: WrapElement[];\r\n    }\r\n    export type NodeSeedSendManager = {\r\n        params: WrapElement[];\r\n    }\r\n    export type NodeSeedArgItem = {\r\n        name: string;\r\n        min: number;\r\n        max: number;\r\n        step: number;\r\n        defval: number;\r\n    }\r\n\r\n    const COLOR_ROOT = '#a1a1a1';\r\n    const COLOR_METHOD = '#cca67b';\r\n    const COLOR_MNG = '#37a2bd';\r\n    const COLOR_LIST = '#b85f5f';\r\n    const COLOR_ITEM = '#ae628c';\r\n    const COLOR_DISABLE = '#685b79';\r\n    const COLOR_PARAM = '#8dae62';\r\n    const COLOR_FIELD = '#cec256';\r\n    const COLOR_THUMBNAIL = '#8283be';\r\n    const COLOR_CONDITION = '#56ce7e';\r\n\r\n    export const getNodeDisplayJsx = (node: TreeUtil.ElementNode, isFocus: boolean) => {\r\n        const wrap = node.data as WrapElement;\r\n        switch (wrap.type) {\r\n            case 'root': {\r\n                return <_Category backgroundColor={COLOR_ROOT}>Library</_Category>;\r\n            }\r\n            case 'seed-mng': {\r\n                return <_Category backgroundColor={COLOR_METHOD}>Seed Manager</_Category>;\r\n            }\r\n            case 'logic-mng': {\r\n                return <_Category backgroundColor={COLOR_METHOD}>Logic Manager</_Category>;\r\n            }\r\n            case 'visual-mng': {\r\n                return <_Category backgroundColor={COLOR_MNG}>Visual</_Category>;\r\n            }\r\n            case 'extend-mng': {\r\n                return <_Category backgroundColor={COLOR_MNG}>Extend</_Category>;\r\n            }\r\n            case 'seed-item': {\r\n                let name = '...';\r\n                if (wrap.data != null) {\r\n                    const data = wrap.data as NodeLogicItem;\r\n                    name = data.name;\r\n                }\r\n                return <>\r\n                    <_Category backgroundColor={COLOR_ITEM}>Seed</_Category>\r\n                    <_EditableValue>{name}</_EditableValue>\r\n                </>;\r\n            }\r\n            case 'logic-item': {\r\n                let name = '...';\r\n                if (wrap.data != null) {\r\n                    const data = wrap.data as NodeLogicItem;\r\n                    name = data.name;\r\n                }\r\n                return <>\r\n                    <_Category backgroundColor={COLOR_ITEM}>Logic</_Category>\r\n                    <_EditableValue>{name}</_EditableValue>\r\n                </>;\r\n            }\r\n            case 'inherit-logic': {\r\n                return <_Category backgroundColor={COLOR_MNG}>Logic</_Category>;\r\n            }\r\n            case 'argument-mng': {\r\n                return <_Category backgroundColor={COLOR_LIST}>Argument Manager</_Category>;\r\n            }\r\n            case 'field-mng': {\r\n                return <_Category backgroundColor={COLOR_LIST}>Field Manager</_Category>;\r\n            }\r\n            case 'behavior-mng': {\r\n                return <_Category backgroundColor={COLOR_MNG}>Behavior</_Category>;\r\n            }\r\n            case 'inherit-mng': {\r\n                return <_Category backgroundColor={COLOR_LIST}>Inherit Manager</_Category>;\r\n            }\r\n            case 'connector': {\r\n                let detailJsx = <span>...</span>;\r\n                let color = COLOR_ITEM;\r\n                let isDisable = false;\r\n                if (wrap.data != null) {\r\n                    const data = wrap.data as NodeInheritConnector;\r\n                    detailJsx = <span>{data.id}&nbsp;<_Span color=\"#ffe89ba6\">{data.method}</_Span></span>;\r\n                    if (data.method === 'depend') {\r\n                        detailJsx = <span>{data.id}&nbsp;<_Span color=\"#ffe89ba6\">{data.method}:&nbsp;</_Span><_Field>{data.depend}</_Field></span>;\r\n                    }\r\n                    if (data.disable ?? false) {\r\n                        color = COLOR_DISABLE;\r\n                        isDisable = true;\r\n                    }\r\n                }\r\n                return (<>\r\n                    <_Category backgroundColor={color} isDisable={isDisable}>Inherit</_Category>\r\n                    {detailJsx == undefined ? <></> : <_EditableValue>{detailJsx}</_EditableValue>}\r\n                </>);\r\n            }\r\n            // パラメータ要素\r\n            case 'param-item':\r\n            case 'send-item': {\r\n                const data = wrap.data as NodeParamItem;\r\n                let result: JSX.Element[] = [];\r\n                let varCnt = 0;\r\n                data.formulaItems.forEach((formula, i) => {\r\n                    let str = <_Signature key={i}>{formula}</_Signature>;\r\n                    if (formula === 'var') {\r\n                        const v = data.values[varCnt];\r\n                        if (v.type !== 'direct') str = <_Field key={i}>{`$\\{${v.value}}`}</_Field>;\r\n                        else str = <span key={i}>{v.value}</span>;\r\n                        varCnt++;\r\n                    }\r\n                    result.push(str);\r\n                });\r\n                return <>\r\n                    <_Category backgroundColor={COLOR_PARAM}>Param<_Detail>&nbsp;[{data.name}]</_Detail></_Category>\r\n                    <_EditableValue>{result}</_EditableValue>\r\n                </>;\r\n            }\r\n            // 条件要素\r\n            case 'condition-item': {\r\n                const data = wrap.data as NodeParamItem;\r\n                let result: JSX.Element[] = [];\r\n                let varCnt = 0;\r\n                data.formulaItems.forEach((formula, i) => {\r\n                    let str = <_Signature key={i}>{formula}</_Signature>;\r\n                    if (formula === 'var') {\r\n                        const v = data.values[varCnt];\r\n                        if (v.type !== 'direct') str = <_Field key={i}>{`$\\{${v.value}}`}</_Field>;\r\n                        else str = <span key={i}>{v.value}</span>;\r\n                        varCnt++;\r\n                    }\r\n                    result.push(str);\r\n                });\r\n                return <>\r\n                    <_Category backgroundColor={COLOR_CONDITION}>Condition<_Detail>&nbsp;[{data.name}]</_Detail></_Category>\r\n                    <_EditableValue>{result}</_EditableValue>\r\n                </>;\r\n            }\r\n            // 変数要素\r\n            case 'field-item': {\r\n                let nameJsx = <span>...</span>;\r\n                let detailJsx = <span>...</span>;\r\n                if (wrap.data != null) {\r\n                    const data = wrap.data as NodeParamItem;\r\n                    nameJsx = <_Detail>&nbsp;[{data.name}]</_Detail>;\r\n                    let result: JSX.Element[] = [];\r\n                    let varCnt = 0;\r\n                    data.formulaItems.forEach((formula, i) => {\r\n                        let str = <_Signature key={i}>{formula}</_Signature>;\r\n                        if (formula === 'var') {\r\n                            const v = data.values[varCnt];\r\n                            if (v.type !== 'direct') str = <_Field key={i}>{`$\\{${v.value}}`}</_Field>;\r\n                            else str = <span key={i}>{v.value}</span>;\r\n                            varCnt++;\r\n                        }\r\n                        result.push(str);\r\n                    });\r\n                    detailJsx = <>{result}</>;\r\n                }\r\n                return <>\r\n                    <_Category backgroundColor={COLOR_FIELD}>Field{nameJsx}</_Category>\r\n                    <_EditableValue>{detailJsx}</_EditableValue>\r\n                </>;\r\n            }\r\n            case 'argument-item': {\r\n                let detailJsx = <span>...</span>;\r\n                if (wrap.data != null) {\r\n                    const data = wrap.data as NodeArgumentItem;\r\n                    detailJsx = <span>{data.name}<_ValueType>&nbsp;({data.valueType})</_ValueType></span>\r\n                }\r\n                return <>\r\n                    <_Category backgroundColor={COLOR_ITEM}>Argument<_Detail></_Detail></_Category>\r\n                    <_EditableValue>{detailJsx}</_EditableValue>\r\n                </>;\r\n            }\r\n            case 'send-mng': {\r\n                return <_Category backgroundColor={COLOR_MNG}>Send</_Category>;\r\n            }\r\n            case 'thumbnail-mng': {\r\n                return <_Category backgroundColor={COLOR_LIST}>Thumnail Manager</_Category>;\r\n            }\r\n            case 'thumbnail-item': {\r\n                let detailJsx = <span>...</span>;\r\n                if (wrap.data != null) {\r\n                    const data = wrap.data as NodeThumbnailItem;\r\n                    detailJsx = <span>{data.name}<_ValueType>&nbsp;({data.frame})</_ValueType></span>\r\n                }\r\n                return <>\r\n                    <_Category backgroundColor={COLOR_THUMBNAIL}>Thumbnail</_Category>\r\n                    <_EditableValue>{detailJsx}</_EditableValue>\r\n                </>;\r\n            }\r\n            case 'sample-mng': {\r\n                return <_Category backgroundColor={COLOR_LIST}>Sample Manager</_Category>;\r\n            }\r\n            case 'sample-item': {\r\n                let name = '...';\r\n                if (wrap.data != null) {\r\n                    const data = wrap.data as NodeSampleItem;\r\n                    name = data.name;\r\n                }\r\n                return <>\r\n                    <_Category backgroundColor={COLOR_ITEM}>Sample</_Category>\r\n                    <_EditableValue>{name}</_EditableValue>\r\n                </>;\r\n            }\r\n            case 'interface-mng': {\r\n                return <_Category backgroundColor={COLOR_MNG}>Interface</_Category>;\r\n            }\r\n            case 'seedarg-mng': {\r\n                return <_Category backgroundColor={COLOR_LIST}>Argument Manager</_Category>;\r\n            }\r\n            case 'seedarg-item': {\r\n                let detailJsx = <span>...</span>;\r\n                if (wrap.data != null) {\r\n                    const data = wrap.data as NodeSeedArgItem;\r\n                    detailJsx = <span>{data.name}<_ValueType>&nbsp;({data.min}～{data.max})</_ValueType></span>\r\n                }\r\n                return <>\r\n                    <_Category backgroundColor={COLOR_ITEM}>Argument<_Detail></_Detail></_Category>\r\n                    <_EditableValue>{detailJsx}</_EditableValue>\r\n                </>;\r\n            }\r\n            case 'seedsend-mng': {\r\n                return <_Category backgroundColor={COLOR_MNG}>Send</_Category>;\r\n            }\r\n        }\r\n        return <_Category backgroundColor={'#ffffff'}>XXXXX</_Category>;\r\n    }\r\n\r\n    export const getTypeName = (node: TreeUtil.ElementNode | null) => {\r\n        if (node == null) return '';\r\n        const type = (node.data as WrapElement).type;\r\n        switch (type) {\r\n            case 'root': return 'Root';\r\n            case 'seed-mng': return 'Seed Manager';\r\n            case 'logic-mng': return 'Logic Manager';\r\n            case 'seed-item': return 'Seed Item';\r\n            case 'logic-item': return 'Logic Item';\r\n            case 'argument-mng': return 'Argument Manager';\r\n            case 'field-mng': return 'Field Manager';\r\n            case 'field-item': return 'Field Item';\r\n            case 'visual-mng': return 'Visual Manager';\r\n            case 'argument-item': return 'Argument Item';\r\n            case 'extend-mng': return 'Extend Manager';\r\n            case 'behavior-mng': return 'Behavior Manager';\r\n            case 'inherit-mng': return 'Inherit Manager';\r\n            case 'connector': return 'Inherit Connector';\r\n            case 'inherit-logic': return 'Inherit Logic';\r\n            case 'send-mng': return 'Send Manager';\r\n            case 'send-item': return 'Send Item';\r\n            case 'param-item': return 'Param Item';\r\n            case 'condition-item': return 'Condition Item';\r\n            case 'interface-mng': return 'Interface Manager';\r\n            case 'thumbnail-mng': return 'Thumbnail Manager';\r\n            case 'thumbnail-item': return 'Thumbnail Item';\r\n            case 'sample-mng': return 'Sample Manager';\r\n            case 'sample-item': return 'Sample Item';\r\n            case 'seedarg-mng': return 'Argument Manager';\r\n            case 'seedsend-mng': return 'Send';\r\n        }\r\n    }\r\n\r\n    export const getDetailComponent = (node: TreeUtil.ElementNode | null) => {\r\n        if (node == null) return <></>;\r\n        const type = (node.data as WrapElement).type;\r\n        switch (type) {\r\n            case 'root': return <></>;\r\n            case 'seed-mng': return <FactDetSeedMng />;\r\n            case 'logic-mng': return <EditorLogicMng />;\r\n            case 'seed-item': return <EditorSeedItem />;\r\n            case 'logic-item': return <EditorLogicItem />;\r\n            case 'argument-mng': return <FactDetArgumentMng />;\r\n            case 'argument-item': return <EditorArgumentItem />;\r\n            case 'field-mng': return <EditorFieldMng />;\r\n            case 'visual-mng': return <EditorVisualMng />;\r\n            case 'extend-mng': return <EditorExtendMng />;\r\n            case 'behavior-mng': return <FactDetBehiviorMng />;\r\n            case 'inherit-mng': return <EditorInheritConnMng />;\r\n            case 'connector': return <EditorInheritConnector />;\r\n            case 'inherit-logic': return <EditorLogicItem />;\r\n            case 'send-mng': return <EditorSendManager />;\r\n            case 'field-item':\r\n            case 'param-item':\r\n            case 'condition-item':\r\n            case 'send-item': return <EditorParamItem />;\r\n            case 'interface-mng': return <EditorInterfaceManager />;\r\n            case 'sample-mng': return <EditorSampleMng />;\r\n            case 'sample-item': return <EditorSampleItem />;\r\n            case 'thumbnail-mng': return <EditorThumbnailMng />;\r\n            case 'thumbnail-item': return <EditorSeedArgItem />;\r\n            case 'seedarg-mng': return <EditorSeedArgMng />;\r\n            case 'seedarg-item': return <EditorSeedArgItem />;\r\n            case 'seedsend-mng': return <EditorSeedSendMng />;\r\n        }\r\n    }\r\n\r\n    export const ConnectTypes = ['create', 'depend'] as const;\r\n    export type InheritMethod = typeof ConnectTypes[number];\r\n\r\n    export const getChildrenElementNode = (node: TreeUtil.ElementNode): TreeUtil.ElementNode[] => {\r\n        const wrapNode = node.data as WrapElement;\r\n        const get = (listName: string) => {\r\n            return ((wrapNode.data)[listName] as LogicUtil.WrapElement[]).map(wrap => {\r\n                const elementNode = TreeUtil.createNode(wrap, node);\r\n                elementNode.children = getChildrenElementNode(elementNode);\r\n                return elementNode;\r\n            });\r\n        }\r\n        switch (wrapNode.type) {\r\n            case 'seed-mng':\r\n            case 'logic-mng': return get('defs');\r\n            case 'seed-item':\r\n            case 'connector':\r\n            case 'inherit-logic':\r\n            case 'logic-item': return get('mngs');\r\n            case 'send-mng':\r\n            case 'behavior-mng':\r\n            case 'visual-mng':\r\n            case 'extend-mng':\r\n            case 'visual-mng': return get('params');\r\n            case 'inherit-mng': return get('inherits');\r\n            case 'argument-mng': return get('args');\r\n            case 'sample-mng': return get('samples');\r\n            case 'field-mng': return get('fields');\r\n            case 'thumbnail-mng': return get('items');\r\n        }\r\n        return [];\r\n    };\r\n\r\n    export const getChildrenDataNode = (wrapNode: LogicUtil.WrapElement): TreeUtil.DataNode[] => {\r\n        const get = (listName: string) => {\r\n\r\n            return ((wrapNode.data)[listName] as LogicUtil.WrapElement[]).map(wrap => {\r\n                const treeNode: TreeUtil.DataNode = {\r\n                    data: wrap,\r\n                    children: getChildrenDataNode(wrap)\r\n                };\r\n                return treeNode;\r\n            });\r\n        }\r\n        switch (wrapNode.type) {\r\n            case 'root': {\r\n                const node = wrapNode.data as LogicUtil.NodeRoot;\r\n                return [\r\n                    { data: node.seedMng, children: getChildrenDataNode(node.seedMng) },\r\n                    { data: node.logicMng, children: getChildrenDataNode(node.logicMng) }\r\n                ];\r\n            }\r\n            case 'seed-mng':\r\n            case 'logic-mng': return get('defs');\r\n            case 'seed-item':\r\n            case 'connector':\r\n            case 'inherit-logic':\r\n            case 'logic-item': return get('mngs');\r\n            case 'send-mng':\r\n            case 'behavior-mng':\r\n            case 'visual-mng':\r\n            case 'extend-mng':\r\n            case 'visual-mng': return get('params');\r\n            case 'inherit-mng': return get('inherits');\r\n            case 'argument-mng': return get('args');\r\n            case 'sample-mng': return get('samples');\r\n            case 'field-mng': return get('fields');\r\n            case 'thumbnail-mng': return get('items');\r\n        }\r\n        return [];\r\n    };\r\n\r\n    export const getSwapButtons = (node: TreeUtil.ElementNode, invalidate: () => void) => {\r\n        return <>\r\n            <FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Swap ↑',\r\n                        isEnable: !LogicElementUtil.isHead(node),\r\n                        callback: () => {\r\n                            LogicElementUtil.swapOrder(node, -1);\r\n                            invalidate();\r\n                        }\r\n                    }\r\n                ]}\r\n            />\r\n            <FormUtil.ButtonRecord\r\n                isCenter\r\n                buttons={[\r\n                    {\r\n                        label: 'Swap ↓',\r\n                        isEnable: !LogicElementUtil.isTail(node),\r\n                        callback: () => {\r\n                            LogicElementUtil.swapOrder(node, 1);\r\n                            invalidate();\r\n                        }\r\n                    }\r\n                ]}\r\n            />\r\n        </>;\r\n    }\r\n}\r\n\r\nexport default LogicUtil;\r\n\r\nconst _Category = styled.div<{\r\n    backgroundColor: string;\r\n    isDisable?: boolean;\r\n}>`\r\n    ${Styles.CSS_LABEL_MIDIUM}\r\n    display: inline-block;\r\n    position: relative;\r\n    background-color: ${props => props.backgroundColor};\r\n    /* width: 100%; */\r\n    ${props => !(props.isDisable ?? false) ? '' : css`\r\n        text-decoration: line-through;\r\n        color: #00054dac;\r\n    `}\r\n    border-radius: 4px 0 0 4px;\r\n    margin: 5px 0 0 0;\r\n    padding: 0 10px;\r\n    border: solid 1px #000000d2;\r\n`;\r\nconst _Detail = styled.span`\r\n    color: #000b69bd;\r\n`;\r\n\r\nconst _EditableValue = styled.div`\r\n    ${Styles.CSS_LABEL_MIDIUM}\r\n    display: inline-block;\r\n    position: relative;\r\n    background-color: #0c0c0c;\r\n    color: #ebebeb;\r\n    border-radius: 0 4px 4px 0;\r\n    /* width: 100%; */\r\n    margin: 5px 0 0 0;\r\n    padding: 0 10px;\r\n`;\r\nconst _Span = styled.span<{\r\n    color: string;\r\n}>`\r\n    color: ${props => props.color};\r\n`;\r\nconst _ValueType = styled.span`\r\n    color: #fff9d6b9;\r\n`;\r\nconst _Signature = styled.span`\r\n    color: #ffffff78;\r\n`;\r\nconst _Field = styled.span`\r\n    color: #ff2d2d;\r\n`;","import { type } from \"os\";\r\nimport { createContext, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport Styles from \"../../../base/design/styles\";\r\nimport DataUtil from \"../../../utils/dataUtil\";\r\nimport FormUtil from \"../../../utils/form/formUtiil\";\r\nimport TreeUtil from \"../../../utils/treeUtil\";\r\nimport ConfirmDialog from \"../../dialog/confirmDialog\";\r\nimport { GlobalContext } from \"../../entry/systemEntry\";\r\nimport Common from \"../common\";\r\nimport LogicPreviewFrame from \"../preview/logicPreviewFrame\";\r\nimport LogicElementUtil from \"./util/logicElementUtil\";\r\nimport LogicUtil from \"./util/logicUtil\";\r\n\r\nexport const FactoryTreeContext = createContext({} as LogicUtil.DetailArgs);\r\n\r\nconst LogicMainteTab = () => {\r\n    const { store, setStore } = useContext(GlobalContext);\r\n\r\n    const [rootData, setRootData] = useState(LogicElementUtil.getInitialData());\r\n    const [focusNode, setFocusNode] = useState<TreeUtil.ElementNode | null>(null);\r\n    // const [treeDisable, setTreeDisable] = useState(false);\r\n    const [isModify, setModify] = useState<boolean>(false);\r\n    const [invalidate, setInvalidate] = useState<any>(null);\r\n\r\n    const [fileHandle, setFileHandle] = useState<FileSystemFileHandle | null>(null);\r\n\r\n    const rootDataNode: TreeUtil.DataNode = useMemo(() => {\r\n        return {\r\n            data: rootData,\r\n            children: LogicUtil.getChildrenDataNode(rootData)\r\n        }\r\n    }, [rootData]);\r\n\r\n\r\n    const loadFile = () => {\r\n        (async () => {\r\n            const [fileHandle] = await window.showOpenFilePicker();\r\n            const file = await fileHandle.getFile();\r\n            const fileContents = await file.text();\r\n            setFileHandle(fileHandle);\r\n            const text = DataUtil.unZip(fileContents);\r\n            console.log(text);\r\n            setRootData(JSON.parse(text));\r\n            store.system.dialog = <ConfirmDialog.Component message=\"Successfully file loaded!\" />;\r\n            setStore({ ...store });\r\n        })();\r\n    }\r\n\r\n    const saveFile = () => {\r\n        const options = {\r\n            types: [\r\n                {\r\n                    accept: {\r\n                        'text/plain': ['.plgc'],\r\n                    },\r\n                },\r\n            ],\r\n        };\r\n\r\n        const plainData = JSON.stringify(rootData);\r\n        if (fileHandle != null) {\r\n            (async () => {\r\n                //ファイルへ書き込むための FileSystemWritableFileStream を作成\r\n                const writable = await fileHandle.createWritable();\r\n                //テキストデータの書き込み\r\n                const text = DataUtil.gZip(plainData);\r\n                await writable.write(text);\r\n                //ファイルを閉じる\r\n                await writable.close();\r\n                setFileHandle(fileHandle);\r\n                // this.score.setScoreState({ ...state });\r\n                const file = await fileHandle.getFile();\r\n                store.system.dialog = <ConfirmDialog.Component message=\"successfully overwritten!\" />;\r\n                setStore({ ...store });\r\n            })();\r\n        } else {\r\n            window.showSaveFilePicker(options).then((handle) => {\r\n                (async () => {\r\n                    //ファイルへ書き込むための FileSystemWritableFileStream を作成\r\n                    const writable = await handle.createWritable();\r\n                    //テキストデータの書き込み\r\n                    const text = DataUtil.gZip(plainData);\r\n                    await writable.write(text);\r\n                    //ファイルを閉じる\r\n                    await writable.close();\r\n                    setFileHandle(handle);\r\n                    store.system.dialog = <ConfirmDialog.Component message=\"Successfully written to file!\" />;\r\n                    setStore({ ...store });\r\n                })();\r\n            }).catch(() => {\r\n                console.log('キャンセルされました');\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 操作中のOrigin要素の取得する\r\n     * Originの下でなかった場合はnullを返す\r\n     */\r\n    const getMaster = () => {\r\n        let cur: TreeUtil.ElementNode | null = focusNode;\r\n        while (cur != null) {\r\n            if ((cur.data as LogicUtil.WrapElement).type === 'logic-item') return cur;\r\n            cur = cur.parent;\r\n        };\r\n        return null;\r\n    }\r\n    const originNode = getMaster();\r\n    /**\r\n     * プレビューダイアログを表示する\r\n     */\r\n    const openPreviewDialog = () => {\r\n        store.system.dialog = (\r\n            <LogicPreviewFrame.Component\r\n                node={originNode as TreeUtil.ElementNode}\r\n                rootData={rootData}\r\n            />\r\n        );\r\n        setStore({ ...store });\r\n    }\r\n\r\n    return (\r\n        <_Wrap\r\n            tabIndex={0}\r\n            onKeyDown={(e) => {\r\n                // console.log(e.key);\r\n                if (isModify || focusNode == null) return;\r\n                switch (e.key) {\r\n                    case 'ArrowRight': {\r\n                        if (focusNode.children.length > 0) {\r\n                            if (!focusNode.isOpen) focusNode.isOpen = true;\r\n                            else setFocusNode(focusNode.children[0]);\r\n                            setInvalidate({});\r\n                        }\r\n                    } break;\r\n                    case 'ArrowLeft': {\r\n                        if (focusNode.isOpen) focusNode.isOpen = false;\r\n                        else {\r\n                            if (focusNode.parent != null) setFocusNode(focusNode.parent);\r\n                        }\r\n                        setInvalidate({});\r\n                    } break;\r\n                    case 'ArrowUp': {\r\n                        if (focusNode.parent != null) {\r\n                            const list = focusNode.parent.children;\r\n                            list.forEach((n, i) => {\r\n                                if (focusNode == n) {\r\n                                    if(i === 0) {\r\n                                        setFocusNode(focusNode.parent);\r\n                                        setInvalidate({});\r\n                                    } else {\r\n                                        setFocusNode(list[i - 1]);\r\n                                        setInvalidate({});\r\n                                    }\r\n                                    return 1;\r\n                                }\r\n                            });\r\n                        }\r\n                    } break;\r\n                    case 'ArrowDown': {\r\n                        if (focusNode.parent != null) {\r\n                            const list = focusNode.parent.children;\r\n                            list.forEach((n, i) => {\r\n                                if (focusNode == n && i < list.length - 1) {\r\n                                    setFocusNode(list[i + 1]);\r\n                                    setInvalidate({});\r\n                                    return 1;\r\n                                }\r\n                            });\r\n                        }\r\n                    } break;\r\n                    case ' ': {\r\n                        if (originNode != null) openPreviewDialog();\r\n                    } break;\r\n                }\r\n            }}\r\n        >\r\n            <_TreeDiv>\r\n                <_TreeHead>\r\n                    <_TreeHeadHalf>\r\n                        <FormUtil.ButtonRecord\r\n                            isCenter\r\n                            buttons={[\r\n                                {\r\n                                    label: 'Preview',\r\n                                    isEnable: originNode != null,\r\n                                    callback: openPreviewDialog\r\n                                }\r\n                            ]}\r\n                        />\r\n                    </_TreeHeadHalf>\r\n                    <_TreeHeadHalf>\r\n                        <FormUtil.ButtonRecord\r\n                            isCenter\r\n                            buttons={[\r\n                                {\r\n                                    label: 'Save',\r\n                                    callback: saveFile\r\n                                },\r\n                                {\r\n                                    label: 'Load',\r\n                                    callback: loadFile\r\n                                }\r\n                            ]}\r\n                        />\r\n                    </_TreeHeadHalf>\r\n                </_TreeHead>\r\n                <_TreeBody>\r\n                    <TreeUtil.Frame\r\n                        rootDataNode={rootDataNode}\r\n                        clickEvent={(node: TreeUtil.ElementNode) => {\r\n                            setFocusNode(node);\r\n                        }}\r\n                        getLabelJsx={(node: TreeUtil.ElementNode) => {\r\n                            // console.log(focusNode);\r\n                            // console.log(node);\r\n                            // const isActive = focusNode == node || (focusNode?.depth===0 && focusNode.data == rootDataNode.data)\r\n                            return LogicUtil.getNodeDisplayJsx(node, focusNode?.data == node.data)\r\n                        }}\r\n                        invalidate={invalidate}\r\n                        focusNode={focusNode}\r\n                        isDisable={isModify}\r\n                    />\r\n                </_TreeBody>\r\n            </_TreeDiv>\r\n            <_PropsDiv>\r\n                <_DetailDiv>\r\n                    <_DetailHeader>\r\n                        <_DetailHeaderLabel>{LogicUtil.getTypeName(focusNode)}</_DetailHeaderLabel>\r\n                    </_DetailHeader>\r\n                    <FactoryTreeContext.Provider value={{\r\n                        rootData,\r\n                        node: focusNode as TreeUtil.ElementNode,\r\n                        setFocusNode: setFocusNode,\r\n                        invalidate: () => { setInvalidate({}) },\r\n                        isModify,\r\n                        setModify,\r\n                        // treeDisable,\r\n                        setRootData,\r\n                        removeSelf: () => {\r\n                            const node = focusNode as TreeUtil.ElementNode;\r\n                            let index = -1;\r\n                            node.parent?.children.forEach((n, i) => {\r\n                                if (n == node) index = i;\r\n                            });\r\n                            node.parent?.children.splice(index, 1);\r\n                            const parentWrap = node.parent?.data as LogicUtil.WrapElement;\r\n                            const listName = LogicElementUtil.getListName(parentWrap.type);\r\n                            const list = parentWrap.data[listName] as LogicUtil.WrapElement[];\r\n                            list.splice(index, 1);\r\n                            setFocusNode(node.parent as TreeUtil.ElementNode);\r\n                            setInvalidate({});\r\n                        }\r\n                    }}>\r\n                        <_DetailMainDiv>{LogicUtil.getDetailComponent(focusNode)}</_DetailMainDiv>\r\n                    </FactoryTreeContext.Provider>\r\n                </_DetailDiv>\r\n            </_PropsDiv>\r\n        </_Wrap >\r\n    );\r\n}\r\n\r\nexport default LogicMainteTab;\r\n\r\nconst PROPS_DIV_WIDTH = 460;\r\n\r\nconst _Wrap = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    background-color: #6c8186;\r\n    width: 100%;\r\n    height: 100%;\r\n`;\r\n\r\nconst _TreeDiv = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    background-color: #d5d4d87b;\r\n    width: calc(100% - ${PROPS_DIV_WIDTH}px);\r\n    height: 100%;\r\n    vertical-align: top;\r\n`;\r\n\r\nconst _TreeHead = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    /* background-color: #d5d4d8; */\r\n    width: 100%;\r\n    height: 40px;\r\n`;\r\nconst _TreeHeadHalf = styled.div`\r\n    display: inline-block;\r\n    width: 50%;\r\n`;\r\n\r\nconst _TreeBody = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    background-color: #7fbdb47a;\r\n    height: calc(100% - 40px);\r\n`;\r\n\r\nconst _PropsDiv = styled.div`\r\n    display: inline-block;\r\n    /* position: relative; */\r\n    background-color: #9fa9b6;\r\n    width: ${PROPS_DIV_WIDTH}px;\r\n    height: 100%;\r\n    vertical-align: top;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nconst _DetailDiv = styled.div`\r\n    display: inline-block;\r\n    /* position: relative; */\r\n    background-color: #c0c9c4;\r\n    width: calc(100% - 4px);\r\n    height: calc(100% - 4px);\r\n    margin: 2px 0 0 2px;\r\n`;\r\nconst _DetailHeader = styled.div`\r\n    display: inline-block;\r\n    /* position: relative; */\r\n    /* background-color: #b4b29e; */\r\n    width: 100%;\r\n    height: 40px;\r\n`;\r\nconst _DetailHeaderLabel = styled.div`\r\n    ${Styles.CSS_LABEL_MIDIUM}\r\n    color: #a10000;\r\n    /* background-color: #bbd0d3; */\r\n    border: solid 1px #a10000;\r\n    box-sizing: border-box;\r\n    width: calc(100% - 20px);\r\n    margin: 5px 0 0 10px;\r\n    border-radius: 4px;\r\n`;\r\n\r\nconst _DetailMainDiv = styled.div`\r\n    width: calc(100% - 8px);\r\n    height: calc(100% - 44px);\r\n    margin: 0 0 0 4px;\r\n    background-color: #cfd3cc;\r\n    border: solid 1px #0026a1;\r\n    box-sizing: border-box;\r\n    border-radius: 4px;\r\n`;\r\n\r\nconst _Blind = styled.div<{\r\n    isVisible: boolean;\r\n}>`\r\n    display: inline-block;\r\n    ${props => props.isVisible ? '' : css`\r\n        display: none;\r\n    `}\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    z-index: 10;\r\n    background-color: #0012616c;\r\n    width: 100%;\r\n    height: 100%;\r\n`;","\r\nconst ManageTab = () => {\r\n\r\n    return (<></>);\r\n}\r\n\r\nexport default ManageTab;","import { type } from \"os\";\r\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport TreeUtil from \"../../../utils/treeUtil\";\r\nimport Common from \"../common\";\r\nimport TimelineUtil from \"./timelineUtil\";\r\n\r\nconst LauncherTab = () => {\r\n\r\n    return (\r\n        <_Wrap\r\n            tabIndex={0}\r\n        >\r\n            <_TreeDiv>\r\n                <_TreeHead>\r\n                    {/* <HierarchyNavi cur={focusNode}/> */}\r\n                </_TreeHead>\r\n                <_TreeBody>\r\n                </_TreeBody>\r\n            </_TreeDiv>\r\n            <_PropsDiv>\r\n            </_PropsDiv>\r\n            {/* <_Blind isVisible={isBackingWnd}>\r\n                    <_Contents>{!isBackingWnd ? <></> : <BackingEditorFrame />}</_Contents>\r\n                </_Blind> */}\r\n        </_Wrap >\r\n    );\r\n}\r\n\r\nexport default LauncherTab;\r\n\r\n\r\nconst PROPS_DIV_WIDTH = 460;\r\n\r\nconst _Wrap = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    background-color: #c3d8dd;\r\n    width: 100%;\r\n    height: 100%;\r\n`;\r\n\r\nconst _TreeDiv = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    /* background-color: #d5d4d8; */\r\n    width: calc(100% - ${PROPS_DIV_WIDTH}px);\r\n    height: 100%;\r\n    vertical-align: top;\r\n`;\r\n\r\nconst _TreeHead = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    /* background-color: #d5d4d8; */\r\n    width: 100%;\r\n    height: 40px;\r\n`;\r\n\r\nconst _TreeBody = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    height: calc(100% - 40px);\r\n`;\r\n\r\nconst _PropsDiv = styled.div`\r\n    display: inline-block;\r\n    /* position: relative; */\r\n    /* background-color: #532fc0; */\r\n    width: ${PROPS_DIV_WIDTH}px;\r\n    height: 100%;\r\n    vertical-align: top;\r\n    box-sizing: border-box;\r\n    padding: 6px 6px 6px 0;\r\n`;\r\n\r\nconst _TabContWrap = styled.div`\r\n    display: inline-block;\r\n    /* position: relative; */\r\n    background-color: #c0c9c4;\r\n    width: calc(100% - 4px);\r\n    height: calc(100% - 4px);\r\n    margin: 2px 0 0 2px;\r\n`;\r\n\r\nconst _Blind = styled.div<{\r\n    isVisible: boolean;\r\n}>`\r\n    display: inline-block;\r\n    ${props => props.isVisible ? '' : css`\r\n        display: none;\r\n    `}\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    z-index: 10;\r\n    background-color: #0012616c;\r\n    width: 100%;\r\n    height: 100%;\r\n`;\r\n\r\nconst _Contents = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    width: 630px;\r\n    /* height: 400px; */\r\n    background-color: #a3a3a3;\r\n    /* opacity: 0.9; */\r\n    overflow: hidden;\r\n`;","import { useContext, useEffect, useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { TabbedPane } from \"../../base/components/tab/tabbedPane\";\r\nimport Styles, { _CSS_LABEL_MIDIUM } from \"../../base/design/styles\";\r\nimport { SCORE_TAB_MARGIN } from \"../../utils/systemConst\";\r\nimport { GlobalContext } from \"../entry/systemEntry\";\r\nimport LogicMainteTab from \"./factory/logicMainteTab\";\r\nimport ManageTab from \"./manage/manageTab\";\r\nimport PreviewTab from \"./manage/manageTab\";\r\nimport LauncherTab from \"./launcher/launcherTab\";\r\nimport Timeline from \"./launcher/launcherTab\";\r\n\r\n\r\nconst CreateChannel = () => {\r\n\r\n    const { store, setStore } = useContext(GlobalContext);\r\n\r\n    return (\r\n        <_Wrap>\r\n            <TabbedPane\r\n                tabElements={[\r\n                    { name: 'Manage', enable: false, cont: <ManageTab /> },\r\n                    { name: 'Launcher', enable: true, cont: <LauncherTab /> },\r\n                    { name: 'Library', enable: true, cont: <LogicMainteTab /> }\r\n                ]}\r\n                activeNo={2}\r\n            // selectTabIndex={(index: number) => dispatcher.score.setScoreTabIndex(index)}\r\n            />\r\n        </_Wrap>\r\n    );\r\n}\r\nexport default CreateChannel;\r\n\r\nconst _Wrap = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    margin: ${SCORE_TAB_MARGIN}px 0 0 ${SCORE_TAB_MARGIN}px;\r\n    width: calc(100% - ${SCORE_TAB_MARGIN * 2}px);\r\n    height: calc(100% - ${SCORE_TAB_MARGIN * 2}px);\r\n    background-color: transparent;\r\n    /* background-color: #c3d8dd6f; */\r\n    /* border: solid 1px black;\r\n    border-radius: 5px; */\r\n    /* box-shadow: 0 2px 14px 4px #000b3a48; */\r\n`;\r\n\r\n","import { Redirect } from \"react-router-dom\";\r\nimport DataUtil from \"../../utils/dataUtil\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport { GlobalContext } from \"./systemEntry\";\r\n\r\nconst DirectView = (props: {\r\n    hashKey: string;\r\n}) => {\r\n\r\n    const { store, setStore } = useContext(GlobalContext);\r\n    const conteseq = DataUtil.getDecryptionedScoreSeq(props.hashKey);\r\n\r\n    // const setScoreData = (owner: string, dispnam: string, data: ScoreData) => {\r\n    //     store.scoreState.focusIndex = 2;\r\n    //     store.scoreState.distIndex = store.scoreState.focusIndex;\r\n    //     dispatcher.score.setScoreState({ ...store.scoreState });\r\n    //     // dispatcher.score.setScoreTabIndex(1);\r\n    //     dispatcher.score.setScoreData(data);\r\n    //     // キャッシュの更新\r\n    //     store.scoreData = data;\r\n    //     CacheUtil.updateHarmonizeCache(store, dispatcher);\r\n    //     store.systemState.mainChannelIndex = 5;\r\n    //     store.systemState.scoreTabIndex = 0;\r\n    //     store.systemState.directScore = {\r\n    //         owner, name: dispnam\r\n    //     };\r\n    //     dispatcher.system.setState(store.systemState);\r\n    // };\r\n\r\n    useEffect(() => {\r\n        // DataUtil.findScore(conteseq).then(resList => {\r\n        //     if (resList.length > 0) {\r\n        //         const source = resList[0]['data'];\r\n        //         const owner = resList[0]['owner'];\r\n        //         const dispnam = resList[0]['dispnam'];\r\n        //         const text = DataUtil.unZip(source);\r\n        //         setScoreData(owner, dispnam, JSON.parse(text));\r\n        //     }\r\n        // });\r\n    }, []);\r\n    // if (store.systemState.directScore == null) {\r\n    //     return <></>;\r\n    // } else {\r\n    //     return <Redirect to=\"/\" />;\r\n    //     // return <MainFrame />;\r\n    // }\r\n    return <Redirect to=\"/\" />;\r\n}\r\n\r\nexport default DirectView;","import { Redirect } from \"react-router-dom\";\r\nimport DataUtil from \"../../utils/dataUtil\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport { GlobalContext } from \"./systemEntry\";\r\n\r\nconst DirectLogin = (props: {\r\n    hashKey: string;\r\n}) => {\r\n\r\n    const { store, setStore } = useContext(GlobalContext);\r\n\r\n    useEffect(() => {\r\n        const seq = DataUtil.getDecryptionedUserSeq(props.hashKey);\r\n        console.log(seq);\r\n        DataUtil.findUserInfoFromSeq(seq).then(resList => {\r\n            console.log(resList);\r\n            if (resList.length > 0) {\r\n                const loginProps = resList[0];\r\n                // store.userEnv.login = loginProps;\r\n                // dispatcher.system.setUserEnv(store.userEnv);\r\n            }\r\n        });\r\n    }, []);\r\n    // if (store.userEnv.login == null) {\r\n    //     return <></>;\r\n    // } else {\r\n    //     return <Redirect to=\"/\" />;\r\n    //     // return <MainFrame />;\r\n    // }\r\n    return <Redirect to=\"/\" />;\r\n}\r\n\r\nexport default DirectLogin;","\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Styles from \"../../base/design/styles\";\r\nimport DataUtil from \"../../utils/dataUtil\";\r\nimport { HOME_USER_DIV_HEIGHT } from \"../../utils/systemConst\";\r\nimport { GlobalContext } from \"../entry/systemEntry\";\r\n\r\n\r\ntype NotePorp = {\r\n    version: string;\r\n    date: string;\r\n    note: string;\r\n}\r\n\r\nconst ReleaseNote = () => {\r\n\r\n    const [jsx, setJsx] = useState<JSX.Element[]>([]);\r\n    useEffect(() => {\r\n        fetch('assets/release_note.json')\r\n            .then(response => response.json()) // (2) レスポンスデータを取得\r\n            .then(json => { // (3)レスポンスデータを処理\r\n                const list = json as NotePorp[];\r\n\r\n                setJsx(list.map((item, i) => {\r\n                    const record = item.note.split('\\n').map((r, i) => <span key={i}>{r}<br /></span>);\r\n                    return (\r\n                        <_Item key={i}>\r\n                            <_Header>v{item.version} ({item.date})</_Header>\r\n                            <_Detail>{record}</_Detail>\r\n                        </_Item>\r\n                    );\r\n                }));\r\n            });\r\n    }, []);\r\n\r\n    return (<_ListFrame>{jsx}</_ListFrame>);\r\n}\r\n\r\nexport default ReleaseNote;\r\n\r\nconst _ListFrame = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    width: calc(100% - 8px);\r\n    /* height: calc(100% - ${HOME_USER_DIV_HEIGHT + 90}px); */\r\n    height: calc(100% - 48px);\r\n    margin: 4px 0 0 4px;\r\n    background-color: #d3d3c5;\r\n    border: 1px solid #e60000;\r\n    border-radius: 4px;\r\n    box-sizing: border-box;\r\n    overflow-y: auto;\r\n`;\r\n\r\nconst _Item = styled.div`\r\n    display: inline-block;\r\n    width: calc(100% - 8px);\r\n    margin: 4px 0 0 4px;\r\n    background-color: #bfcace;\r\n    border: 1px solid #9b9b9b;\r\n    border-radius: 6px;\r\n`;\r\n\r\nconst _Header = styled.div`\r\n    display: inline-block;\r\n    width: calc(100% - 8px);\r\n    height: 20px;\r\n    font-size: ${Styles.FONT_SMALL}px;\r\n    margin: 2px 0 0 4px;\r\n    font-weight: 600;\r\n    /* background-color: #8bdbf8; */\r\n    color: #494975;\r\n`;\r\n\r\nconst _Detail = styled.div`\r\n    display: inline-block;\r\n    width: calc(100% - 8px);\r\n    font-size: ${Styles.FONT_SMALL}px;\r\n    margin: 2px 0 0 4px;\r\n    /* background-color: #dafce4; */\r\n    color: #754949;\r\n`;","import { useContext, useEffect, useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport Styles, { _CSS_LABEL_MIDIUM } from \"../../base/design/styles\";\r\nimport DataUtil from \"../../utils/dataUtil\";\r\nimport { HOME_USER_DIV_HEIGHT } from \"../../utils/systemConst\";\r\nimport { GlobalContext } from \"../entry/systemEntry\";\r\nimport ReleaseNote from \"./releaseNote\";\r\n\r\ntype scoreProps = {\r\n    dispnam: string;\r\n    seq: number;\r\n    owner: string;\r\n    lastmod: string;\r\n}\r\n\r\nconst HomeChannel = () => {\r\n\r\n    const { store, setStore } = useContext(GlobalContext);\r\n\r\n    const [userCount, setUserCount] = useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n    }, []);\r\n\r\n\r\n    return (<_Wrap>\r\n        <_Left>\r\n            <_MessageRecord>{userCount} users have created accounts.</_MessageRecord>\r\n            <ReleaseNote />\r\n        </_Left>\r\n        <_Right>\r\n            <_MessageRecord>{0} arts have been published.</_MessageRecord>\r\n        </_Right>\r\n    </_Wrap>);\r\n}\r\n\r\nexport default HomeChannel;\r\n\r\nexport const countUsers = async () => {\r\n    const response = await DataUtil.sendQueryRequestToAPI('select', `SELECT count(*) cnt FROM user_tbl`);\r\n    const results = await response.json();\r\n    return (results as any[])[0]['cnt'] as number;\r\n};\r\n\r\nexport const findAllScore = async () => {\r\n    const response = await DataUtil.sendQueryRequestToAPI('select', `\r\n        SELECT seq, (select id from user_tbl where seq = score.user_seq) as owner, dispnam, lastmod\r\n        FROM scoretbl score\r\n        WHERE share <> 'url'\r\n        ORDER BY lastmod desc\r\n    `);\r\n    const results = await response.json();\r\n    return results as any[];\r\n};\r\n\r\nconst _Wrap = styled.div`\r\n    display: inline-block;\r\n    width: calc(100% - 8px);\r\n    height: calc(100% - 8px);\r\n    margin: 4px 0 0 4px;\r\n    background-color: #ccc;\r\n`;\r\n\r\nconst _Left = styled.div`\r\n    display: inline-block;\r\n    width: 50%;\r\n    height: 100%;\r\n    background-color: #bbcac7;\r\n`;\r\n\r\n\r\nconst _MessageRecord = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 40px;\r\n    font-size: 22px;\r\n    font-weight: 600;\r\n    color: #cd0202;\r\n    background-color: #ffffff3d;\r\n    padding: 0 0 0 10px;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nconst _ListInfoDiv = styled.div<{\r\n    isEnable: boolean;\r\n}>`\r\n    display: inline-block;\r\n    width: calc(100% - 8px);\r\n    height: ${HOME_USER_DIV_HEIGHT}px;\r\n    margin: 4px 0 4px 4px;\r\n    background-color: #acacac;\r\n    border: solid 1px #1b00b3;\r\n    ${props => props.isEnable ? '' : css`\r\n        opacity: 0.3;\r\n        pointer-events: none;\r\n    `}\r\n    border-radius: 4px;\r\n    box-sizing: border-box;\r\n    color: #060053;\r\n`;\r\n\r\nconst _TitleLabel = styled.div`\r\n    display: inline-block;\r\n    height: 40px;\r\n    font-size: 30px;\r\n    font-weight: 600;\r\n    color: #1c2c95;\r\n    /* background-color: #3f80cf57; */\r\n    padding: 0 10px;\r\n`;\r\nconst _Recored = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 35px;\r\n    /* background-color: #3fcf7b56; */\r\n    padding: 4px 0 0 10px;\r\n`;\r\n\r\nconst _ItemnLabel = styled.div`\r\n    display: inline-block;\r\n    height: calc(100% - 4px);\r\n    width: 140px;\r\n    font-size: 24px;\r\n    line-height: 24px;\r\n    font-weight: 600;\r\n    color: #08106e;\r\n    border: solid 1px #1b00b3;\r\n    box-sizing: border-box;\r\n    /* background-color: #85a2c5; */\r\n    background: linear-gradient(to bottom, #8a98a7, #a3bbd2, #8a98a7);\r\n    border-radius: 4px;\r\n    text-align: center;\r\n`;\r\n\r\nconst _ItemnValue = styled.div`\r\n    display: inline-block;\r\n    height: calc(100% - 4px);\r\n    width: calc(100% - 170px);\r\n    margin-left: 10px;\r\n    font-size: 24px;\r\n    line-height: 30px;\r\n    user-select: text;\r\n    /* font-weight: 600; */\r\n    color: #ffffff;\r\n    padding: 0 5px;\r\n    box-sizing: border-box;\r\n    background-color: #808080;\r\n    text-align: left;\r\n`;\r\n\r\nconst _ItemnForm = styled.input`\r\n    display: inline-block;\r\n    height: calc(100% - 4px);\r\n    width: calc(100% - 170px);\r\n    margin-left: 10px;\r\n    font-size: 24px;\r\n    line-height: 24px;\r\n    /* font-weight: 600; */\r\n    color: #1a1a1a;\r\n    padding: 0 5px;\r\n    box-sizing: border-box;\r\n    background-color: #e9e9e9;\r\n    text-align: left;\r\n`;\r\n\r\nconst _ButtonsDiv = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 40px;\r\n    /* background-color: #888888; */\r\n    box-sizing: border-box;\r\n    text-align: left;\r\n`;\r\n\r\nconst _Button = styled.div<{\r\n    isEnable: boolean;\r\n}>`\r\n    ${_CSS_LABEL_MIDIUM}\r\n    /* width: 160px; */\r\n    padding: 0 40px;\r\n    /* line-height: 25px; */\r\n    box-sizing: border-box;\r\n    background-color: #a8a8a8;\r\n    background: linear-gradient(to bottom, #787878, #b4b4b4, #787878);\r\n    border: 1px solid #1a2b3f;\r\n    color: #1a2b3f;\r\n    border-radius: 4px;\r\n    margin: 5px 0 0 4px;\r\n    ${props => props.isEnable ? '' : Styles.CSS_BUTTON_DISABLE}\r\n    &:hover {\r\n        /* background-color: #98bfc2; */\r\n    background: linear-gradient(to bottom, #989898, #b4b4b4, #989898);\r\n    }\r\n`;\r\n\r\n\r\n\r\nconst _Right = styled.div`\r\n    display: inline-block;\r\n    width: 50%;\r\n    height: 100%;\r\n    background-color: #bbbfca;\r\n    vertical-align: top;\r\n`;\r\nconst _ListFrame = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    width: calc(100% - 8px);\r\n    height: calc(100% - 42px);\r\n    margin: 4px 0 0 4px;\r\n    background-color: #d3d3c5;\r\n    border: 1px solid #e60000;\r\n    border-radius: 4px;\r\n    box-sizing: border-box;\r\n    overflow-y: auto;\r\n`;\r\nconst _CloudItem = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    /* height: 60px; */\r\n    border-bottom: 1px solid #888888;\r\n    /* background-color: white; */\r\n    background: linear-gradient(to bottom, transparent, #b6b6b684);\r\n    margin: 2px 0 0 0;\r\n    padding: 0 0 0 4px;\r\n    box-sizing: border-box;\r\n    /* padding-left: 4px; */\r\n    &:hover {\r\n        background: linear-gradient(to bottom, transparent, #ffffff5c);\r\n    }\r\n`;\r\n\r\nconst _Owner = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 20px;\r\n    line-height: 21px;\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n    color: #c9494f;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n`;\r\nconst _CName = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    width: calc(100% - 250px);\r\n    height: 35px;\r\n    font-size: 24px;\r\n    line-height: 36px;\r\n    font-weight: 600;\r\n    color: #47417c;\r\n    /* background-color: #f8f8e8; */\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n`;\r\nconst _CDate = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    width: 250px;\r\n    height: 35px;\r\n    font-size: 24px;\r\n    line-height: 36px;\r\n    font-weight: 600;\r\n    color: #417c49;\r\n    /* background-color: #f8f8e8; */\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n`;","import { useContext, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { ChannelPane } from \"../../base/components/tab/channelPane\";\r\nimport { TabbedPane } from \"../../base/components/tab/tabbedPane\";\r\nimport { MAIN_FRAME_MARGIN } from \"../../utils/systemConst\";\r\nimport { GlobalContext } from \"./systemEntry\";\r\nimport { AiFillHome } from 'react-icons/ai';\r\nimport { CgOptions, CgPiano } from 'react-icons/cg';\r\nimport { VscGitPullRequestCreate } from 'react-icons/vsc';\r\nimport { HashRouter, Redirect, Route, Switch, useLocation } from \"react-router-dom\";\r\nimport CreateChannel from \"../create/createChannel\";\r\nimport DirectView from \"./directView\";\r\nimport DirectLogin from \"./directLogin\";\r\nimport HomeChannel from \"../home/homeChannel\";\r\n\r\nconst MainFrame = () => {\r\n\r\n    const { store, setStore } = useContext(GlobalContext);\r\n\r\n    return (\r\n        <HashRouter basename={process.env.PUBLIC_URL}>\r\n            <RouterManage />\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default MainFrame;\r\n\r\nconst RouterManage = () => {\r\n\r\n    const { store, setStore } = useContext(GlobalContext);\r\n\r\n    const query = new URLSearchParams(useLocation().search);\r\n    const str = query.get('v') as string;\r\n\r\n    return (\r\n        <Switch>\r\n            <Route path=\"/\" exact>\r\n                <_Wrap>\r\n                    {/* <DraggableDialog /> */}\r\n                    {/* <ExecutableButton labelText={'test'} size={'midium'} /> */}\r\n                    <ChannelPane\r\n                        tabElements={[\r\n                            { name: 'Home', icon: <AiFillHome />, isEnable: true, cont: <HomeChannel /> },\r\n                            { name: 'Create', icon: <VscGitPullRequestCreate />, isEnable: true, cont: <CreateChannel/> },\r\n                        ]}\r\n                        activeNo={0}\r\n                    // selectTabIndex={(index: number) => dispatcher.system.setMainTabIndex(index)}\r\n                    />\r\n                </_Wrap>\r\n            </Route>\r\n            <Route path=\"/test\" exact >\r\n                <_Wrap>\r\n                </_Wrap>\r\n            </Route>\r\n            <Route path=\"/preview\" exact >\r\n                <DirectView hashKey={str} />\r\n            </Route>\r\n            <Route path=\"/user\" exact >\r\n                <DirectLogin hashKey={str} />\r\n            </Route>\r\n        </Switch>\r\n    );\r\n}\r\n\r\n\r\n\r\nconst _Wrap = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    margin: ${MAIN_FRAME_MARGIN}px 0 0 ${MAIN_FRAME_MARGIN}px;\r\n    width: calc(100% - ${MAIN_FRAME_MARGIN * 2}px);\r\n    height: calc(100% - ${MAIN_FRAME_MARGIN * 2}px);\r\n    background-color: transparent;\r\n    /* background-color: #c3d8dd6f; */\r\n    /* border: solid 1px black;\r\n    border-radius: 5px; */\r\n    /* box-shadow: 0 2px 14px 4px #000b3a48; */\r\n`;","\r\nimport { useEffect, useState } from 'react';\r\nimport styled, { css, keyframes } from 'styled-components';\r\n\r\nconst Splash = (props: {\r\n    remove: () => void\r\n}) => {\r\n    const [isSwitch, setSwitch] = useState<boolean>(false);\r\n    const [timerId, setTimerId] = useState<NodeJS.Timeout>();\r\n\r\n    useEffect(() => {\r\n        setTimerId(setTimeout(() => {\r\n            setSwitch(true);\r\n        }, 3000));\r\n    }, []);\r\n    useEffect(() => {\r\n        if (isSwitch) {\r\n            setTimeout(() => {\r\n                props.remove();\r\n            }, 500);\r\n        }\r\n    }, [isSwitch]);\r\n\r\n    return (\r\n\r\n        <_Blind isSwitch={isSwitch} onClick={(e) => {\r\n            clearTimeout(timerId as NodeJS.Timeout);\r\n            setSwitch(true);\r\n        }}>\r\n            <_Frame>\r\n                <_Title>\r\n                    <span>L</span>iCreSia\r\n                </_Title>\r\n                <_NowLoading>Now Loading...</_NowLoading>\r\n                <_Copylight>Copyright © 2022 Licresia All Rights Reserved.</_Copylight>\r\n            </_Frame>\r\n        </_Blind>\r\n    );\r\n}\r\n\r\nexport default Splash;\r\n\r\nconst _Blind = styled.div<{\r\n    isSwitch: boolean;\r\n}>`\r\n    display: inline-block;\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    z-index: 10;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #000f3a86;\r\n    opacity: ${props => props.isSwitch ? '0' : '1'};\r\n    transition: opacity 500ms;\r\n`;\r\nconst _Frame = styled.div<{\r\n}>`\r\n    display: inline-block;\r\n    position: relative;\r\n    left: calc(50% - 450px);\r\n    top: calc(50% - 300px);\r\n    z-index: 11;\r\n    width: 900px;\r\n    height: 600px;\r\n    background: radial-gradient(#868686, #ffffff);\r\n    border-radius: 8px;\r\n    border: solid 2px #cfcfcf;\r\n    box-sizing: border-box;\r\n    transition: opacity 500ms;\r\n`;\r\n\r\n\r\nconst fadeIn = keyframes`\r\n  0%, 100% {\r\n    opacity: 0.4;\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst _Title = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    margin-top: 10%;\r\n    width: 100%;\r\n    /* height: 400px; */\r\n    /* background-color: #0003b69e; */\r\n    background: linear-gradient(to bottom, #99999913, #ffffff13,#ffffff13,#ffffff13, #99999913);\r\n    color: white;\r\n    font-size: 130px;\r\n    font-weight: 600;\r\n    text-align: center;\r\n    text-shadow: 1px 2px 22px #0000003d;\r\n    /* line-height: 350px; */\r\n    animation: ${fadeIn} 3s linear infinite;\r\n    /* -webkit-box-reflect:below 1px; */\r\n    -webkit-box-reflect: below 1px -webkit-gradient(\r\n      linear,left top,left bottom,\r\n      from(transparent),\r\n      color-stop(0.6, transparent),\r\n      to(#f80000));\r\n    & span {\r\n        color: red;\r\n        font-size: 160px;\r\n    }\r\n`;\r\n\r\nconst _NowLoading = styled.div`\r\n    display: inline-block;\r\n    position: absolute;\r\n    bottom: 80px;\r\n    width: 100%;\r\n    left: 20px;\r\n    color: #ffffff;\r\n    font-size: 42px;\r\n    font-weight: 600;\r\n    text-align: center;\r\n`;\r\n\r\nconst _Copylight = styled.div`\r\n    display: inline-block;\r\n    position: absolute;\r\n    bottom: 5px;\r\n    left: 20px;\r\n    color: #636363;\r\n    font-size: 22px;\r\n    font-weight: 600;\r\n    text-align: left;\r\n`;","import styled, { css } from \"styled-components\";\r\nimport { TOTAL_HEADER_WIDTH } from \"../../utils/systemConst\";\r\nimport { ImUser } from 'react-icons/im'\r\nimport { MdOutlineLanguage } from 'react-icons/md'\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { GlobalContext } from \"./systemEntry\";\r\nimport DataUtil from \"../../utils/dataUtil\";\r\nimport ConfirmDialog from \"../dialog/confirmDialog\";\r\nimport LoginFrame from \"../dialog/login/loginFrame\";\r\nimport AccountFrame from \"../dialog/accountFrame\";\r\n\r\nconst TotalHeader = () => {\r\n\r\n    const { store, setStore } = useContext(GlobalContext);\r\n\r\n    const user = store.system.user;\r\n\r\n    const [userId, setUserId] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (user != null) {\r\n            setUserId('@' + user.id);\r\n        }\r\n    }, [user]);\r\n\r\n    // const authButtonJsx = loginProps == undefined ? (\r\n    //     <_LoginButton onClick={() => {\r\n    //         store.systemState.dialog = <LoginFrame />;\r\n    //         dispatcher.system.setState(store.systemState);\r\n    //         console.log(window.location.origin);\r\n    //     }}>\r\n    //         <div><ImUser /></div>\r\n    //         Login / Sign up\r\n    //     </_LoginButton>\r\n    // ) : (<>\r\n    //     <_UserName\r\n    //         isEntry={store.userEnv.login != null}\r\n    //         onClick={() => {\r\n    //             dispatcher.system.setDialog(<AccountFrame />);\r\n    //         }}\r\n    //     >{userId}</_UserName>\r\n    //     <_LoginButton onClick={() => {\r\n    //         store.userEnv.login = null;\r\n    //         dispatcher.system.setUserEnv(store.userEnv);\r\n\r\n    //         dispatcher.system.setDialog(<ConfirmDialog.Component\r\n    //             message={'Logout.\\nSee you next time!'}\r\n    //         />);\r\n    //     }}>\r\n    //         <div><ImUser /></div>\r\n    //         Logout\r\n    //     </_LoginButton>\r\n    // </>);\r\n    return (\r\n        <_Wrap>\r\n            <_Label>\r\n                <_ACCENT>Partice</_ACCENT>&nbsp;<_NORMAL>Simulator</_NORMAL>\r\n            </_Label>\r\n            <_Menu>\r\n                {/* {authButtonJsx} */}\r\n                <_Language>\r\n                    <div><MdOutlineLanguage /></div>\r\n                </_Language>\r\n            </_Menu>\r\n        </_Wrap>\r\n    );\r\n}\r\n\r\nexport default TotalHeader;\r\n\r\nconst _Wrap = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    height: ${TOTAL_HEADER_WIDTH}px;\r\n    background: linear-gradient(to bottom, #192f7e, #000540, #192f7e);\r\n    /* background-color: #c2c2c2; */\r\n    box-shadow: 0 0 8px 0 #000b3a48;\r\n`;\r\n\r\nconst _Label = styled.div`\r\n    display: inline-block;\r\n    margin: 2px 0 0 10px;\r\n    width: 200px;\r\n    height: calc(100% - 4px);\r\n    /* background-color: #00000013; */\r\n    font-size: 34px;\r\n    font-weight: 600;\r\n    line-height: 36px;\r\n    font-style: italic;\r\n    text-shadow: 1px 2px 3px #dbdbdb6a;\r\n`;\r\n\r\nconst _NORMAL = styled.span`\r\n    color: #9fc2d1;\r\n`;\r\nconst _ACCENT = styled.span`\r\n    font-size: 34px;\r\n    color: #ececec;\r\n`;\r\n\r\n\r\n\r\nconst _Menu = styled.div`\r\n    display: inline-block;\r\n    /* width: 300px; */\r\n    height: 100%;\r\n    position: absolute;\r\n    right: 30px;\r\n    /* background-color: #ff00002b; */\r\n`\r\n\r\nconst _MenuItem = styled.div`\r\n    background-color: #c9c7c7;\r\n    &:hover {\r\n        background-color: #cf9bae;\r\n    }\r\n    transition: background-color 800ms;\r\n`\r\n\r\nconst _LoginButton = styled(_MenuItem)`\r\n    display: inline-block;\r\n    /* width: 240px; */\r\n    padding: 0 30px;\r\n    margin: 5px 10px 0 0;\r\n    height: calc(100% - 10px);\r\n    border-radius: 20px;\r\n    /* background: linear-gradient(to bottom, #e9baba, #d39d9d, #e9baba); */\r\n    /* background-color: #adadad; */\r\n    /* border: 1px solid #7e7e7e; */\r\n    /* box-shadow: 0 0 8px 0 #000b3a48; */\r\n    /* text-shadow: 1px 2px 3px #808080ba; */\r\n    text-align: center;\r\n    font-size: 22px;\r\n    font-weight: 600;\r\n    line-height: 28px;\r\n    color: #ffffff;\r\n    vertical-align: top;\r\n\r\n    & div {\r\n        display: inline-block;\r\n        /* background-color: #0000007d; */\r\n        margin: 2px 5px 0 0;\r\n        vertical-align: top;\r\n    }\r\n`;\r\n\r\nconst _UserName = styled.div<{\r\n    isEntry: boolean;\r\n}>`\r\n    display: inline-block;\r\n    /* width: 240px; */\r\n    margin: 5px 20px 0 0;\r\n    height: calc(100% - 10px);\r\n    text-align: center;\r\n    font-size: 22px;\r\n    font-weight: 600;\r\n    line-height: 28px;\r\n    color: #003a86;\r\n    ${props => props.isEntry ? '' : css`\r\n        color: #96000057;\r\n    `}\r\n    vertical-align: top;\r\n`;\r\n\r\nconst _Language = styled(_MenuItem)`\r\n    display: inline-block;\r\n    width: ${TOTAL_HEADER_WIDTH - 6}px;\r\n    height: ${TOTAL_HEADER_WIDTH - 6}px;\r\n    margin: 3px 0 0 0;\r\n    border-radius: 50%;\r\n    /* background: linear-gradient(to bottom, #e9baba, #d39d9d, #e9baba); */\r\n    /* background-color: #48aa9d; */\r\n    /* border: 1px solid #7e7e7e; */\r\n    /* box-shadow: 0 0 8px 0 #000b3a48; */\r\n    /* text-shadow: 1px 2px 3px #808080ba; */\r\n    /* text-align: center; */\r\n    font-size: 28px;\r\n    font-weight: 600;\r\n    color: #ffffff;\r\n    & div {\r\n        display: inline-block;\r\n        margin: 2px 0 0 5px;\r\n        /* background-color: #0000007d; */\r\n        vertical-align: top;\r\n    }\r\n`;","import { createContext, useCallback, useEffect, useReducer, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { initialStore, Store } from '../../redux/store/store';\r\nimport { MAIN_FRAME_MARGIN, TOTAL_HEADER_WIDTH } from '../../utils/systemConst';\r\nimport GloballDialog from '../dialog/globalDialog';\r\nimport MainFrame from './mainFrame';\r\nimport Splash from './splash';\r\nimport TotalHeader from './totalHeader';\r\n\r\n\r\ntype GlobalContextType = {\r\n    store: Store;\r\n    setStore: React.Dispatch<React.SetStateAction<Store>>;\r\n}\r\n\r\nexport const GlobalContext = createContext({} as GlobalContextType);\r\n\r\nconst SystemEntry = () => {\r\n\r\n    const [store, setStore] = useState(initialStore);\r\n    return (\r\n        <GlobalContext.Provider value={{ store, setStore }}>\r\n            <>\r\n                {!store.system.isSplash ? <></> :\r\n                    <Splash\r\n                        remove={() => {\r\n                            setStore({...store, system: {\r\n                                ...store.system, isSplash: false\r\n                            }});\r\n                        }}\r\n                    />}\r\n                <_Wrap>\r\n                    <GloballDialog />\r\n                    <TotalHeader />\r\n                    <_MainDiv>\r\n                        <MainFrame />\r\n                    </_MainDiv>\r\n                </_Wrap>\r\n            </>\r\n        </GlobalContext.Provider>\r\n    );\r\n}\r\n\r\nexport default SystemEntry;\r\n\r\nconst _Wrap = styled.div`\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #364887;\r\n`;\r\n\r\nconst _MainDiv = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: calc(100% - ${TOTAL_HEADER_WIDTH}px);\r\n    /* background-color: #c2c2c2; */\r\n`;","import React, { useEffect } from 'react';\nimport SystemEntry from './system/contents/entry/systemEntry';\n\nfunction App() {\n\n  useEffect(() => {\n    // 右クリック無効\n    document.oncontextmenu = function () { return false; }\n\n    // window.addEventListener(\"keydown\", function (e) {\n    //   // space and arrow keys\n    //   if ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {\n    //     e.preventDefault();\n    //   }\n    // }, false);\n\n    document.onkeydown = (e) => {\n      // if (!['F5'].includes(e.key)) {\n      //   return false;\n      // }\n      if (e.ctrlKey && ['f', 's'].includes(e.key)) {\n        return false;\n      }\n    }\n\n  }, []);\n  return (\n    <SystemEntry />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst REACT_APP_AUTH0_DOMAIN = 'dev-a0p0m4lr.us.auth0.com';\nconst REACT_APP_AUTH0_CLIENT_ID = 'ABaWpYVBZwTr3tkyxhq1kWh2YwT4epew';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}